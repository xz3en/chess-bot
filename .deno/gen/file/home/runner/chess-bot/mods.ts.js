// Import some packages
import "https://deno.land/x/dotenv/load.ts";
import { Harmony, Oak } from "./deps.ts";
// Webserver stuff
const port = Number(Deno.env.get("PORT")) || 3000;
const app = new Oak.Application();
// Command stuff
const commands = new Map;
// We create a Harmony client
const client = new Harmony.Client({
    enableSlash: true,
    intents: [
        "GUILDS",
        "GUILD_MESSAGES",
        "GUILD_MEMBERS",
        "MESSAGE_CONTENT"
    ]
});
// Functions
async function setupCommands() {
    const commandObjects = [];
    for (const file of Deno.readDirSync("commands")){
        const commandObject = new (await import(`./commands/${file.name}`)).default(client);
        commands.set(commandObject.name, commandObject);
        commandObjects.push(commandObject.toObject());
    }
    client.interactions.commands.bulkEdit(commandObjects);
}
// Client listeners
client.on("ready", (_shards)=>{
    console.log(`Connected as ${client.user?.username}#${client.user?.discriminator}`);
    setupCommands();
});
client.on("interactionCreate", async (ctx)=>{
    try {
        if (ctx.type === Harmony.InteractionType.APPLICATION_COMMAND) {
            if (!ctx.data || !("name" in ctx.data)) return;
            if (!ctx.guild) return await ctx.respond({
                content: "This command can only be used in guilds"
            });
            const command = commands.get(ctx.data.name);
            if (!command) return;
            await command.execute(ctx);
        } else if (ctx.type === Harmony.InteractionType.MESSAGE_COMPONENT || ctx.type === Harmony.InteractionType.MODAL_SUBMIT) {
            console.log(ctx.data);
            if (!ctx.data || !("custom_id" in ctx.data)) return;
            const func = (await import(`./buttons/${ctx.data.custom_id}.ts`)).default;
            await func(ctx);
        }
    } catch (err) {
        console.log(err);
        await ctx.respond({
            embeds: [
                new Harmony.Embed().setTitle("An error has occured").setDescription("```" + err + "```").setColor(255, 0, 0)
            ]
        });
    }
});
// Another webserver stuff wtf
app.use((ctx)=>{
    ctx.response.body = "Works";
});
app.listen({
    port
});
console.log(`Listening on port ${port}`);
client.connect();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vaG9tZS9ydW5uZXIvY2hlc3MtYm90L21vZHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0IHNvbWUgcGFja2FnZXNcbmltcG9ydCBcImh0dHBzOi8vZGVuby5sYW5kL3gvZG90ZW52L2xvYWQudHNcIlxuaW1wb3J0IHsgSGFybW9ueSwgT2FrIH0gZnJvbSBcIi4vZGVwcy50c1wiO1xuaW1wb3J0IENDb21tYW5kIGZyb20gXCIuL2NsYXNzZXMvY3VzdG9tQ29tbWFuZC50c1wiO1xuXG4vLyBXZWJzZXJ2ZXIgc3R1ZmZcbmNvbnN0IHBvcnQgPSBOdW1iZXIoRGVuby5lbnYuZ2V0KFwiUE9SVFwiKSkgfHwgMzAwMDtcbmNvbnN0IGFwcCA9IG5ldyBPYWsuQXBwbGljYXRpb24oKTtcblxuLy8gQ29tbWFuZCBzdHVmZlxuXG5jb25zdCBjb21tYW5kczogTWFwPHN0cmluZyxDQ29tbWFuZD4gPSBuZXcgTWFwPHN0cmluZyxDQ29tbWFuZD47XG5cbi8vIFdlIGNyZWF0ZSBhIEhhcm1vbnkgY2xpZW50XG5jb25zdCBjbGllbnQgPSBuZXcgSGFybW9ueS5DbGllbnQoe1xuICAgIGVuYWJsZVNsYXNoOiB0cnVlLFxuICAgIGludGVudHM6IFtcbiAgICAgICAgXCJHVUlMRFNcIixcbiAgICAgICAgXCJHVUlMRF9NRVNTQUdFU1wiLFxuICAgICAgICBcIkdVSUxEX01FTUJFUlNcIixcbiAgICAgICAgXCJNRVNTQUdFX0NPTlRFTlRcIlxuICAgIF1cbn0pO1xuXG4vLyBGdW5jdGlvbnNcblxuYXN5bmMgZnVuY3Rpb24gc2V0dXBDb21tYW5kcygpIHtcbiAgICBjb25zdCBjb21tYW5kT2JqZWN0cyA9IFtdXG4gICAgZm9yIChjb25zdCBmaWxlIG9mIERlbm8ucmVhZERpclN5bmMoXCJjb21tYW5kc1wiKSkge1xuICAgICAgICBjb25zdCBjb21tYW5kT2JqZWN0OiBDQ29tbWFuZCA9IG5ldyAoYXdhaXQgaW1wb3J0KGAuL2NvbW1hbmRzLyR7ZmlsZS5uYW1lfWApKS5kZWZhdWx0KGNsaWVudCk7XG4gICAgICAgIFxuICAgICAgICBjb21tYW5kcy5zZXQoY29tbWFuZE9iamVjdC5uYW1lLGNvbW1hbmRPYmplY3QpO1xuXG4gICAgICAgIGNvbW1hbmRPYmplY3RzLnB1c2goY29tbWFuZE9iamVjdC50b09iamVjdCgpKTtcbiAgICB9XG4gICAgY2xpZW50LmludGVyYWN0aW9ucy5jb21tYW5kcy5idWxrRWRpdChjb21tYW5kT2JqZWN0cylcbn1cblxuLy8gQ2xpZW50IGxpc3RlbmVyc1xuY2xpZW50Lm9uKFwicmVhZHlcIiwoX3NoYXJkczogbnVtYmVyKSA9PiB7XG4gICAgY29uc29sZS5sb2coYENvbm5lY3RlZCBhcyAke2NsaWVudC51c2VyPy51c2VybmFtZX0jJHtjbGllbnQudXNlcj8uZGlzY3JpbWluYXRvcn1gKTtcbiAgICBzZXR1cENvbW1hbmRzKCk7XG59KTtcblxuY2xpZW50Lm9uKFwiaW50ZXJhY3Rpb25DcmVhdGVcIixhc3luYyAoY3R4OiBIYXJtb255LkludGVyYWN0aW9uKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKGN0eC50eXBlID09PSBIYXJtb255LkludGVyYWN0aW9uVHlwZS5BUFBMSUNBVElPTl9DT01NQU5EKSB7XG4gICAgICAgICAgICBpZiAoIWN0eC5kYXRhIHx8ICEoXCJuYW1lXCIgaW4gY3R4LmRhdGEpKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoIWN0eC5ndWlsZCkgcmV0dXJuIGF3YWl0IGN0eC5yZXNwb25kKHtjb250ZW50OiBcIlRoaXMgY29tbWFuZCBjYW4gb25seSBiZSB1c2VkIGluIGd1aWxkc1wifSk7XG4gICAgXG4gICAgICAgICAgICBjb25zdCBjb21tYW5kID0gY29tbWFuZHMuZ2V0KGN0eC5kYXRhLm5hbWUpO1xuICAgIFxuICAgICAgICAgICAgaWYgKCFjb21tYW5kKSByZXR1cm47XG4gICAgXG4gICAgICAgICAgICBhd2FpdCBjb21tYW5kLmV4ZWN1dGUoY3R4KTtcbiAgICAgICAgfSBlbHNlIGlmIChjdHgudHlwZSA9PT0gSGFybW9ueS5JbnRlcmFjdGlvblR5cGUuTUVTU0FHRV9DT01QT05FTlQgfHwgY3R4LnR5cGUgPT09IEhhcm1vbnkuSW50ZXJhY3Rpb25UeXBlLk1PREFMX1NVQk1JVCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coY3R4LmRhdGEpO1xuICAgICAgICAgICAgaWYgKCFjdHguZGF0YSB8fCAhKFwiY3VzdG9tX2lkXCIgaW4gY3R4LmRhdGEpKSByZXR1cm47XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGZ1bmMgPSAoYXdhaXQgaW1wb3J0KGAuL2J1dHRvbnMvJHtjdHguZGF0YS5jdXN0b21faWR9LnRzYCkpLmRlZmF1bHQ7XG5cbiAgICAgICAgICAgIGF3YWl0IGZ1bmMoY3R4KTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICBhd2FpdCBjdHgucmVzcG9uZCh7XG4gICAgICAgICAgICBlbWJlZHM6IFtcbiAgICAgICAgICAgICAgICBuZXcgSGFybW9ueS5FbWJlZCgpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUaXRsZShcIkFuIGVycm9yIGhhcyBvY2N1cmVkXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjcmlwdGlvbihcImBgYFwiICsgZXJyICsgXCJgYGBcIilcbiAgICAgICAgICAgICAgICAgICAgLnNldENvbG9yKDI1NSwwLDApXG4gICAgICAgICAgICBdXG4gICAgICAgIH0pXG4gICAgfVxufSk7XG5cbi8vIEFub3RoZXIgd2Vic2VydmVyIHN0dWZmIHd0ZlxuYXBwLnVzZSgoY3R4KSA9PiB7XG4gICAgY3R4LnJlc3BvbnNlLmJvZHkgPSBcIldvcmtzXCJcbn0pO1xuXG5hcHAubGlzdGVuKHtwb3J0fSk7XG5jb25zb2xlLmxvZyhgTGlzdGVuaW5nIG9uIHBvcnQgJHtwb3J0fWApO1xuXG5jbGllbnQuY29ubmVjdCgpOyJdLCJuYW1lcyI6W10sIm1h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