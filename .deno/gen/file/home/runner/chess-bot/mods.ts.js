// Import some packages
import "https://deno.land/x/dotenv/load.ts";
import { Harmony, Oak } from "./deps.ts";
// Webserver stuff
const port = Number(Deno.env.get("PORT")) || 3000;
const app = new Oak.Application();
// Command stuff
const commands = new Map;
// We create a Harmony client
const client = new Harmony.Client({
    enableSlash: true,
    intents: [
        "GUILDS",
        "GUILD_MESSAGES",
        "GUILD_MEMBERS",
        "MESSAGE_CONTENT"
    ]
});
// Functions
async function setupCommands() {
    const commandObjects = [];
    for (const file of Deno.readDirSync("commands")){
        const commandObject = new (await import(`./commands/${file.name}`)).default;
        commands.set(commandObject.name, commandObject);
        commandObjects.push(commandObject.toObject());
    }
    client.interactions.commands.bulkEdit(commandObjects);
}
// Client listeners
client.on("ready", (_shards)=>{
    console.log(`Connected as ${client.user?.username}#${client.user?.discriminator}`);
    setupCommands();
});
client.on("interactionCreate", async (ctx)=>{
    try {
        if (ctx.type === Harmony.InteractionType.APPLICATION_COMMAND) {
            if (!ctx.data || !("name" in ctx.data)) return;
            if (!ctx.guild) return await ctx.respond({
                content: "This command can only be used in guilds"
            });
            const command = commands.get(ctx.data.name);
            if (!command) return;
            await command.execute(ctx);
        } else if (ctx.type === Harmony.InteractionType.MESSAGE_COMPONENT || ctx.type === Harmony.InteractionType.MODAL_SUBMIT) {
            console.log(ctx.data);
            if (!ctx.data || !("custom_id" in ctx.data)) return;
            const func = (await import(`./buttons/${ctx.data.custom_id}.ts`)).default;
            await func(ctx);
        }
    } catch (err) {
        console.log(err);
        await ctx.respond({
            embeds: [
                new Harmony.Embed().setTitle("An error has occured").setDescription("```" + err + "```").setColor(255, 0, 0)
            ]
        });
    }
});
// Another webserver stuff wtf
app.use((ctx)=>{
    ctx.response.body = "Works";
});
app.listen({
    port
});
console.log(`Listening on port ${port}`);
client.connect();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vaG9tZS9ydW5uZXIvY2hlc3MtYm90L21vZHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0IHNvbWUgcGFja2FnZXNcbmltcG9ydCBcImh0dHBzOi8vZGVuby5sYW5kL3gvZG90ZW52L2xvYWQudHNcIlxuaW1wb3J0IHsgSGFybW9ueSwgT2FrIH0gZnJvbSBcIi4vZGVwcy50c1wiO1xuaW1wb3J0IENDb21tYW5kIGZyb20gXCIuL2NsYXNzZXMvY3VzdG9tQ29tbWFuZC50c1wiO1xuXG4vLyBXZWJzZXJ2ZXIgc3R1ZmZcbmNvbnN0IHBvcnQgPSBOdW1iZXIoRGVuby5lbnYuZ2V0KFwiUE9SVFwiKSkgfHwgMzAwMDtcbmNvbnN0IGFwcCA9IG5ldyBPYWsuQXBwbGljYXRpb24oKTtcblxuLy8gQ29tbWFuZCBzdHVmZlxuXG5jb25zdCBjb21tYW5kczogTWFwPHN0cmluZyxDQ29tbWFuZD4gPSBuZXcgTWFwPHN0cmluZyxDQ29tbWFuZD47XG5cbi8vIFdlIGNyZWF0ZSBhIEhhcm1vbnkgY2xpZW50XG5jb25zdCBjbGllbnQgPSBuZXcgSGFybW9ueS5DbGllbnQoe1xuICAgIGVuYWJsZVNsYXNoOiB0cnVlLFxuICAgIGludGVudHM6IFtcbiAgICAgICAgXCJHVUlMRFNcIixcbiAgICAgICAgXCJHVUlMRF9NRVNTQUdFU1wiLFxuICAgICAgICBcIkdVSUxEX01FTUJFUlNcIixcbiAgICAgICAgXCJNRVNTQUdFX0NPTlRFTlRcIlxuICAgIF1cbn0pO1xuXG4vLyBGdW5jdGlvbnNcblxuYXN5bmMgZnVuY3Rpb24gc2V0dXBDb21tYW5kcygpIHtcbiAgICBjb25zdCBjb21tYW5kT2JqZWN0cyA9IFtdXG4gICAgZm9yIChjb25zdCBmaWxlIG9mIERlbm8ucmVhZERpclN5bmMoXCJjb21tYW5kc1wiKSkge1xuICAgICAgICBjb25zdCBjb21tYW5kT2JqZWN0OiBDQ29tbWFuZCA9IG5ldyAoYXdhaXQgaW1wb3J0KGAuL2NvbW1hbmRzLyR7ZmlsZS5uYW1lfWApKS5kZWZhdWx0O1xuICAgICAgICBcbiAgICAgICAgY29tbWFuZHMuc2V0KGNvbW1hbmRPYmplY3QubmFtZSxjb21tYW5kT2JqZWN0KTtcblxuICAgICAgICBjb21tYW5kT2JqZWN0cy5wdXNoKGNvbW1hbmRPYmplY3QudG9PYmplY3QoKSk7XG4gICAgfVxuICAgIGNsaWVudC5pbnRlcmFjdGlvbnMuY29tbWFuZHMuYnVsa0VkaXQoY29tbWFuZE9iamVjdHMpXG59XG5cbi8vIENsaWVudCBsaXN0ZW5lcnNcbmNsaWVudC5vbihcInJlYWR5XCIsKF9zaGFyZHM6IG51bWJlcikgPT4ge1xuICAgIGNvbnNvbGUubG9nKGBDb25uZWN0ZWQgYXMgJHtjbGllbnQudXNlcj8udXNlcm5hbWV9IyR7Y2xpZW50LnVzZXI/LmRpc2NyaW1pbmF0b3J9YCk7XG4gICAgc2V0dXBDb21tYW5kcygpO1xufSk7XG5cbmNsaWVudC5vbihcImludGVyYWN0aW9uQ3JlYXRlXCIsYXN5bmMgKGN0eDogSGFybW9ueS5JbnRlcmFjdGlvbikgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGlmIChjdHgudHlwZSA9PT0gSGFybW9ueS5JbnRlcmFjdGlvblR5cGUuQVBQTElDQVRJT05fQ09NTUFORCkge1xuICAgICAgICAgICAgaWYgKCFjdHguZGF0YSB8fCAhKFwibmFtZVwiIGluIGN0eC5kYXRhKSkgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKCFjdHguZ3VpbGQpIHJldHVybiBhd2FpdCBjdHgucmVzcG9uZCh7Y29udGVudDogXCJUaGlzIGNvbW1hbmQgY2FuIG9ubHkgYmUgdXNlZCBpbiBndWlsZHNcIn0pO1xuICAgIFxuICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IGNvbW1hbmRzLmdldChjdHguZGF0YS5uYW1lKTtcbiAgICBcbiAgICAgICAgICAgIGlmICghY29tbWFuZCkgcmV0dXJuO1xuICAgIFxuICAgICAgICAgICAgYXdhaXQgY29tbWFuZC5leGVjdXRlKGN0eCk7XG4gICAgICAgIH0gZWxzZSBpZiAoY3R4LnR5cGUgPT09IEhhcm1vbnkuSW50ZXJhY3Rpb25UeXBlLk1FU1NBR0VfQ09NUE9ORU5UIHx8IGN0eC50eXBlID09PSBIYXJtb255LkludGVyYWN0aW9uVHlwZS5NT0RBTF9TVUJNSVQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGN0eC5kYXRhKTtcbiAgICAgICAgICAgIGlmICghY3R4LmRhdGEgfHwgIShcImN1c3RvbV9pZFwiIGluIGN0eC5kYXRhKSkgcmV0dXJuO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBmdW5jID0gKGF3YWl0IGltcG9ydChgLi9idXR0b25zLyR7Y3R4LmRhdGEuY3VzdG9tX2lkfS50c2ApKS5kZWZhdWx0O1xuXG4gICAgICAgICAgICBhd2FpdCBmdW5jKGN0eCk7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgYXdhaXQgY3R4LnJlc3BvbmQoe1xuICAgICAgICAgICAgZW1iZWRzOiBbXG4gICAgICAgICAgICAgICAgbmV3IEhhcm1vbnkuRW1iZWQoKVxuICAgICAgICAgICAgICAgICAgICAuc2V0VGl0bGUoXCJBbiBlcnJvciBoYXMgb2NjdXJlZFwiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzY3JpcHRpb24oXCJgYGBcIiArIGVyciArIFwiYGBgXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRDb2xvcigyNTUsMCwwKVxuICAgICAgICAgICAgXVxuICAgICAgICB9KVxuICAgIH1cbn0pO1xuXG4vLyBBbm90aGVyIHdlYnNlcnZlciBzdHVmZiB3dGZcbmFwcC51c2UoKGN0eCkgPT4ge1xuICAgIGN0eC5yZXNwb25zZS5ib2R5ID0gXCJXb3Jrc1wiXG59KTtcblxuYXBwLmxpc3Rlbih7cG9ydH0pO1xuY29uc29sZS5sb2coYExpc3RlbmluZyBvbiBwb3J0ICR7cG9ydH1gKTtcblxuY2xpZW50LmNvbm5lY3QoKTsiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6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