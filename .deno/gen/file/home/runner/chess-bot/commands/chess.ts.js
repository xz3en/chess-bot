import { Harmony, Canvas } from "../deps.ts";
import CCommand from "../classes/customCommand.ts";
// Classes
class Square {
    piece;
    constructor(x, y, position, color){
        this.x = x;
        this.y = y;
        this.position = position;
        this.color = color;
    }
    x;
    y;
    position;
    color;
}
class Board {
    canvas;
    context;
    constructor(size){
        this.size = size;
        this.canvas = Canvas.createCanvas(size, size);
        this.context = this.canvas.getContext("2d");
    }
    size;
}
export class Game {
    board = new Map;
    canvas;
    constructor(){
        this.canvas = new Board(600);
    }
    updateSquare(position, piece) {
        const square = this.board.get(position);
        if (!square) return;
        square.piece = piece;
    }
    move(oldPosition, newPosition) {
        const square1 = this.board.get(oldPosition);
        const square2 = this.board.get(newPosition);
        if (!square1 || !square2) return false;
        if (!square1.piece) return false;
        if (square2.piece && square1.piece.color === square2.piece.color) return false;
        square2.piece = square1.piece;
        square1.piece = undefined;
        this.board.set(oldPosition, square1);
        this.board.set(newPosition, square2);
        return true;
    }
    async updateBoard() {
        for (const [_position, square] of this.board.entries()){
            if (!square.piece) continue;
            const imagePath = `assets/pieces/${square.piece.color}/${square.piece.type}.png`;
            try {
                const image = await Canvas.loadImage(imagePath);
                this.canvas.context.drawImage(image, square.x, square.y, this.board.size + 10, this.board.size + 10);
            } catch (err) {
                console.log(err);
            }
        }
    }
}
// Variables
const messageComponents = [
    {
        type: Harmony.MessageComponentType.ACTION_ROW,
        components: [
            {
                type: Harmony.MessageComponentType.BUTTON,
                style: Harmony.ButtonStyle.BLURPLE,
                label: "Make a move",
                customID: "makeMove"
            }
        ]
    }
];
const primaryColor = "#eeeed5"; // White
const secondaryColor = "#7c955b"; // Green
const fileLetters = "abcdefgh";
const games = new Map;
const subcommandFunctions = new Map;
subcommandFunctions.set("play", async (ctx)=>{
    if (!ctx.member || !ctx.data || !("options" in ctx.data)) return;
    if (!ctx.data.options[0]) return;
    console.log(ctx.data);
    const game = games.get(ctx.member.user.id);
    if (!game) {
        await createGame(ctx.member.user.id);
        const selfFunc = subcommandFunctions.get("play");
        if (selfFunc) {
            return selfFunc(ctx);
        }
    }
    if (!game) return;
    await game.updateBoard();
    ctx.respond({
        files: [
            new Harmony.MessageAttachment("board.png", new Blob([
                game.canvas.canvas.toBuffer()
            ]))
        ],
        embeds: [
            new Harmony.Embed().setTitle("Chess game").setImage("attachment://board.png")
        ],
        components: new Harmony.MessageComponents(...messageComponents)
    });
});
// Functions
async function createGame(id) {
    if (games.get(id)) return;
    const game = new Game();
    const squareSize = game.canvas.size / 8;
    for(let x = 0; x < 8; x++){
        const fileLetter = fileLetters.at(x);
        for(let y = 0; y < 8; y++){
            const squarePosition = `${fileLetter}${8 - y}`;
            game.canvas.context.fillStyle = (x + y) % 2 == 0 ? primaryColor : secondaryColor;
            const xOffset = x * squareSize;
            const yOffset = y * squareSize;
            game.canvas.context.fillRect(xOffset, yOffset, squareSize, squareSize);
            const square = new Square(xOffset, yOffset, squarePosition, (x + y) % 2 == 0 ? "white" : "black");
            game.board.set(squarePosition, square);
        }
    }
    // Create white pieces
    game.updateSquare("a1", {
        type: "rook",
        color: "white"
    });
    game.updateSquare("b1", {
        type: "knight",
        color: "white"
    });
    game.updateSquare("c1", {
        type: "bishop",
        color: "white"
    });
    game.updateSquare("d1", {
        type: "king",
        color: "white"
    });
    game.updateSquare("e1", {
        type: "queen",
        color: "white"
    });
    game.updateSquare("f1", {
        type: "bishop",
        color: "white"
    });
    game.updateSquare("g1", {
        type: "knight",
        color: "white"
    });
    game.updateSquare("h1", {
        type: "rook",
        color: "white"
    });
    // Create black pieces
    game.updateSquare("a8", {
        type: "rook",
        color: "black"
    });
    game.updateSquare("b8", {
        type: "knight",
        color: "black"
    });
    game.updateSquare("c8", {
        type: "bishop",
        color: "black"
    });
    game.updateSquare("d8", {
        type: "king",
        color: "black"
    });
    game.updateSquare("e8", {
        type: "queen",
        color: "black"
    });
    game.updateSquare("f8", {
        type: "bishop",
        color: "black"
    });
    game.updateSquare("g8", {
        type: "knight",
        color: "black"
    });
    game.updateSquare("h8", {
        type: "rook",
        color: "black"
    });
    for(let i = 1; i <= 8; i++){
        const file = fileLetters.at(i - 1);
        game.updateSquare(`${file}2`, {
            type: "pawn",
            color: "white"
        });
        game.updateSquare(`${file}7`, {
            type: "pawn",
            color: "black"
        });
    }
    await game.updateBoard();
    games.set(id, game);
}
export default class Chess extends CCommand {
    name = "chess";
    description = "Chess related commands";
    options = [
        {
            name: "play",
            description: "Play chess with someone",
            type: Harmony.ApplicationCommandOptionType.SUB_COMMAND,
            options: [
                {
                    type: Harmony.ApplicationCommandOptionType.USER,
                    name: "opponent",
                    description: "Who you want to play against",
                    required: true
                }
            ]
        }
    ];
    async execute(ctx) {
        if (!ctx.data || !("options" in ctx.data) || !ctx.data.options[0]) return;
        const func = subcommandFunctions.get(ctx.data.options[0].name);
        if (!func) return;
        await func(ctx);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbGU6Ly8vaG9tZS9ydW5uZXIvY2hlc3MtYm90L2NvbW1hbmRzL2NoZXNzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhhcm1vbnksIENhbnZhcyB9IGZyb20gXCIuLi9kZXBzLnRzXCI7XG5pbXBvcnQgQ0NvbW1hbmQgZnJvbSBcIi4uL2NsYXNzZXMvY3VzdG9tQ29tbWFuZC50c1wiO1xuXG4vLyBUeXBlc1xuXG50eXBlIFBpZWNlVHlwZSA9IFwicGF3blwiIHwgXCJyb29rXCIgfCBcImtuaWdodFwiIHwgXCJiaXNob3BcIiB8IFwia2luZ1wiIHwgXCJxdWVlblwiXG50eXBlIFBpZWNlQ29sb3IgPSBcIndoaXRlXCIgfCBcImJsYWNrXCJcblxuLy8gSW50ZXJmYWNlc1xuXG5pbnRlcmZhY2UgUGllY2Uge1xuICAgIHR5cGU6IFBpZWNlVHlwZSxcbiAgICBjb2xvcjogUGllY2VDb2xvclxufVxuXG4vLyBDbGFzc2VzXG5cbmNsYXNzIFNxdWFyZSB7XG4gICAgcGllY2U/OiBQaWVjZVxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgeDogbnVtYmVyLFxuICAgICAgICBwdWJsaWMgeTogbnVtYmVyLFxuICAgICAgICBwdWJsaWMgcG9zaXRpb246IHN0cmluZyxcbiAgICAgICAgcHVibGljIGNvbG9yOiBQaWVjZUNvbG9yXG4gICAgKSB7XG5cbiAgICB9XG59XG5cbmNsYXNzIEJvYXJkIHtcbiAgICBjYW52YXMhOiBDYW52YXMuRW11bGF0ZWRDYW52YXMyRDtcbiAgICBjb250ZXh0ITogQ2FudmFzLkNhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgc2l6ZTogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuY2FudmFzID0gQ2FudmFzLmNyZWF0ZUNhbnZhcyhzaXplLHNpemUpO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgR2FtZSB7XG4gICAgYm9hcmQ6IE1hcDxzdHJpbmcsU3F1YXJlPiA9IG5ldyBNYXA8c3RyaW5nLFNxdWFyZT47XG4gICAgY2FudmFzITogQm9hcmQ7XG4gICAgXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY2FudmFzID0gbmV3IEJvYXJkKDYwMCk7XG4gICAgfVxuXG4gICAgdXBkYXRlU3F1YXJlKHBvc2l0aW9uOiBzdHJpbmcscGllY2U/OiBQaWVjZSkge1xuICAgICAgICBjb25zdCBzcXVhcmUgPSB0aGlzLmJvYXJkLmdldChwb3NpdGlvbik7XG4gICAgICAgIGlmICghc3F1YXJlKSByZXR1cm47XG4gICAgICAgIHNxdWFyZS5waWVjZSA9IHBpZWNlO1xuICAgIH1cblxuICAgIG1vdmUob2xkUG9zaXRpb246IHN0cmluZyxuZXdQb3NpdGlvbjogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IHNxdWFyZTEgPSB0aGlzLmJvYXJkLmdldChvbGRQb3NpdGlvbik7XG4gICAgICAgIGNvbnN0IHNxdWFyZTIgPSB0aGlzLmJvYXJkLmdldChuZXdQb3NpdGlvbik7XG5cbiAgICAgICAgaWYgKCFzcXVhcmUxIHx8ICFzcXVhcmUyKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmICghc3F1YXJlMS5waWVjZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoc3F1YXJlMi5waWVjZSAmJiAoc3F1YXJlMS5waWVjZS5jb2xvciA9PT0gc3F1YXJlMi5waWVjZS5jb2xvcikpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBzcXVhcmUyLnBpZWNlID0gc3F1YXJlMS5waWVjZTtcbiAgICAgICAgc3F1YXJlMS5waWVjZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICB0aGlzLmJvYXJkLnNldChvbGRQb3NpdGlvbixzcXVhcmUxKTtcbiAgICAgICAgdGhpcy5ib2FyZC5zZXQobmV3UG9zaXRpb24sc3F1YXJlMik7XG5cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBhc3luYyB1cGRhdGVCb2FyZCgpIHtcbiAgICAgICAgZm9yIChjb25zdCBbX3Bvc2l0aW9uLHNxdWFyZV0gb2YgdGhpcy5ib2FyZC5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIGlmICghc3F1YXJlLnBpZWNlKSBjb250aW51ZTtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlUGF0aCA9IGBhc3NldHMvcGllY2VzLyR7c3F1YXJlLnBpZWNlLmNvbG9yfS8ke3NxdWFyZS5waWVjZS50eXBlfS5wbmdgO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbWFnZSA9IGF3YWl0IENhbnZhcy5sb2FkSW1hZ2UoaW1hZ2VQYXRoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5jb250ZXh0LmRyYXdJbWFnZShpbWFnZSxzcXVhcmUueCxzcXVhcmUueSx0aGlzLmJvYXJkLnNpemUgKyAxMCx0aGlzLmJvYXJkLnNpemUgKyAxMCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBWYXJpYWJsZXNcblxuY29uc3QgbWVzc2FnZUNvbXBvbmVudHM6IEhhcm1vbnkuTWVzc2FnZUNvbXBvbmVudERhdGFbXSA9IFtcbiAgICB7XG4gICAgICAgIHR5cGU6IEhhcm1vbnkuTWVzc2FnZUNvbXBvbmVudFR5cGUuQUNUSU9OX1JPVyxcbiAgICAgICAgY29tcG9uZW50czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IEhhcm1vbnkuTWVzc2FnZUNvbXBvbmVudFR5cGUuQlVUVE9OLFxuICAgICAgICAgICAgICAgIHN0eWxlOiBIYXJtb255LkJ1dHRvblN0eWxlLkJMVVJQTEUsXG4gICAgICAgICAgICAgICAgbGFiZWw6IFwiTWFrZSBhIG1vdmVcIixcbiAgICAgICAgICAgICAgICBjdXN0b21JRDogXCJtYWtlTW92ZVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9XG5dXG5cbmNvbnN0IHByaW1hcnlDb2xvciA9IFwiI2VlZWVkNVwiOyAvLyBXaGl0ZVxuY29uc3Qgc2Vjb25kYXJ5Q29sb3IgPSBcIiM3Yzk1NWJcIjsgLy8gR3JlZW5cbmNvbnN0IGZpbGVMZXR0ZXJzID0gXCJhYmNkZWZnaFwiO1xuXG5jb25zdCBnYW1lczogTWFwPHN0cmluZyxHYW1lPiA9IG5ldyBNYXA8c3RyaW5nLEdhbWU+O1xuY29uc3Qgc3ViY29tbWFuZEZ1bmN0aW9uczogTWFwPHN0cmluZywoY3R4OiBIYXJtb255LkludGVyYWN0aW9uKSA9PiBQcm9taXNlPHZvaWQ+PiA9IG5ldyBNYXA8c3RyaW5nLChjdHg6IEhhcm1vbnkuSW50ZXJhY3Rpb24pID0+IFByb21pc2U8dm9pZD4+O1xuXG5zdWJjb21tYW5kRnVuY3Rpb25zLnNldChcbiAgICBcInBsYXlcIixcbiAgICBhc3luYyAoY3R4OiBIYXJtb255LkludGVyYWN0aW9uKSA9PiB7XG4gICAgICAgIGlmICghY3R4Lm1lbWJlciB8fCAhY3R4LmRhdGEgfHwgIShcIm9wdGlvbnNcIiBpbiBjdHguZGF0YSkpIHJldHVybjtcbiAgICAgICAgaWYgKCFjdHguZGF0YS5vcHRpb25zWzBdKSByZXR1cm47XG4gICAgICAgIFxuICAgICAgICBjb25zb2xlLmxvZyhjdHguZGF0YSlcbiAgICAgICAgY29uc3QgZ2FtZSA9IGdhbWVzLmdldChjdHgubWVtYmVyLnVzZXIuaWQpO1xuICAgICAgICBpZiAoIWdhbWUpIHtcbiAgICAgICAgICAgIGF3YWl0IGNyZWF0ZUdhbWUoY3R4Lm1lbWJlci51c2VyLmlkKTtcbiAgICAgICAgICAgIGNvbnN0IHNlbGZGdW5jID0gc3ViY29tbWFuZEZ1bmN0aW9ucy5nZXQoXCJwbGF5XCIpO1xuICAgICAgICAgICAgaWYgKHNlbGZGdW5jKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGZGdW5jKGN0eCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFnYW1lKSByZXR1cm47XG4gICAgICAgIGF3YWl0IGdhbWUudXBkYXRlQm9hcmQoKTtcbiAgICAgICAgY3R4LnJlc3BvbmQoe1xuICAgICAgICAgICAgZmlsZXM6IFtcbiAgICAgICAgICAgICAgICBuZXcgSGFybW9ueS5NZXNzYWdlQXR0YWNobWVudChcbiAgICAgICAgICAgICAgICAgICAgXCJib2FyZC5wbmdcIixcbiAgICAgICAgICAgICAgICAgICAgbmV3IEJsb2IoW2dhbWUuY2FudmFzLmNhbnZhcy50b0J1ZmZlcigpXSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgZW1iZWRzOiBbXG4gICAgICAgICAgICAgICAgbmV3IEhhcm1vbnkuRW1iZWQoKVxuICAgICAgICAgICAgICAgICAgICAuc2V0VGl0bGUoXCJDaGVzcyBnYW1lXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRJbWFnZShcImF0dGFjaG1lbnQ6Ly9ib2FyZC5wbmdcIilcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBjb21wb25lbnRzOiBuZXcgSGFybW9ueS5NZXNzYWdlQ29tcG9uZW50cyguLi5tZXNzYWdlQ29tcG9uZW50cylcbiAgICAgICAgfSk7XG4gICAgfVxuKTtcblxuLy8gRnVuY3Rpb25zXG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUdhbWUoaWQ6IHN0cmluZykge1xuICAgIGlmIChnYW1lcy5nZXQoaWQpKSByZXR1cm47XG5cbiAgICBjb25zdCBnYW1lID0gbmV3IEdhbWUoKTtcbiAgICBjb25zdCBzcXVhcmVTaXplID0gZ2FtZS5jYW52YXMuc2l6ZSAvIDg7XG5cbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IDg7IHgrKykge1xuICAgICAgICBjb25zdCBmaWxlTGV0dGVyID0gZmlsZUxldHRlcnMuYXQoeCk7XG4gICAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgODsgeSsrKSB7XG4gICAgICAgICAgICBjb25zdCBzcXVhcmVQb3NpdGlvbiA9IGAke2ZpbGVMZXR0ZXJ9JHsoOCAtIHkpfWBcbiAgICAgICAgICAgIGdhbWUuY2FudmFzLmNvbnRleHQuZmlsbFN0eWxlID0gKCh4K3kpJTI9PTApID8gcHJpbWFyeUNvbG9yOnNlY29uZGFyeUNvbG9yO1xuICAgICAgICAgICAgY29uc3QgeE9mZnNldCA9IHggKiBzcXVhcmVTaXplO1xuICAgICAgICAgICAgY29uc3QgeU9mZnNldCA9IHkgKiBzcXVhcmVTaXplO1xuICAgICAgICAgICAgZ2FtZS5jYW52YXMuY29udGV4dC5maWxsUmVjdCh4T2Zmc2V0LHlPZmZzZXQsc3F1YXJlU2l6ZSxzcXVhcmVTaXplKTtcbiAgICAgICAgICAgIGNvbnN0IHNxdWFyZSA9IG5ldyBTcXVhcmUoXG4gICAgICAgICAgICAgICAgeE9mZnNldCxcbiAgICAgICAgICAgICAgICB5T2Zmc2V0LFxuICAgICAgICAgICAgICAgIHNxdWFyZVBvc2l0aW9uLFxuICAgICAgICAgICAgICAgICgoeCt5KSUyPT0wKSA/IFwid2hpdGVcIjpcImJsYWNrXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBnYW1lLmJvYXJkLnNldChzcXVhcmVQb3NpdGlvbixzcXVhcmUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIHdoaXRlIHBpZWNlc1xuICAgIGdhbWUudXBkYXRlU3F1YXJlKFxuICAgICAgICBcImExXCIsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6IFwicm9va1wiLFxuICAgICAgICAgICAgY29sb3I6IFwid2hpdGVcIlxuICAgICAgICB9XG4gICAgKTtcbiAgICBnYW1lLnVwZGF0ZVNxdWFyZShcbiAgICAgICAgXCJiMVwiLFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcImtuaWdodFwiLFxuICAgICAgICAgICAgY29sb3I6IFwid2hpdGVcIlxuICAgICAgICB9XG4gICAgKTtcbiAgICBnYW1lLnVwZGF0ZVNxdWFyZShcbiAgICAgICAgXCJjMVwiLFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcImJpc2hvcFwiLFxuICAgICAgICAgICAgY29sb3I6IFwid2hpdGVcIlxuICAgICAgICB9XG4gICAgKTtcbiAgICBnYW1lLnVwZGF0ZVNxdWFyZShcbiAgICAgICAgXCJkMVwiLFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcImtpbmdcIixcbiAgICAgICAgICAgIGNvbG9yOiBcIndoaXRlXCJcbiAgICAgICAgfVxuICAgICk7XG4gICAgZ2FtZS51cGRhdGVTcXVhcmUoXG4gICAgICAgIFwiZTFcIixcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogXCJxdWVlblwiLFxuICAgICAgICAgICAgY29sb3I6IFwid2hpdGVcIlxuICAgICAgICB9XG4gICAgKTtcbiAgICBnYW1lLnVwZGF0ZVNxdWFyZShcbiAgICAgICAgXCJmMVwiLFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcImJpc2hvcFwiLFxuICAgICAgICAgICAgY29sb3I6IFwid2hpdGVcIlxuICAgICAgICB9XG4gICAgKTtcbiAgICBnYW1lLnVwZGF0ZVNxdWFyZShcbiAgICAgICAgXCJnMVwiLFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcImtuaWdodFwiLFxuICAgICAgICAgICAgY29sb3I6IFwid2hpdGVcIlxuICAgICAgICB9XG4gICAgKTtcbiAgICBnYW1lLnVwZGF0ZVNxdWFyZShcbiAgICAgICAgXCJoMVwiLFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcInJvb2tcIixcbiAgICAgICAgICAgIGNvbG9yOiBcIndoaXRlXCJcbiAgICAgICAgfVxuICAgICk7XG4gICAgLy8gQ3JlYXRlIGJsYWNrIHBpZWNlc1xuICAgIGdhbWUudXBkYXRlU3F1YXJlKFxuICAgICAgICBcImE4XCIsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6IFwicm9va1wiLFxuICAgICAgICAgICAgY29sb3I6IFwiYmxhY2tcIlxuICAgICAgICB9XG4gICAgKTtcbiAgICBnYW1lLnVwZGF0ZVNxdWFyZShcbiAgICAgICAgXCJiOFwiLFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcImtuaWdodFwiLFxuICAgICAgICAgICAgY29sb3I6IFwiYmxhY2tcIlxuICAgICAgICB9XG4gICAgKTtcbiAgICBnYW1lLnVwZGF0ZVNxdWFyZShcbiAgICAgICAgXCJjOFwiLFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcImJpc2hvcFwiLFxuICAgICAgICAgICAgY29sb3I6IFwiYmxhY2tcIlxuICAgICAgICB9XG4gICAgKTtcbiAgICBnYW1lLnVwZGF0ZVNxdWFyZShcbiAgICAgICAgXCJkOFwiLFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcImtpbmdcIixcbiAgICAgICAgICAgIGNvbG9yOiBcImJsYWNrXCJcbiAgICAgICAgfVxuICAgICk7XG4gICAgZ2FtZS51cGRhdGVTcXVhcmUoXG4gICAgICAgIFwiZThcIixcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogXCJxdWVlblwiLFxuICAgICAgICAgICAgY29sb3I6IFwiYmxhY2tcIlxuICAgICAgICB9XG4gICAgKTtcbiAgICBnYW1lLnVwZGF0ZVNxdWFyZShcbiAgICAgICAgXCJmOFwiLFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcImJpc2hvcFwiLFxuICAgICAgICAgICAgY29sb3I6IFwiYmxhY2tcIlxuICAgICAgICB9XG4gICAgKTtcbiAgICBnYW1lLnVwZGF0ZVNxdWFyZShcbiAgICAgICAgXCJnOFwiLFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcImtuaWdodFwiLFxuICAgICAgICAgICAgY29sb3I6IFwiYmxhY2tcIlxuICAgICAgICB9XG4gICAgKTtcbiAgICBnYW1lLnVwZGF0ZVNxdWFyZShcbiAgICAgICAgXCJoOFwiLFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcInJvb2tcIixcbiAgICAgICAgICAgIGNvbG9yOiBcImJsYWNrXCJcbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBmb3IgKGxldCBpPTE7aSA8PSA4O2krKykge1xuICAgICAgICBjb25zdCBmaWxlID0gZmlsZUxldHRlcnMuYXQoaSAtIDEpO1xuICAgICAgICBnYW1lLnVwZGF0ZVNxdWFyZShcbiAgICAgICAgICAgIGAke2ZpbGV9MmAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJwYXduXCIsXG4gICAgICAgICAgICAgICAgY29sb3I6IFwid2hpdGVcIlxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICBnYW1lLnVwZGF0ZVNxdWFyZShcbiAgICAgICAgICAgIGAke2ZpbGV9N2AsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJwYXduXCIsXG4gICAgICAgICAgICAgICAgY29sb3I6IFwiYmxhY2tcIlxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGF3YWl0IGdhbWUudXBkYXRlQm9hcmQoKTtcblxuICAgIGdhbWVzLnNldChpZCxnYW1lKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hlc3MgZXh0ZW5kcyBDQ29tbWFuZCB7XG4gICAgbmFtZSA9IFwiY2hlc3NcIjtcbiAgICBkZXNjcmlwdGlvbj86IHN0cmluZyB8IHVuZGVmaW5lZCA9IFwiQ2hlc3MgcmVsYXRlZCBjb21tYW5kc1wiO1xuICAgIG9wdGlvbnM6IEhhcm1vbnkuU2xhc2hDb21tYW5kT3B0aW9uW10gPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IFwicGxheVwiLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiUGxheSBjaGVzcyB3aXRoIHNvbWVvbmVcIixcbiAgICAgICAgICAgIHR5cGU6IEhhcm1vbnkuQXBwbGljYXRpb25Db21tYW5kT3B0aW9uVHlwZS5TVUJfQ09NTUFORCxcbiAgICAgICAgICAgIG9wdGlvbnM6IFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEhhcm1vbnkuQXBwbGljYXRpb25Db21tYW5kT3B0aW9uVHlwZS5VU0VSLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm9wcG9uZW50XCIsXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIldobyB5b3Ugd2FudCB0byBwbGF5IGFnYWluc3RcIixcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICBdXG4gICAgYXN5bmMgZXhlY3V0ZShjdHg6IEhhcm1vbnkuSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgaWYgKCFjdHguZGF0YSB8fCAhKFwib3B0aW9uc1wiIGluIGN0eC5kYXRhKSB8fCAhY3R4LmRhdGEub3B0aW9uc1swXSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGZ1bmMgPSBzdWJjb21tYW5kRnVuY3Rpb25zLmdldChjdHguZGF0YS5vcHRpb25zWzBdLm5hbWUpO1xuXG4gICAgICAgIGlmICghZnVuYykgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgYXdhaXQgZnVuYyhjdHgpO1xuICAgIH1cbn0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FBUyxPQUFPLEVBQUUsTUFBTSxRQUFRLGFBQWE7QUFDN0MsT0FBTyxjQUFjLDhCQUE4QjtBQWNuRCxVQUFVO0FBRVYsTUFBTTtJQUNGLE1BQWE7SUFDYixZQUNXLEdBQ0EsR0FDQSxVQUNBLE1BQ1Q7aUJBSlM7aUJBQ0E7d0JBQ0E7cUJBQ0E7SUFHWDtJQU5XO0lBQ0E7SUFDQTtJQUNBO0FBSWY7QUFFQSxNQUFNO0lBQ0YsT0FBaUM7SUFDakMsUUFBMEM7SUFDMUMsWUFBbUIsS0FBYztvQkFBZDtRQUNmLElBQUksQ0FBQyxNQUFNLEdBQUcsT0FBTyxZQUFZLENBQUMsTUFBSztRQUN2QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO0lBQzFDO0lBSG1CO0FBSXZC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