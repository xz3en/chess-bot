import { TEMPLATE } from '../types/endpoint.ts';
import { Base } from './base.ts';
import { Guild } from './guild.ts';
import { User } from './user.ts';
export class Template extends Base {
    /** The template code (unique ID) */ code;
    /** The template name */ name;
    /** The description for the template */ description;
    /** Number of times this template has been used */ usageCount;
    /** The ID of the user who created the template */ creatorID;
    /** The user who created the template */ creator;
    /** When this template was created (in ms) */ createdAt;
    /** When this template was last synced to the source guild (in ms) */ updatedAt;
    /** The ID of the guild this template is based on */ sourceGuildID;
    /** The guild snapshot this template contains */ serializedSourceGuild;
    /** Whether the template has unsynced changes */ isDirty;
    constructor(client, data){
        super(client, data);
        this.code = data.code;
        this.name = data.name;
        this.description = data.description;
        this.usageCount = data.usage_count;
        this.creatorID = data.creator_id;
        this.creator = new User(client, data.creator);
        this.createdAt = Date.parse(data.created_at);
        this.updatedAt = Date.parse(data.updated_at);
        this.sourceGuildID = data.source_guild_id;
        this.serializedSourceGuild = new Guild(client, data.serialized_source_guild);
        this.isDirty = Boolean(data.is_dirty);
    }
    /** Modifies the template's metadata. Requires the MANAGE_GUILD permission. Returns the template object on success. */ async edit(data) {
        const res = await this.client.rest.patch(TEMPLATE(this.code), data);
        return new Template(this.client, res);
    }
    /** Deletes the template. Requires the MANAGE_GUILD permission. Returns the deleted template object on success. */ async delete() {
        const res = await this.client.rest.delete(TEMPLATE(this.code));
        return new Template(this.client, res);
    }
    /** Syncs the template to the guild's current state. Requires the MANAGE_GUILD permission. Returns the template object on success. */ async sync() {
        const res = await this.client.rest.put(TEMPLATE(this.code));
        return new Template(this.client, res);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvaGFybW9ueUB2Mi45LjAvc3JjL3N0cnVjdHVyZXMvdGVtcGxhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDbGllbnQgfSBmcm9tICcuLi9jbGllbnQvbW9kLnRzJ1xuaW1wb3J0IHsgVEVNUExBVEUgfSBmcm9tICcuLi90eXBlcy9lbmRwb2ludC50cydcbmltcG9ydCB0eXBlIHsgVGVtcGxhdGVQYXlsb2FkIH0gZnJvbSAnLi4vdHlwZXMvdGVtcGxhdGUudHMnXG5pbXBvcnQgeyBCYXNlIH0gZnJvbSAnLi9iYXNlLnRzJ1xuaW1wb3J0IHsgR3VpbGQgfSBmcm9tICcuL2d1aWxkLnRzJ1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4vdXNlci50cydcblxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlIGV4dGVuZHMgQmFzZSB7XG4gIC8qKiBUaGUgdGVtcGxhdGUgY29kZSAodW5pcXVlIElEKSAqL1xuICBjb2RlOiBzdHJpbmdcbiAgLyoqIFRoZSB0ZW1wbGF0ZSBuYW1lICovXG4gIG5hbWU6IHN0cmluZ1xuICAvKiogVGhlIGRlc2NyaXB0aW9uIGZvciB0aGUgdGVtcGxhdGUgKi9cbiAgZGVzY3JpcHRpb246IHN0cmluZyB8IG51bGxcbiAgLyoqIE51bWJlciBvZiB0aW1lcyB0aGlzIHRlbXBsYXRlIGhhcyBiZWVuIHVzZWQgKi9cbiAgdXNhZ2VDb3VudDogbnVtYmVyXG4gIC8qKiBUaGUgSUQgb2YgdGhlIHVzZXIgd2hvIGNyZWF0ZWQgdGhlIHRlbXBsYXRlICovXG4gIGNyZWF0b3JJRDogc3RyaW5nXG4gIC8qKiBUaGUgdXNlciB3aG8gY3JlYXRlZCB0aGUgdGVtcGxhdGUgKi9cbiAgY3JlYXRvcjogVXNlclxuICAvKiogV2hlbiB0aGlzIHRlbXBsYXRlIHdhcyBjcmVhdGVkIChpbiBtcykgKi9cbiAgY3JlYXRlZEF0OiBudW1iZXJcbiAgLyoqIFdoZW4gdGhpcyB0ZW1wbGF0ZSB3YXMgbGFzdCBzeW5jZWQgdG8gdGhlIHNvdXJjZSBndWlsZCAoaW4gbXMpICovXG4gIHVwZGF0ZWRBdDogbnVtYmVyXG4gIC8qKiBUaGUgSUQgb2YgdGhlIGd1aWxkIHRoaXMgdGVtcGxhdGUgaXMgYmFzZWQgb24gKi9cbiAgc291cmNlR3VpbGRJRDogc3RyaW5nXG4gIC8qKiBUaGUgZ3VpbGQgc25hcHNob3QgdGhpcyB0ZW1wbGF0ZSBjb250YWlucyAqL1xuICBzZXJpYWxpemVkU291cmNlR3VpbGQ6IEd1aWxkXG4gIC8qKiBXaGV0aGVyIHRoZSB0ZW1wbGF0ZSBoYXMgdW5zeW5jZWQgY2hhbmdlcyAqL1xuICBpc0RpcnR5OiBib29sZWFuIHwgbnVsbFxuXG4gIGNvbnN0cnVjdG9yKGNsaWVudDogQ2xpZW50LCBkYXRhOiBUZW1wbGF0ZVBheWxvYWQpIHtcbiAgICBzdXBlcihjbGllbnQsIGRhdGEpXG4gICAgdGhpcy5jb2RlID0gZGF0YS5jb2RlXG4gICAgdGhpcy5uYW1lID0gZGF0YS5uYW1lXG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRhdGEuZGVzY3JpcHRpb25cbiAgICB0aGlzLnVzYWdlQ291bnQgPSBkYXRhLnVzYWdlX2NvdW50XG4gICAgdGhpcy5jcmVhdG9ySUQgPSBkYXRhLmNyZWF0b3JfaWRcbiAgICB0aGlzLmNyZWF0b3IgPSBuZXcgVXNlcihjbGllbnQsIGRhdGEuY3JlYXRvcilcbiAgICB0aGlzLmNyZWF0ZWRBdCA9IERhdGUucGFyc2UoZGF0YS5jcmVhdGVkX2F0KVxuICAgIHRoaXMudXBkYXRlZEF0ID0gRGF0ZS5wYXJzZShkYXRhLnVwZGF0ZWRfYXQpXG4gICAgdGhpcy5zb3VyY2VHdWlsZElEID0gZGF0YS5zb3VyY2VfZ3VpbGRfaWRcbiAgICB0aGlzLnNlcmlhbGl6ZWRTb3VyY2VHdWlsZCA9IG5ldyBHdWlsZChjbGllbnQsIGRhdGEuc2VyaWFsaXplZF9zb3VyY2VfZ3VpbGQpXG4gICAgdGhpcy5pc0RpcnR5ID0gQm9vbGVhbihkYXRhLmlzX2RpcnR5KVxuICB9XG5cbiAgLyoqIE1vZGlmaWVzIHRoZSB0ZW1wbGF0ZSdzIG1ldGFkYXRhLiBSZXF1aXJlcyB0aGUgTUFOQUdFX0dVSUxEIHBlcm1pc3Npb24uIFJldHVybnMgdGhlIHRlbXBsYXRlIG9iamVjdCBvbiBzdWNjZXNzLiAqL1xuICBhc3luYyBlZGl0KGRhdGE6IE1vZGlmeUd1aWxkVGVtcGxhdGVQYXJhbXMpOiBQcm9taXNlPFRlbXBsYXRlPiB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5jbGllbnQucmVzdC5wYXRjaChURU1QTEFURSh0aGlzLmNvZGUpLCBkYXRhKVxuICAgIHJldHVybiBuZXcgVGVtcGxhdGUodGhpcy5jbGllbnQsIHJlcylcbiAgfVxuXG4gIC8qKiBEZWxldGVzIHRoZSB0ZW1wbGF0ZS4gUmVxdWlyZXMgdGhlIE1BTkFHRV9HVUlMRCBwZXJtaXNzaW9uLiBSZXR1cm5zIHRoZSBkZWxldGVkIHRlbXBsYXRlIG9iamVjdCBvbiBzdWNjZXNzLiAqL1xuICBhc3luYyBkZWxldGUoKTogUHJvbWlzZTxUZW1wbGF0ZT4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMuY2xpZW50LnJlc3QuZGVsZXRlKFRFTVBMQVRFKHRoaXMuY29kZSkpXG4gICAgcmV0dXJuIG5ldyBUZW1wbGF0ZSh0aGlzLmNsaWVudCwgcmVzKVxuICB9XG5cbiAgLyoqIFN5bmNzIHRoZSB0ZW1wbGF0ZSB0byB0aGUgZ3VpbGQncyBjdXJyZW50IHN0YXRlLiBSZXF1aXJlcyB0aGUgTUFOQUdFX0dVSUxEIHBlcm1pc3Npb24uIFJldHVybnMgdGhlIHRlbXBsYXRlIG9iamVjdCBvbiBzdWNjZXNzLiAqL1xuICBhc3luYyBzeW5jKCk6IFByb21pc2U8VGVtcGxhdGU+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmNsaWVudC5yZXN0LnB1dChURU1QTEFURSh0aGlzLmNvZGUpKVxuICAgIHJldHVybiBuZXcgVGVtcGxhdGUodGhpcy5jbGllbnQsIHJlcylcbiAgfVxufVxuXG4vKiogaHR0cHM6Ly9kaXNjb3JkLmNvbS9kZXZlbG9wZXJzL2RvY3MvcmVzb3VyY2VzL3RlbXBsYXRlI21vZGlmeS1ndWlsZC10ZW1wbGF0ZS1qc29uLXBhcmFtcyAqL1xuZXhwb3J0IGludGVyZmFjZSBNb2RpZnlHdWlsZFRlbXBsYXRlUGFyYW1zIHtcbiAgbmFtZT86IHN0cmluZ1xuICBkZXNjcmlwdGlvbj86IHN0cmluZyB8IG51bGxcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxTQUFTLFFBQVEsUUFBUSx1QkFBc0I7QUFFL0MsU0FBUyxJQUFJLFFBQVEsWUFBVztBQUNoQyxTQUFTLEtBQUssUUFBUSxhQUFZO0FBQ2xDLFNBQVMsSUFBSSxRQUFRLFlBQVc7QUFFaEMsT0FBTyxNQUFNLGlCQUFpQjtJQUM1QixrQ0FBa0MsR0FDbEMsS0FBWTtJQUNaLHNCQUFzQixHQUN0QixLQUFZO0lBQ1oscUNBQXFDLEdBQ3JDLFlBQTBCO0lBQzFCLGdEQUFnRCxHQUNoRCxXQUFrQjtJQUNsQixnREFBZ0QsR0FDaEQsVUFBaUI7SUFDakIsc0NBQXNDLEdBQ3RDLFFBQWE7SUFDYiwyQ0FBMkMsR0FDM0MsVUFBaUI7SUFDakIsbUVBQW1FLEdBQ25FLFVBQWlCO0lBQ2pCLGtEQUFrRCxHQUNsRCxjQUFxQjtJQUNyQiw4Q0FBOEMsR0FDOUMsc0JBQTRCO0lBQzVCLDhDQUE4QyxHQUM5QyxRQUF1QjtJQUV2QixZQUFZLE1BQWMsRUFBRSxJQUFxQixDQUFFO1FBQ2pELEtBQUssQ0FBQyxRQUFRO1FBQ2QsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLElBQUk7UUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLElBQUk7UUFDckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLFdBQVc7UUFDbkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLFdBQVc7UUFDbEMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLFVBQVU7UUFDaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLEtBQUssUUFBUSxLQUFLLE9BQU87UUFDNUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLEtBQUssQ0FBQyxLQUFLLFVBQVU7UUFDM0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLEtBQUssQ0FBQyxLQUFLLFVBQVU7UUFDM0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLGVBQWU7UUFDekMsSUFBSSxDQUFDLHFCQUFxQixHQUFHLElBQUksTUFBTSxRQUFRLEtBQUssdUJBQXVCO1FBQzNFLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxLQUFLLFFBQVE7SUFDdEM7SUFFQSxvSEFBb0gsR0FDcEgsTUFBTSxLQUFLLElBQStCLEVBQXFCO1FBQzdELE1BQU0sTUFBTSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLEdBQUc7UUFDOUQsT0FBTyxJQUFJLFNBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRTtJQUNuQztJQUVBLGdIQUFnSCxHQUNoSCxNQUFNLFNBQTRCO1FBQ2hDLE1BQU0sTUFBTSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJO1FBQzVELE9BQU8sSUFBSSxTQUFTLElBQUksQ0FBQyxNQUFNLEVBQUU7SUFDbkM7SUFFQSxtSUFBbUksR0FDbkksTUFBTSxPQUEwQjtRQUM5QixNQUFNLE1BQU0sTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxJQUFJLENBQUMsSUFBSTtRQUN6RCxPQUFPLElBQUksU0FBUyxJQUFJLENBQUMsTUFBTSxFQUFFO0lBQ25DO0FBQ0YsQ0FBQyJ9