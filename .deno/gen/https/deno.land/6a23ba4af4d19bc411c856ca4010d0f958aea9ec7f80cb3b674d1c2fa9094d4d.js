import { ChannelTypes } from '../types/channel.ts';
import { DMChannel } from '../structures/dmChannel.ts';
import { GroupDMChannel } from '../structures/groupChannel.ts';
import { CategoryChannel } from '../structures/guildCategoryChannel.ts';
import { GuildTextChannel } from '../structures/guildTextChannel.ts';
import { NewsChannel } from '../structures/guildNewsChannel.ts';
import { VoiceChannel } from '../structures/guildVoiceChannel.ts';
import { StoreChannel } from '../structures/guildStoreChannel.ts';
import { StageVoiceChannel } from '../structures/guildStageVoiceChannel.ts';
import { ThreadChannel } from '../structures/threadChannel.ts';
import { GuildForumChannel } from '../structures/guildForumChannel.ts';
/** Get appropriate Channel structure by its type */ const getChannelByType = (client, data, guild)=>{
    switch(data.type){
        case ChannelTypes.GUILD_CATEGORY:
            if (guild === undefined) throw new Error('No Guild was provided to construct Channel');
            return new CategoryChannel(client, data, guild);
        case ChannelTypes.GUILD_NEWS:
            if (guild === undefined) throw new Error('No Guild was provided to construct Channel');
            return new NewsChannel(client, data, guild);
        case ChannelTypes.GUILD_TEXT:
            if (guild === undefined) throw new Error('No Guild was provided to construct Channel');
            return new GuildTextChannel(client, data, guild);
        case ChannelTypes.GUILD_STORE:
            if (guild === undefined) throw new Error('No Guild was provided to construct Channel');
            return new StoreChannel(client, data, guild);
        case ChannelTypes.GUILD_VOICE:
            if (guild === undefined) throw new Error('No Guild was provided to construct Channel');
            return new VoiceChannel(client, data, guild);
        case ChannelTypes.GUILD_STAGE_VOICE:
            if (guild === undefined) throw new Error('No Guild was provided to construct Channel');
            return new StageVoiceChannel(client, data, guild);
        case ChannelTypes.DM:
            return new DMChannel(client, data);
        case ChannelTypes.GROUP_DM:
            return new GroupDMChannel(client, data);
        case ChannelTypes.NEWS_THREAD:
        case ChannelTypes.PRIVATE_THREAD:
        case ChannelTypes.PUBLIC_THREAD:
            if (guild === undefined) throw new Error('No Guild was provided to construct Channel');
            return new ThreadChannel(client, data, guild);
        case ChannelTypes.GUILD_FORUM:
            if (guild === undefined) throw new Error('No Guild was provided to construct Channel');
            return new GuildForumChannel(client, data, guild);
    }
};
export default getChannelByType;
//# sourceMappingURL=data:application/json;base64,