import { ButtonStyle, MessageComponentType, TextInputStyle } from '../types/messageComponents.ts';
import { toCamelCase } from '../utils/snakeCase.ts';
export function transformComponent(d) {
    return d.map((data)=>{
        const e = {
            ...data
        };
        if (e.customID !== undefined) {
            e.custom_id = e.customID;
            delete e.customID;
        }
        if (e.minValues !== undefined) {
            e.min_values = e.minValues;
            delete e.minValues;
        }
        if (e.maxValues !== undefined) {
            e.max_values = e.maxValues;
            delete e.maxValues;
        }
        if (e.minLength !== undefined) {
            e.min_length = e.minLength;
            delete e.minLength;
        }
        if (e.maxLength !== undefined) {
            e.max_length = e.maxLength;
            delete e.maxLength;
        }
        if (e.components !== undefined) {
            e.components = transformComponent(e.components);
        }
        if (typeof e.type === 'string') {
            e.type = MessageComponentType[e.type.toUpperCase()];
        }
        if (e.type === MessageComponentType.BUTTON && typeof e.style === 'string') {
            if (!(e.style in ButtonStyle)) throw new Error(`No Button style named '${e.style}' found!`);
            e.style = ButtonStyle[e.style.toUpperCase()];
        }
        if (e.type === MessageComponentType.TEXT_INPUT && typeof e.style === 'string') {
            if (!(e.style in TextInputStyle)) throw new Error(`No Text Input style named '${e.style}' found!`);
            e.style = TextInputStyle[e.style.toUpperCase()];
        }
        return e;
    });
}
export function transformComponentPayload(d) {
    return d.map(toCamelCase);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvaGFybW9ueUB2Mi45LjAvc3JjL3V0aWxzL2NvbXBvbmVudHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQnV0dG9uU3R5bGUsXG4gIE1lc3NhZ2VDb21wb25lbnREYXRhLFxuICBNZXNzYWdlQ29tcG9uZW50UGF5bG9hZCxcbiAgTWVzc2FnZUNvbXBvbmVudFR5cGUsXG4gIFRleHRJbnB1dFN0eWxlXG59IGZyb20gJy4uL3R5cGVzL21lc3NhZ2VDb21wb25lbnRzLnRzJ1xuaW1wb3J0IHsgdG9DYW1lbENhc2UgfSBmcm9tICcuLi91dGlscy9zbmFrZUNhc2UudHMnXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1Db21wb25lbnQoXG4gIGQ6IE1lc3NhZ2VDb21wb25lbnREYXRhW11cbik6IE1lc3NhZ2VDb21wb25lbnRQYXlsb2FkW10ge1xuICByZXR1cm4gZC5tYXAoKGRhdGE6IHVua25vd24pID0+IHtcbiAgICBjb25zdCBlID0geyAuLi4oZGF0YSBhcyBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPikgfVxuICAgIGlmIChlLmN1c3RvbUlEICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGUuY3VzdG9tX2lkID0gZS5jdXN0b21JRFxuICAgICAgZGVsZXRlIGUuY3VzdG9tSURcbiAgICB9XG4gICAgaWYgKGUubWluVmFsdWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGUubWluX3ZhbHVlcyA9IGUubWluVmFsdWVzXG4gICAgICBkZWxldGUgZS5taW5WYWx1ZXNcbiAgICB9XG4gICAgaWYgKGUubWF4VmFsdWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGUubWF4X3ZhbHVlcyA9IGUubWF4VmFsdWVzXG4gICAgICBkZWxldGUgZS5tYXhWYWx1ZXNcbiAgICB9XG4gICAgaWYgKGUubWluTGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGUubWluX2xlbmd0aCA9IGUubWluTGVuZ3RoXG4gICAgICBkZWxldGUgZS5taW5MZW5ndGhcbiAgICB9XG4gICAgaWYgKGUubWF4TGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGUubWF4X2xlbmd0aCA9IGUubWF4TGVuZ3RoXG4gICAgICBkZWxldGUgZS5tYXhMZW5ndGhcbiAgICB9XG4gICAgaWYgKGUuY29tcG9uZW50cyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBlLmNvbXBvbmVudHMgPSB0cmFuc2Zvcm1Db21wb25lbnQoZS5jb21wb25lbnRzIGFzIE1lc3NhZ2VDb21wb25lbnREYXRhW10pXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZS50eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgZS50eXBlID1cbiAgICAgICAgTWVzc2FnZUNvbXBvbmVudFR5cGVbXG4gICAgICAgICAgZS50eXBlLnRvVXBwZXJDYXNlKCkgYXMga2V5b2YgdHlwZW9mIE1lc3NhZ2VDb21wb25lbnRUeXBlXG4gICAgICAgIF1cbiAgICB9XG4gICAgaWYgKGUudHlwZSA9PT0gTWVzc2FnZUNvbXBvbmVudFR5cGUuQlVUVE9OICYmIHR5cGVvZiBlLnN0eWxlID09PSAnc3RyaW5nJykge1xuICAgICAgaWYgKCEoZS5zdHlsZSBpbiBCdXR0b25TdHlsZSkpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gQnV0dG9uIHN0eWxlIG5hbWVkICcke2Uuc3R5bGV9JyBmb3VuZCFgKVxuICAgICAgZS5zdHlsZSA9IEJ1dHRvblN0eWxlW2Uuc3R5bGUudG9VcHBlckNhc2UoKSBhcyBrZXlvZiB0eXBlb2YgQnV0dG9uU3R5bGVdXG4gICAgfVxuICAgIGlmIChcbiAgICAgIGUudHlwZSA9PT0gTWVzc2FnZUNvbXBvbmVudFR5cGUuVEVYVF9JTlBVVCAmJlxuICAgICAgdHlwZW9mIGUuc3R5bGUgPT09ICdzdHJpbmcnXG4gICAgKSB7XG4gICAgICBpZiAoIShlLnN0eWxlIGluIFRleHRJbnB1dFN0eWxlKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBUZXh0IElucHV0IHN0eWxlIG5hbWVkICcke2Uuc3R5bGV9JyBmb3VuZCFgKVxuICAgICAgZS5zdHlsZSA9XG4gICAgICAgIFRleHRJbnB1dFN0eWxlW2Uuc3R5bGUudG9VcHBlckNhc2UoKSBhcyBrZXlvZiB0eXBlb2YgVGV4dElucHV0U3R5bGVdXG4gICAgfVxuICAgIHJldHVybiBlXG4gIH0pIGFzIHVua25vd24gYXMgTWVzc2FnZUNvbXBvbmVudFBheWxvYWRbXVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtQ29tcG9uZW50UGF5bG9hZChcbiAgZDogTWVzc2FnZUNvbXBvbmVudFBheWxvYWRbXVxuKTogTWVzc2FnZUNvbXBvbmVudERhdGFbXSB7XG4gIHJldHVybiBkLm1hcCh0b0NhbWVsQ2FzZSlcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUNFLFdBQVcsRUFHWCxvQkFBb0IsRUFDcEIsY0FBYyxRQUNULGdDQUErQjtBQUN0QyxTQUFTLFdBQVcsUUFBUSx3QkFBdUI7QUFFbkQsT0FBTyxTQUFTLG1CQUNkLENBQXlCLEVBQ0U7SUFDM0IsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQWtCO1FBQzlCLE1BQU0sSUFBSTtZQUFFLEdBQUksSUFBSTtRQUE2QjtRQUNqRCxJQUFJLEVBQUUsUUFBUSxLQUFLLFdBQVc7WUFDNUIsRUFBRSxTQUFTLEdBQUcsRUFBRSxRQUFRO1lBQ3hCLE9BQU8sRUFBRSxRQUFRO1FBQ25CLENBQUM7UUFDRCxJQUFJLEVBQUUsU0FBUyxLQUFLLFdBQVc7WUFDN0IsRUFBRSxVQUFVLEdBQUcsRUFBRSxTQUFTO1lBQzFCLE9BQU8sRUFBRSxTQUFTO1FBQ3BCLENBQUM7UUFDRCxJQUFJLEVBQUUsU0FBUyxLQUFLLFdBQVc7WUFDN0IsRUFBRSxVQUFVLEdBQUcsRUFBRSxTQUFTO1lBQzFCLE9BQU8sRUFBRSxTQUFTO1FBQ3BCLENBQUM7UUFDRCxJQUFJLEVBQUUsU0FBUyxLQUFLLFdBQVc7WUFDN0IsRUFBRSxVQUFVLEdBQUcsRUFBRSxTQUFTO1lBQzFCLE9BQU8sRUFBRSxTQUFTO1FBQ3BCLENBQUM7UUFDRCxJQUFJLEVBQUUsU0FBUyxLQUFLLFdBQVc7WUFDN0IsRUFBRSxVQUFVLEdBQUcsRUFBRSxTQUFTO1lBQzFCLE9BQU8sRUFBRSxTQUFTO1FBQ3BCLENBQUM7UUFDRCxJQUFJLEVBQUUsVUFBVSxLQUFLLFdBQVc7WUFDOUIsRUFBRSxVQUFVLEdBQUcsbUJBQW1CLEVBQUUsVUFBVTtRQUNoRCxDQUFDO1FBQ0QsSUFBSSxPQUFPLEVBQUUsSUFBSSxLQUFLLFVBQVU7WUFDOUIsRUFBRSxJQUFJLEdBQ0osb0JBQW9CLENBQ2xCLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FDbkI7UUFDTCxDQUFDO1FBQ0QsSUFBSSxFQUFFLElBQUksS0FBSyxxQkFBcUIsTUFBTSxJQUFJLE9BQU8sRUFBRSxLQUFLLEtBQUssVUFBVTtZQUN6RSxJQUFJLENBQUMsQ0FBQyxFQUFFLEtBQUssSUFBSSxXQUFXLEdBQzFCLE1BQU0sSUFBSSxNQUFNLENBQUMsdUJBQXVCLEVBQUUsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUM7WUFDOUQsRUFBRSxLQUFLLEdBQUcsV0FBVyxDQUFDLEVBQUUsS0FBSyxDQUFDLFdBQVcsR0FBK0I7UUFDMUUsQ0FBQztRQUNELElBQ0UsRUFBRSxJQUFJLEtBQUsscUJBQXFCLFVBQVUsSUFDMUMsT0FBTyxFQUFFLEtBQUssS0FBSyxVQUNuQjtZQUNBLElBQUksQ0FBQyxDQUFDLEVBQUUsS0FBSyxJQUFJLGNBQWMsR0FDN0IsTUFBTSxJQUFJLE1BQU0sQ0FBQywyQkFBMkIsRUFBRSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBQztZQUNsRSxFQUFFLEtBQUssR0FDTCxjQUFjLENBQUMsRUFBRSxLQUFLLENBQUMsV0FBVyxHQUFrQztRQUN4RSxDQUFDO1FBQ0QsT0FBTztJQUNUO0FBQ0YsQ0FBQztBQUVELE9BQU8sU0FBUywwQkFDZCxDQUE0QixFQUNKO0lBQ3hCLE9BQU8sRUFBRSxHQUFHLENBQUM7QUFDZixDQUFDIn0=