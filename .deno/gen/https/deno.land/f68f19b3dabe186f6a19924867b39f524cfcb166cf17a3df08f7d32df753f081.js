import { ChannelThreadsManager } from '../managers/channelThreads.ts';
import { CHANNEL } from '../types/endpoint.ts';
import { GuildChannel } from './channel.ts';
export class GuildThreadAvailableChannel extends GuildChannel {
    topic;
    slowmode;
    defaultThreadSlowmode;
    defaultAutoArchiveDuration;
    threads;
    constructor(client, data, guild){
        super(client, data, guild);
        this.readFromData(data);
        this.threads = new ChannelThreadsManager(this.client, this.guild.threads, this);
    }
    readFromData(data) {
        super.readFromData(data);
        this.defaultThreadSlowmode = data.default_thread_rate_limit_per_user ?? this.defaultThreadSlowmode;
        this.defaultAutoArchiveDuration = data.default_auto_archive_duration ?? this.defaultAutoArchiveDuration;
        this.topic = data.topic ?? this.topic;
    }
    /** Edit the Guild Text Channel */ async edit(options) {
        const body = {
            name: options?.name,
            position: options?.position,
            permission_overwrites: options?.permissionOverwrites,
            parent_id: options?.parentID,
            nsfw: options?.nsfw,
            topic: options?.topic,
            rate_limit_per_user: options?.slowmode,
            default_auto_archive_duration: options?.defaultAutoArchiveDuration,
            default_thread_rate_limit_per_user: options?.defaultThreadSlowmode
        };
        const resp = await this.client.rest.patch(CHANNEL(this.id), body);
        return new GuildThreadAvailableChannel(this.client, resp, this.guild);
    }
    /** Edit topic of the channel */ async setTopic(topic) {
        return await this.edit({
            topic
        });
    }
    /** Edit Slowmode of the channel */ async setSlowmode(slowmode) {
        return await this.edit({
            slowmode: slowmode ?? null
        });
    }
    /** Edit Default Slowmode of the threads in the channel */ async setDefaultThreadSlowmode(slowmode) {
        return await this.edit({
            defaultThreadSlowmode: slowmode ?? null
        });
    }
    /** Edit Default Auto Archive Duration of threads */ async setDefaultAutoArchiveDuration(slowmode) {
        return await this.edit({
            defaultAutoArchiveDuration: slowmode ?? null
        });
    }
    async startThread(options, message) {
        const payload = message !== undefined ? await this.client.rest.endpoints.startPublicThreadFromMessage(this.id, typeof message === 'string' ? message : message.id, {
            name: options.name,
            auto_archive_duration: options.autoArchiveDuration,
            rate_limit_per_user: options.slowmode
        }) : await this.client.rest.endpoints.startThreadWithoutMessage(this.id, {
            name: options.name,
            auto_archive_duration: options.autoArchiveDuration,
            rate_limit_per_user: options.slowmode,
            invitable: options.invitable,
            type: options.type
        });
        await this.client.channels.set(payload.id, payload);
        return await this.client.channels.get(payload.id);
    }
    async startPrivateThread(options) {
        const payload = await this.client.rest.endpoints.startPrivateThread(this.id, {
            name: options.name,
            auto_archive_duration: options.autoArchiveDuration
        });
        await this.client.channels.set(payload.id, payload);
        return await this.client.channels.get(payload.id);
    }
    async fetchArchivedThreads(type = 'public', params = {}) {
        const data = type === 'public' ? await this.client.rest.endpoints.getPublicArchivedThreads(this.id, params) : await this.client.rest.endpoints.getPrivateArchivedThreads(this.id, params);
        const threads = [];
        const members = [];
        for (const d of data.threads){
            await this.threads.set(d.id, d);
            threads.push(await this.threads.get(d.id));
        }
        for (const d1 of data.members){
            const thread = threads.find((e)=>e.id === d1.id) ?? await this.threads.get(d1.id);
            if (thread !== undefined) {
                await thread.members.set(d1.user_id, d1);
                members.push(await thread.members.get(d1.user_id));
            }
        }
        return {
            threads,
            members,
            hasMore: data.has_more
        };
    }
    async fetchPublicArchivedThreads(params = {}) {
        return await this.fetchArchivedThreads('public', params);
    }
    async fetchPrivateArchivedThreads(params = {}) {
        return await this.fetchArchivedThreads('private', params);
    }
    async fetchJoinedPrivateArchivedThreads(params = {}) {
        const data = await this.client.rest.endpoints.getJoinedPrivateArchivedThreads(this.id, params);
        const threads = [];
        const members = [];
        for (const d of data.threads){
            await this.threads.set(d.id, d);
            threads.push(await this.threads.get(d.id));
        }
        for (const d1 of data.members){
            const thread = threads.find((e)=>e.id === d1.id) ?? await this.threads.get(d1.id);
            if (thread !== undefined) {
                await thread.members.set(d1.user_id, d1);
                members.push(await thread.members.get(d1.user_id));
            }
        }
        return {
            threads,
            members,
            hasMore: data.has_more
        };
    }
}
//# sourceMappingURL=data:application/json;base64,