import { channelCreate } from './channelCreate.ts';
import { channelDelete } from './channelDelete.ts';
import { channelUpdate } from './channelUpdate.ts';
import { channelPinsUpdate } from './channelPinsUpdate.ts';
import { guildCreate } from './guildCreate.ts';
import { guildDelete } from './guildDelete.ts';
import { guildUpdate } from './guildUpdate.ts';
import { guildBanAdd } from './guildBanAdd.ts';
import { ready } from './ready.ts';
import { guildBanRemove } from './guildBanRemove.ts';
import { messageCreate } from './messageCreate.ts';
import { resume } from './resume.ts';
import { reconnect } from './reconnect.ts';
import { messageDelete } from './messageDelete.ts';
import { messageUpdate } from './messageUpdate.ts';
import { guildEmojiUpdate } from './guildEmojiUpdate.ts';
import { guildMemberAdd } from './guildMemberAdd.ts';
import { guildMemberRemove } from './guildMemberRemove.ts';
import { guildMemberUpdate } from './guildMemberUpdate.ts';
import { guildRoleCreate } from './guildRoleCreate.ts';
import { guildRoleDelete } from './guildRoleDelete.ts';
import { guildRoleUpdate } from './guildRoleUpdate.ts';
import { guildIntegrationsUpdate } from './guildIntegrationsUpdate.ts';
import { webhooksUpdate } from './webhooksUpdate.ts';
import { messageDeleteBulk } from './messageDeleteBulk.ts';
import { userUpdate } from './userUpdate.ts';
import { typingStart } from './typingStart.ts';
import { voiceServerUpdate } from './voiceServerUpdate.ts';
import { voiceStateUpdate } from './voiceStateUpdate.ts';
import { messageReactionAdd } from './messageReactionAdd.ts';
import { messageReactionRemove } from './messageReactionRemove.ts';
import { messageReactionRemoveAll } from './messageReactionRemoveAll.ts';
import { messageReactionRemoveEmoji } from './messageReactionRemoveEmoji.ts';
import { guildMembersChunk } from './guildMembersChunk.ts';
import { presenceUpdate } from './presenceUpdate.ts';
import { inviteCreate } from './inviteCreate.ts';
import { inviteDelete } from './inviteDelete.ts';
import { interactionCreate } from './interactionCreate.ts';
import { threadCreate } from './threadCreate.ts';
import { threadDelete } from './threadDelete.ts';
import { threadUpdate } from './threadUpdate.ts';
import { threadMembersUpdate } from './threadMembersUpdate.ts';
import { threadMemberUpdate } from './threadMemberUpdate.ts';
import { threadListSync } from './threadListSync.ts';
import { guildStickersUpdate } from './guildStickersUpdate.ts';
import { guildAuditLogEntryCreate } from './guildAuditLogEntryCreate.ts';
export const gatewayHandlers = {
    READY: ready,
    RECONNECT: reconnect,
    RESUMED: resume,
    CHANNEL_CREATE: channelCreate,
    CHANNEL_DELETE: channelDelete,
    CHANNEL_UPDATE: channelUpdate,
    CHANNEL_PINS_UPDATE: channelPinsUpdate,
    GUILD_CREATE: guildCreate,
    GUILD_DELETE: guildDelete,
    GUILD_UPDATE: guildUpdate,
    GUILD_BAN_ADD: guildBanAdd,
    GUILD_BAN_REMOVE: guildBanRemove,
    GUILD_EMOJIS_UPDATE: guildEmojiUpdate,
    GUILD_INTEGRATIONS_UPDATE: guildIntegrationsUpdate,
    GUILD_MEMBER_ADD: guildMemberAdd,
    GUILD_MEMBER_REMOVE: guildMemberRemove,
    GUILD_MEMBER_UPDATE: guildMemberUpdate,
    GUILD_MEMBERS_CHUNK: guildMembersChunk,
    GUILD_ROLE_CREATE: guildRoleCreate,
    GUILD_ROLE_UPDATE: guildRoleUpdate,
    GUILD_ROLE_DELETE: guildRoleDelete,
    INVITE_CREATE: inviteCreate,
    INVITE_DELETE: inviteDelete,
    MESSAGE_CREATE: messageCreate,
    MESSAGE_UPDATE: messageUpdate,
    MESSAGE_DELETE: messageDelete,
    MESSAGE_DELETE_BULK: messageDeleteBulk,
    MESSAGE_REACTION_ADD: messageReactionAdd,
    MESSAGE_REACTION_REMOVE: messageReactionRemove,
    MESSAGE_REACTION_REMOVE_ALL: messageReactionRemoveAll,
    MESSAGE_REACTION_REMOVE_EMOJI: messageReactionRemoveEmoji,
    PRESENCE_UPDATE: presenceUpdate,
    TYPING_START: typingStart,
    USER_UPDATE: userUpdate,
    VOICE_STATE_UPDATE: voiceStateUpdate,
    VOICE_SERVER_UPDATE: voiceServerUpdate,
    WEBHOOKS_UPDATE: webhooksUpdate,
    INTERACTION_CREATE: interactionCreate,
    THREAD_CREATE: threadCreate,
    THREAD_DELETE: threadDelete,
    THREAD_UPDATE: threadUpdate,
    THREAD_LIST_SYNC: threadListSync,
    THREAD_MEMBERS_UPDATE: threadMembersUpdate,
    THREAD_MEMBER_UPDATE: threadMemberUpdate,
    GUILD_STICKERS_UPDATE: guildStickersUpdate,
    GUILD_AUDIT_LOG_ENTRY_CREATE: guildAuditLogEntryCreate
};
//# sourceMappingURL=data:application/json;base64,