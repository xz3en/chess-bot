import { BaseChildManager } from './baseChild.ts';
import { GUILD_MEMBER_ROLE } from '../types/endpoint.ts';
export class MemberRolesManager extends BaseChildManager {
    member;
    constructor(client, parent, member){
        super(client, parent);
        this.member = member;
    }
    async _resolveMemberPayload() {
        const cached = await this.member.guild.members._get(this.member.id);
        if (cached !== undefined) return cached;
        else {
            const fetched = await this.client.rest.endpoints.getGuildMember(this.member.guild.id, this.member.id);
            await this.member.guild.members.set(fetched.user.id, fetched);
            return fetched;
        }
    }
    async get(id) {
        const res = await this.parent.get(id);
        const mem = await this._resolveMemberPayload();
        if (res !== undefined && (mem.roles.includes(res.id) === true || res.id === this.member.guild.id)) return res;
        else return undefined;
    }
    async size() {
        const payload = await this.member.guild.members._get(this.member.id);
        if (payload === undefined) return 0;
        return payload.roles.length;
    }
    async array() {
        const arr = await this.parent.array();
        const mem = await this._resolveMemberPayload();
        return arr.filter((c)=>mem.roles.includes(c.id) || c.id === this.member.guild.id);
    }
    async flush() {
        const arr = await this.array();
        for (const elem of arr){
            this.parent._delete(elem.id);
        }
        return true;
    }
    async add(role, reason) {
        await this.client.rest.put(GUILD_MEMBER_ROLE(this.member.guild.id, this.member.id, typeof role === 'string' ? role : role.id), {
            reason
        }, undefined, undefined, undefined, {
            reason
        });
        return true;
    }
    async remove(role, reason) {
        await this.client.rest.delete(GUILD_MEMBER_ROLE(this.member.guild.id, this.member.id, typeof role === 'string' ? role : role.id), undefined, undefined, undefined, undefined, {
            reason
        });
        return true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvaGFybW9ueUB2Mi45LjAvc3JjL21hbmFnZXJzL21lbWJlclJvbGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ2xpZW50IH0gZnJvbSAnLi4vY2xpZW50L21vZC50cydcbmltcG9ydCB7IEJhc2VDaGlsZE1hbmFnZXIgfSBmcm9tICcuL2Jhc2VDaGlsZC50cydcbmltcG9ydCB0eXBlIHsgUm9sZVBheWxvYWQgfSBmcm9tICcuLi90eXBlcy9yb2xlLnRzJ1xuaW1wb3J0IHsgUm9sZSB9IGZyb20gJy4uL3N0cnVjdHVyZXMvcm9sZS50cydcbmltcG9ydCB0eXBlIHsgTWVtYmVyIH0gZnJvbSAnLi4vc3RydWN0dXJlcy9tZW1iZXIudHMnXG5pbXBvcnQgdHlwZSB7IFJvbGVzTWFuYWdlciB9IGZyb20gJy4vcm9sZXMudHMnXG5pbXBvcnQgdHlwZSB7IE1lbWJlclBheWxvYWQgfSBmcm9tICcuLi90eXBlcy9ndWlsZC50cydcbmltcG9ydCB7IEdVSUxEX01FTUJFUl9ST0xFIH0gZnJvbSAnLi4vdHlwZXMvZW5kcG9pbnQudHMnXG5cbmV4cG9ydCBjbGFzcyBNZW1iZXJSb2xlc01hbmFnZXIgZXh0ZW5kcyBCYXNlQ2hpbGRNYW5hZ2VyPFJvbGVQYXlsb2FkLCBSb2xlPiB7XG4gIG1lbWJlcjogTWVtYmVyXG5cbiAgY29uc3RydWN0b3IoY2xpZW50OiBDbGllbnQsIHBhcmVudDogUm9sZXNNYW5hZ2VyLCBtZW1iZXI6IE1lbWJlcikge1xuICAgIHN1cGVyKGNsaWVudCwgcGFyZW50KVxuICAgIHRoaXMubWVtYmVyID0gbWVtYmVyXG4gIH1cblxuICBwcml2YXRlIGFzeW5jIF9yZXNvbHZlTWVtYmVyUGF5bG9hZCgpOiBQcm9taXNlPE1lbWJlclBheWxvYWQ+IHtcbiAgICBjb25zdCBjYWNoZWQgPSBhd2FpdCB0aGlzLm1lbWJlci5ndWlsZC5tZW1iZXJzLl9nZXQodGhpcy5tZW1iZXIuaWQpXG4gICAgaWYgKGNhY2hlZCAhPT0gdW5kZWZpbmVkKSByZXR1cm4gY2FjaGVkXG4gICAgZWxzZSB7XG4gICAgICBjb25zdCBmZXRjaGVkID0gYXdhaXQgdGhpcy5jbGllbnQucmVzdC5lbmRwb2ludHMuZ2V0R3VpbGRNZW1iZXIoXG4gICAgICAgIHRoaXMubWVtYmVyLmd1aWxkLmlkLFxuICAgICAgICB0aGlzLm1lbWJlci5pZFxuICAgICAgKVxuICAgICAgYXdhaXQgdGhpcy5tZW1iZXIuZ3VpbGQubWVtYmVycy5zZXQoZmV0Y2hlZC51c2VyLmlkLCBmZXRjaGVkKVxuICAgICAgcmV0dXJuIGZldGNoZWRcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXQoaWQ6IHN0cmluZyk6IFByb21pc2U8Um9sZSB8IHVuZGVmaW5lZD4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucGFyZW50LmdldChpZClcbiAgICBjb25zdCBtZW0gPSBhd2FpdCB0aGlzLl9yZXNvbHZlTWVtYmVyUGF5bG9hZCgpXG4gICAgaWYgKFxuICAgICAgcmVzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIChtZW0ucm9sZXMuaW5jbHVkZXMocmVzLmlkKSA9PT0gdHJ1ZSB8fCByZXMuaWQgPT09IHRoaXMubWVtYmVyLmd1aWxkLmlkKVxuICAgIClcbiAgICAgIHJldHVybiByZXNcbiAgICBlbHNlIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIGFzeW5jIHNpemUoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBjb25zdCBwYXlsb2FkID0gYXdhaXQgdGhpcy5tZW1iZXIuZ3VpbGQubWVtYmVycy5fZ2V0KHRoaXMubWVtYmVyLmlkKVxuICAgIGlmIChwYXlsb2FkID09PSB1bmRlZmluZWQpIHJldHVybiAwXG4gICAgcmV0dXJuIHBheWxvYWQucm9sZXMubGVuZ3RoXG4gIH1cblxuICBhc3luYyBhcnJheSgpOiBQcm9taXNlPFJvbGVbXT4ge1xuICAgIGNvbnN0IGFyciA9IGF3YWl0IHRoaXMucGFyZW50LmFycmF5KClcbiAgICBjb25zdCBtZW0gPSBhd2FpdCB0aGlzLl9yZXNvbHZlTWVtYmVyUGF5bG9hZCgpXG4gICAgcmV0dXJuIGFyci5maWx0ZXIoXG4gICAgICAoYykgPT5cbiAgICAgICAgKG1lbS5yb2xlcy5pbmNsdWRlcyhjLmlkKSBhcyBib29sZWFuKSB8fCBjLmlkID09PSB0aGlzLm1lbWJlci5ndWlsZC5pZFxuICAgIClcbiAgfVxuXG4gIGFzeW5jIGZsdXNoKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGFyciA9IGF3YWl0IHRoaXMuYXJyYXkoKVxuICAgIGZvciAoY29uc3QgZWxlbSBvZiBhcnIpIHtcbiAgICAgIHRoaXMucGFyZW50Ll9kZWxldGUoZWxlbS5pZClcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGFzeW5jIGFkZChyb2xlOiBzdHJpbmcgfCBSb2xlLCByZWFzb24/OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBhd2FpdCB0aGlzLmNsaWVudC5yZXN0LnB1dChcbiAgICAgIEdVSUxEX01FTUJFUl9ST0xFKFxuICAgICAgICB0aGlzLm1lbWJlci5ndWlsZC5pZCxcbiAgICAgICAgdGhpcy5tZW1iZXIuaWQsXG4gICAgICAgIHR5cGVvZiByb2xlID09PSAnc3RyaW5nJyA/IHJvbGUgOiByb2xlLmlkXG4gICAgICApLFxuICAgICAgeyByZWFzb24gfSxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIHsgcmVhc29uIH1cbiAgICApXG5cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgYXN5bmMgcmVtb3ZlKHJvbGU6IHN0cmluZyB8IFJvbGUsIHJlYXNvbj86IHN0cmluZyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGF3YWl0IHRoaXMuY2xpZW50LnJlc3QuZGVsZXRlKFxuICAgICAgR1VJTERfTUVNQkVSX1JPTEUoXG4gICAgICAgIHRoaXMubWVtYmVyLmd1aWxkLmlkLFxuICAgICAgICB0aGlzLm1lbWJlci5pZCxcbiAgICAgICAgdHlwZW9mIHJvbGUgPT09ICdzdHJpbmcnID8gcm9sZSA6IHJvbGUuaWRcbiAgICAgICksXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB1bmRlZmluZWQsXG4gICAgICB7IHJlYXNvbiB9XG4gICAgKVxuXG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLFNBQVMsZ0JBQWdCLFFBQVEsaUJBQWdCO0FBTWpELFNBQVMsaUJBQWlCLFFBQVEsdUJBQXNCO0FBRXhELE9BQU8sTUFBTSwyQkFBMkI7SUFDdEMsT0FBYztJQUVkLFlBQVksTUFBYyxFQUFFLE1BQW9CLEVBQUUsTUFBYyxDQUFFO1FBQ2hFLEtBQUssQ0FBQyxRQUFRO1FBQ2QsSUFBSSxDQUFDLE1BQU0sR0FBRztJQUNoQjtJQUVBLE1BQWMsd0JBQWdEO1FBQzVELE1BQU0sU0FBUyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ2xFLElBQUksV0FBVyxXQUFXLE9BQU87YUFDNUI7WUFDSCxNQUFNLFVBQVUsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUM3RCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUVoQixNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ3JELE9BQU87UUFDVCxDQUFDO0lBQ0g7SUFFQSxNQUFNLElBQUksRUFBVSxFQUE2QjtRQUMvQyxNQUFNLE1BQU0sTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUNsQyxNQUFNLE1BQU0sTUFBTSxJQUFJLENBQUMscUJBQXFCO1FBQzVDLElBQ0UsUUFBUSxhQUNSLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxNQUFNLElBQUksSUFBSSxJQUFJLEVBQUUsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBRXZFLE9BQU87YUFDSixPQUFPO0lBQ2Q7SUFFQSxNQUFNLE9BQXdCO1FBQzVCLE1BQU0sVUFBVSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ25FLElBQUksWUFBWSxXQUFXLE9BQU87UUFDbEMsT0FBTyxRQUFRLEtBQUssQ0FBQyxNQUFNO0lBQzdCO0lBRUEsTUFBTSxRQUF5QjtRQUM3QixNQUFNLE1BQU0sTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUs7UUFDbkMsTUFBTSxNQUFNLE1BQU0sSUFBSSxDQUFDLHFCQUFxQjtRQUM1QyxPQUFPLElBQUksTUFBTSxDQUNmLENBQUMsSUFDQyxBQUFDLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsS0FBaUIsRUFBRSxFQUFFLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTtJQUU1RTtJQUVBLE1BQU0sUUFBMEI7UUFDOUIsTUFBTSxNQUFNLE1BQU0sSUFBSSxDQUFDLEtBQUs7UUFDNUIsS0FBSyxNQUFNLFFBQVEsSUFBSztZQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7UUFDN0I7UUFDQSxPQUFPLElBQUk7SUFDYjtJQUVBLE1BQU0sSUFBSSxJQUFtQixFQUFFLE1BQWUsRUFBb0I7UUFDaEUsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQ3hCLGtCQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFDcEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQ2QsT0FBTyxTQUFTLFdBQVcsT0FBTyxLQUFLLEVBQUUsR0FFM0M7WUFBRTtRQUFPLEdBQ1QsV0FDQSxXQUNBLFdBQ0E7WUFBRTtRQUFPO1FBR1gsT0FBTyxJQUFJO0lBQ2I7SUFFQSxNQUFNLE9BQU8sSUFBbUIsRUFBRSxNQUFlLEVBQW9CO1FBQ25FLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUMzQixrQkFDRSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQ3BCLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUNkLE9BQU8sU0FBUyxXQUFXLE9BQU8sS0FBSyxFQUFFLEdBRTNDLFdBQ0EsV0FDQSxXQUNBLFdBQ0E7WUFBRTtRQUFPO1FBR1gsT0FBTyxJQUFJO0lBQ2I7QUFDRixDQUFDIn0=