import { Invite } from '../structures/invite.ts';
import { CHANNEL_INVITES, GUILD_INVITES, INVITE } from '../types/endpoint.ts';
import { BaseManager } from './base.ts';
export var InviteTargetUserType;
(function(InviteTargetUserType) {
    InviteTargetUserType[InviteTargetUserType["STREAM"] = 1] = "STREAM";
})(InviteTargetUserType || (InviteTargetUserType = {}));
export class InviteManager extends BaseManager {
    guild;
    constructor(client, guild){
        super(client, `invites:${guild.id}`, Invite);
        this.guild = guild;
    }
    async get(key) {
        const raw = await this._get(key);
        if (raw === undefined) return;
        return new Invite(this.client, raw);
    }
    /** Fetch an Invite */ async fetch(id, withCounts = true) {
        return await new Promise((resolve, reject)=>{
            this.client.rest.get(`${INVITE(id)}${withCounts ? '?with_counts=true' : ''}`).then(async (data)=>{
                this.set(id, data);
                const newInvite = await this.get(data.code);
                resolve(newInvite);
            }).catch((e)=>reject(e));
        });
    }
    /** Fetch all Invites of a Guild or a specific Channel */ async fetchAll(channel) {
        const rawInvites = await this.client.rest.get(channel === undefined ? GUILD_INVITES(this.guild.id) : CHANNEL_INVITES(typeof channel === 'string' ? channel : channel.id));
        const res = [];
        for (const raw of rawInvites){
            await this.set(raw.code, raw);
            res.push(new Invite(this.client, raw));
        }
        return res;
    }
    /** Delete an Invite */ async delete(invite) {
        await this.client.rest.delete(INVITE(typeof invite === 'string' ? invite : invite.code));
        return true;
    }
    /** Create an Invite */ async create(channel, options) {
        const raw = await this.client.rest.post(CHANNEL_INVITES(typeof channel === 'string' ? channel : channel.id), {
            max_age: options?.maxAge,
            max_uses: options?.maxUses,
            temporary: options?.temporary,
            unique: options?.unique,
            target_user: options?.targetUser === undefined ? undefined : typeof options.targetUser === 'string' ? options.targetUser : options.targetUser.id,
            target_user_type: options?.targetUserType
        });
        return new Invite(this.client, raw);
    }
    async fromPayload(invites) {
        for (const invite of invites){
            await this.set(invite.code, invite);
        }
        return true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvaGFybW9ueUB2Mi45LjAvc3JjL21hbmFnZXJzL2ludml0ZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBHdWlsZFRleHRDaGFubmVsLCBVc2VyIH0gZnJvbSAnLi4vLi4vbW9kLnRzJ1xuaW1wb3J0IHR5cGUgeyBDbGllbnQgfSBmcm9tICcuLi9jbGllbnQvbW9kLnRzJ1xuaW1wb3J0IHR5cGUgeyBHdWlsZCB9IGZyb20gJy4uL3N0cnVjdHVyZXMvZ3VpbGQudHMnXG5pbXBvcnQgeyBJbnZpdGUgfSBmcm9tICcuLi9zdHJ1Y3R1cmVzL2ludml0ZS50cydcbmltcG9ydCB7IENIQU5ORUxfSU5WSVRFUywgR1VJTERfSU5WSVRFUywgSU5WSVRFIH0gZnJvbSAnLi4vdHlwZXMvZW5kcG9pbnQudHMnXG5pbXBvcnQgdHlwZSB7IEludml0ZVBheWxvYWQgfSBmcm9tICcuLi90eXBlcy9pbnZpdGUudHMnXG5pbXBvcnQgeyBCYXNlTWFuYWdlciB9IGZyb20gJy4vYmFzZS50cydcblxuZXhwb3J0IGVudW0gSW52aXRlVGFyZ2V0VXNlclR5cGUge1xuICBTVFJFQU0gPSAxXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3JlYXRlSW52aXRlT3B0aW9ucyB7XG4gIG1heEFnZT86IG51bWJlclxuICBtYXhVc2VzPzogbnVtYmVyXG4gIHRlbXBvcmFyeT86IGJvb2xlYW5cbiAgdW5pcXVlPzogYm9vbGVhblxuICB0YXJnZXRVc2VyPzogc3RyaW5nIHwgVXNlclxuICB0YXJnZXRVc2VyVHlwZT86IEludml0ZVRhcmdldFVzZXJUeXBlXG59XG5cbmV4cG9ydCBjbGFzcyBJbnZpdGVNYW5hZ2VyIGV4dGVuZHMgQmFzZU1hbmFnZXI8SW52aXRlUGF5bG9hZCwgSW52aXRlPiB7XG4gIGd1aWxkOiBHdWlsZFxuXG4gIGNvbnN0cnVjdG9yKGNsaWVudDogQ2xpZW50LCBndWlsZDogR3VpbGQpIHtcbiAgICBzdXBlcihjbGllbnQsIGBpbnZpdGVzOiR7Z3VpbGQuaWR9YCwgSW52aXRlKVxuICAgIHRoaXMuZ3VpbGQgPSBndWlsZFxuICB9XG5cbiAgYXN5bmMgZ2V0KGtleTogc3RyaW5nKTogUHJvbWlzZTxJbnZpdGUgfCB1bmRlZmluZWQ+IHtcbiAgICBjb25zdCByYXcgPSBhd2FpdCB0aGlzLl9nZXQoa2V5KVxuICAgIGlmIChyYXcgPT09IHVuZGVmaW5lZCkgcmV0dXJuXG4gICAgcmV0dXJuIG5ldyBJbnZpdGUodGhpcy5jbGllbnQsIHJhdylcbiAgfVxuXG4gIC8qKiBGZXRjaCBhbiBJbnZpdGUgKi9cbiAgYXN5bmMgZmV0Y2goaWQ6IHN0cmluZywgd2l0aENvdW50czogYm9vbGVhbiA9IHRydWUpOiBQcm9taXNlPEludml0ZT4ge1xuICAgIHJldHVybiBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB0aGlzLmNsaWVudC5yZXN0XG4gICAgICAgIC5nZXQoYCR7SU5WSVRFKGlkKX0ke3dpdGhDb3VudHMgPyAnP3dpdGhfY291bnRzPXRydWUnIDogJyd9YClcbiAgICAgICAgLnRoZW4oYXN5bmMgKGRhdGEpID0+IHtcbiAgICAgICAgICB0aGlzLnNldChpZCwgZGF0YSBhcyBJbnZpdGVQYXlsb2FkKVxuICAgICAgICAgIGNvbnN0IG5ld0ludml0ZSA9IGF3YWl0IHRoaXMuZ2V0KGRhdGEuY29kZSlcbiAgICAgICAgICByZXNvbHZlKG5ld0ludml0ZSBhcyBJbnZpdGUpXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZSkgPT4gcmVqZWN0KGUpKVxuICAgIH0pXG4gIH1cblxuICAvKiogRmV0Y2ggYWxsIEludml0ZXMgb2YgYSBHdWlsZCBvciBhIHNwZWNpZmljIENoYW5uZWwgKi9cbiAgYXN5bmMgZmV0Y2hBbGwoY2hhbm5lbD86IHN0cmluZyB8IEd1aWxkVGV4dENoYW5uZWwpOiBQcm9taXNlPEludml0ZVtdPiB7XG4gICAgY29uc3QgcmF3SW52aXRlcyA9IChhd2FpdCB0aGlzLmNsaWVudC5yZXN0LmdldChcbiAgICAgIGNoYW5uZWwgPT09IHVuZGVmaW5lZFxuICAgICAgICA/IEdVSUxEX0lOVklURVModGhpcy5ndWlsZC5pZClcbiAgICAgICAgOiBDSEFOTkVMX0lOVklURVModHlwZW9mIGNoYW5uZWwgPT09ICdzdHJpbmcnID8gY2hhbm5lbCA6IGNoYW5uZWwuaWQpXG4gICAgKSkgYXMgSW52aXRlUGF5bG9hZFtdXG5cbiAgICBjb25zdCByZXM6IEludml0ZVtdID0gW11cblxuICAgIGZvciAoY29uc3QgcmF3IG9mIHJhd0ludml0ZXMpIHtcbiAgICAgIGF3YWl0IHRoaXMuc2V0KHJhdy5jb2RlLCByYXcpXG4gICAgICByZXMucHVzaChuZXcgSW52aXRlKHRoaXMuY2xpZW50LCByYXcpKVxuICAgIH1cblxuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIC8qKiBEZWxldGUgYW4gSW52aXRlICovXG4gIGFzeW5jIGRlbGV0ZShpbnZpdGU6IHN0cmluZyB8IEludml0ZSk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgIGF3YWl0IHRoaXMuY2xpZW50LnJlc3QuZGVsZXRlKFxuICAgICAgSU5WSVRFKHR5cGVvZiBpbnZpdGUgPT09ICdzdHJpbmcnID8gaW52aXRlIDogaW52aXRlLmNvZGUpXG4gICAgKVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICAvKiogQ3JlYXRlIGFuIEludml0ZSAqL1xuICBhc3luYyBjcmVhdGUoXG4gICAgY2hhbm5lbDogc3RyaW5nIHwgR3VpbGRUZXh0Q2hhbm5lbCxcbiAgICBvcHRpb25zPzogQ3JlYXRlSW52aXRlT3B0aW9uc1xuICApOiBQcm9taXNlPEludml0ZT4ge1xuICAgIGNvbnN0IHJhdyA9IChhd2FpdCB0aGlzLmNsaWVudC5yZXN0LnBvc3QoXG4gICAgICBDSEFOTkVMX0lOVklURVModHlwZW9mIGNoYW5uZWwgPT09ICdzdHJpbmcnID8gY2hhbm5lbCA6IGNoYW5uZWwuaWQpLFxuICAgICAge1xuICAgICAgICBtYXhfYWdlOiBvcHRpb25zPy5tYXhBZ2UsXG4gICAgICAgIG1heF91c2VzOiBvcHRpb25zPy5tYXhVc2VzLFxuICAgICAgICB0ZW1wb3Jhcnk6IG9wdGlvbnM/LnRlbXBvcmFyeSxcbiAgICAgICAgdW5pcXVlOiBvcHRpb25zPy51bmlxdWUsXG4gICAgICAgIHRhcmdldF91c2VyOlxuICAgICAgICAgIG9wdGlvbnM/LnRhcmdldFVzZXIgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgIDogdHlwZW9mIG9wdGlvbnMudGFyZ2V0VXNlciA9PT0gJ3N0cmluZydcbiAgICAgICAgICAgID8gb3B0aW9ucy50YXJnZXRVc2VyXG4gICAgICAgICAgICA6IG9wdGlvbnMudGFyZ2V0VXNlci5pZCxcbiAgICAgICAgdGFyZ2V0X3VzZXJfdHlwZTogb3B0aW9ucz8udGFyZ2V0VXNlclR5cGVcbiAgICAgIH1cbiAgICApKSBhcyB1bmtub3duIGFzIEludml0ZVBheWxvYWRcblxuICAgIHJldHVybiBuZXcgSW52aXRlKHRoaXMuY2xpZW50LCByYXcpXG4gIH1cblxuICBhc3luYyBmcm9tUGF5bG9hZChpbnZpdGVzOiBJbnZpdGVQYXlsb2FkW10pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBmb3IgKGNvbnN0IGludml0ZSBvZiBpbnZpdGVzKSB7XG4gICAgICBhd2FpdCB0aGlzLnNldChpbnZpdGUuY29kZSwgaW52aXRlKVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsU0FBUyxNQUFNLFFBQVEsMEJBQXlCO0FBQ2hELFNBQVMsZUFBZSxFQUFFLGFBQWEsRUFBRSxNQUFNLFFBQVEsdUJBQXNCO0FBRTdFLFNBQVMsV0FBVyxRQUFRLFlBQVc7V0FFaEM7VUFBSyxvQkFBb0I7SUFBcEIscUJBQUEscUJBQ1YsWUFBUyxLQUFUO0dBRFUseUJBQUE7QUFhWixPQUFPLE1BQU0sc0JBQXNCO0lBQ2pDLE1BQVk7SUFFWixZQUFZLE1BQWMsRUFB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