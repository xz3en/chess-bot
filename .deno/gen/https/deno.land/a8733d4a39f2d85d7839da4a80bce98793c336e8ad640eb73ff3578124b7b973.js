import { INVITE } from '../types/endpoint.ts';
import { Base } from './base.ts';
export class Invite extends Base {
    code;
    guild;
    channel;
    inviter;
    targetUser;
    targetUserType;
    approximatePresenceCount;
    approximateMemberCount;
    /** Number of times Invite was used. This is an Invite Metadata property (not always available) */ uses;
    /** Max number of times this Invite can be used. This is an Invite Metadata property (not always available) */ maxUses;
    /** Max age of the Invite in seconds. This is an Invite Metadata property (not always available) */ maxAge;
    /** Whether Invite is temporary or not. This is an Invite Metadata property (not always available) */ temporary;
    /** Timestamp (string) when Invite was created. This is an Invite Metadata property (not always available) */ createdAtTimestamp;
    /** Timestamp (Date) when Invite was created. This is an Invite Metadata property (not always available) */ get createdAt() {
        return this.createdAtTimestamp === undefined ? undefined : new Date(this.createdAtTimestamp);
    }
    get link() {
        return `https://discord.gg/${this.code}`;
    }
    toString() {
        return this.link;
    }
    constructor(client, data){
        super(client);
        this.readFromData(data);
    }
    /** Delete an invite. Requires the MANAGE_CHANNELS permission on the channel this invite belongs to, or MANAGE_GUILD to remove any invite across the guild. Returns an invite object on success. Fires a Invite Delete Gateway event. */ async delete() {
        const res = await this.client.rest.delete(INVITE(this.code));
        return new Invite(this.client, res);
    }
    readFromData(data) {
        this.code = data.code ?? this.code;
        this.guild = data.guild ?? this.guild;
        this.channel = data.channel ?? this.channel;
        this.inviter = data.inviter ?? this.inviter;
        this.targetUser = data.target_user ?? this.targetUser;
        this.targetUserType = data.target_user_type ?? this.targetUserType;
        this.approximateMemberCount = data.approximate_member_count ?? this.approximateMemberCount;
        this.approximatePresenceCount = data.approximate_presence_count ?? this.approximatePresenceCount;
        this.uses = data.uses ?? this.uses;
        this.maxUses = data.max_uses ?? this.maxUses;
        this.maxAge = data.max_age ?? this.maxAge;
        this.temporary = data.temporary ?? this.temporary;
        this.createdAtTimestamp = (data.created_at === undefined ? undefined : new Date(data.created_at).toISOString()) ?? this.createdAtTimestamp;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvaGFybW9ueUB2Mi45LjAvc3JjL3N0cnVjdHVyZXMvaW52aXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ2xpZW50IH0gZnJvbSAnLi4vY2xpZW50L21vZC50cydcbmltcG9ydCB0eXBlIHsgQ2hhbm5lbFBheWxvYWQgfSBmcm9tICcuLi90eXBlcy9jaGFubmVsLnRzJ1xuaW1wb3J0IHsgSU5WSVRFIH0gZnJvbSAnLi4vdHlwZXMvZW5kcG9pbnQudHMnXG5pbXBvcnQgdHlwZSB7IEd1aWxkUGF5bG9hZCB9IGZyb20gJy4uL3R5cGVzL2d1aWxkLnRzJ1xuaW1wb3J0IHR5cGUgeyBJbnZpdGVNZXRhZGF0YVBheWxvYWQsIEludml0ZVBheWxvYWQgfSBmcm9tICcuLi90eXBlcy9pbnZpdGUudHMnXG5pbXBvcnQgdHlwZSB7IFVzZXJQYXlsb2FkIH0gZnJvbSAnLi4vdHlwZXMvdXNlci50cydcbmltcG9ydCB7IEJhc2UgfSBmcm9tICcuL2Jhc2UudHMnXG5cbmV4cG9ydCBjbGFzcyBJbnZpdGUgZXh0ZW5kcyBCYXNlIHtcbiAgY29kZSE6IHN0cmluZ1xuICBndWlsZD86IEd1aWxkUGF5bG9hZFxuICBjaGFubmVsITogQ2hhbm5lbFBheWxvYWRcbiAgaW52aXRlcj86IFVzZXJQYXlsb2FkXG4gIHRhcmdldFVzZXI/OiBVc2VyUGF5bG9hZFxuICB0YXJnZXRVc2VyVHlwZT86IG51bWJlclxuICBhcHByb3hpbWF0ZVByZXNlbmNlQ291bnQ/OiBudW1iZXJcbiAgYXBwcm94aW1hdGVNZW1iZXJDb3VudD86IG51bWJlclxuXG4gIC8qKiBOdW1iZXIgb2YgdGltZXMgSW52aXRlIHdhcyB1c2VkLiBUaGlzIGlzIGFuIEludml0ZSBNZXRhZGF0YSBwcm9wZXJ0eSAobm90IGFsd2F5cyBhdmFpbGFibGUpICovXG4gIHVzZXM/OiBudW1iZXJcbiAgLyoqIE1heCBudW1iZXIgb2YgdGltZXMgdGhpcyBJbnZpdGUgY2FuIGJlIHVzZWQuIFRoaXMgaXMgYW4gSW52aXRlIE1ldGFkYXRhIHByb3BlcnR5IChub3QgYWx3YXlzIGF2YWlsYWJsZSkgKi9cbiAgbWF4VXNlcz86IG51bWJlclxuICAvKiogTWF4IGFnZSBvZiB0aGUgSW52aXRlIGluIHNlY29uZHMuIFRoaXMgaXMgYW4gSW52aXRlIE1ldGFkYXRhIHByb3BlcnR5IChub3QgYWx3YXlzIGF2YWlsYWJsZSkgKi9cbiAgbWF4QWdlPzogbnVtYmVyXG4gIC8qKiBXaGV0aGVyIEludml0ZSBpcyB0ZW1wb3Jhcnkgb3Igbm90LiBUaGlzIGlzIGFuIEludml0ZSBNZXRhZGF0YSBwcm9wZXJ0eSAobm90IGFsd2F5cyBhdmFpbGFibGUpICovXG4gIHRlbXBvcmFyeT86IGJvb2xlYW5cbiAgLyoqIFRpbWVzdGFtcCAoc3RyaW5nKSB3aGVuIEludml0ZSB3YXMgY3JlYXRlZC4gVGhpcyBpcyBhbiBJbnZpdGUgTWV0YWRhdGEgcHJvcGVydHkgKG5vdCBhbHdheXMgYXZhaWxhYmxlKSAqL1xuICBjcmVhdGVkQXRUaW1lc3RhbXA/OiBzdHJpbmdcblxuICAvKiogVGltZXN0YW1wIChEYXRlKSB3aGVuIEludml0ZSB3YXMgY3JlYXRlZC4gVGhpcyBpcyBhbiBJbnZpdGUgTWV0YWRhdGEgcHJvcGVydHkgKG5vdCBhbHdheXMgYXZhaWxhYmxlKSAqL1xuICBnZXQgY3JlYXRlZEF0KCk6IERhdGUgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZWRBdFRpbWVzdGFtcCA9PT0gdW5kZWZpbmVkXG4gICAgICA/IHVuZGVmaW5lZFxuICAgICAgOiBuZXcgRGF0ZSh0aGlzLmNyZWF0ZWRBdFRpbWVzdGFtcClcbiAgfVxuXG4gIGdldCBsaW5rKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBodHRwczovL2Rpc2NvcmQuZ2cvJHt0aGlzLmNvZGV9YFxuICB9XG5cbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5saW5rXG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBjbGllbnQ6IENsaWVudCxcbiAgICBkYXRhOiBJbnZpdGVQYXlsb2FkICYgUGFydGlhbDxJbnZpdGVNZXRhZGF0YVBheWxvYWQ+XG4gICkge1xuICAgIHN1cGVyKGNsaWVudClcbiAgICB0aGlzLnJlYWRGcm9tRGF0YShkYXRhKVxuICB9XG5cbiAgLyoqIERlbGV0ZSBhbiBpbnZpdGUuIFJlcXVpcmVzIHRoZSBNQU5BR0VfQ0hBTk5FTFMgcGVybWlzc2lvbiBvbiB0aGUgY2hhbm5lbCB0aGlzIGludml0ZSBiZWxvbmdzIHRvLCBvciBNQU5BR0VfR1VJTEQgdG8gcmVtb3ZlIGFueSBpbnZpdGUgYWNyb3NzIHRoZSBndWlsZC4gUmV0dXJucyBhbiBpbnZpdGUgb2JqZWN0IG9uIHN1Y2Nlc3MuIEZpcmVzIGEgSW52aXRlIERlbGV0ZSBHYXRld2F5IGV2ZW50LiAqL1xuICBhc3luYyBkZWxldGUoKTogUHJvbWlzZTxJbnZpdGU+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmNsaWVudC5yZXN0LmRlbGV0ZShJTlZJVEUodGhpcy5jb2RlKSlcbiAgICByZXR1cm4gbmV3IEludml0ZSh0aGlzLmNsaWVudCwgcmVzKVxuICB9XG5cbiAgcmVhZEZyb21EYXRhKGRhdGE6IEludml0ZVBheWxvYWQgJiBQYXJ0aWFsPEludml0ZU1ldGFkYXRhUGF5bG9hZD4pOiB2b2lkIHtcbiAgICB0aGlzLmNvZGUgPSBkYXRhLmNvZGUgPz8gdGhpcy5jb2RlXG4gICAgdGhpcy5ndWlsZCA9IGRhdGEuZ3VpbGQgPz8gdGhpcy5ndWlsZFxuICAgIHRoaXMuY2hhbm5lbCA9IGRhdGEuY2hhbm5lbCA/PyB0aGlzLmNoYW5uZWxcbiAgICB0aGlzLmludml0ZXIgPSBkYXRhLmludml0ZXIgPz8gdGhpcy5pbnZpdGVyXG4gICAgdGhpcy50YXJnZXRVc2VyID0gZGF0YS50YXJnZXRfdXNlciA/PyB0aGlzLnRhcmdldFVzZXJcbiAgICB0aGlzLnRhcmdldFVzZXJUeXBlID0gZGF0YS50YXJnZXRfdXNlcl90eXBlID8/IHRoaXMudGFyZ2V0VXNlclR5cGVcbiAgICB0aGlzLmFwcHJveGltYXRlTWVtYmVyQ291bnQgPVxuICAgICAgZGF0YS5hcHByb3hpbWF0ZV9tZW1iZXJfY291bnQgPz8gdGhpcy5hcHByb3hpbWF0ZU1lbWJlckNvdW50XG4gICAgdGhpcy5hcHByb3hpbWF0ZVByZXNlbmNlQ291bnQgPVxuICAgICAgZGF0YS5hcHByb3hpbWF0ZV9wcmVzZW5jZV9jb3VudCA/PyB0aGlzLmFwcHJveGltYXRlUHJlc2VuY2VDb3VudFxuXG4gICAgdGhpcy51c2VzID0gZGF0YS51c2VzID8/IHRoaXMudXNlc1xuICAgIHRoaXMubWF4VXNlcyA9IGRhdGEubWF4X3VzZXMgPz8gdGhpcy5tYXhVc2VzXG4gICAgdGhpcy5tYXhBZ2UgPSBkYXRhLm1heF9hZ2UgPz8gdGhpcy5tYXhBZ2VcbiAgICB0aGlzLnRlbXBvcmFyeSA9IGRhdGEudGVtcG9yYXJ5ID8/IHRoaXMudGVtcG9yYXJ5XG4gICAgdGhpcy5jcmVhdGVkQXRUaW1lc3RhbXAgPVxuICAgICAgKGRhdGEuY3JlYXRlZF9hdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgIDogbmV3IERhdGUoZGF0YS5jcmVhdGVkX2F0KS50b0lTT1N0cmluZygpKSA/PyB0aGlzLmNyZWF0ZWRBdFRpbWVzdGFtcFxuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsU0FBUyxNQUFNLFFBQVEsdUJBQXNCO0FBSTdDLFNBQVMsSUFBSSxRQUFRLFlBQVc7QUFFaEMsT0FBTyxNQUFNLGVBQWU7SUFDMUIsS0FBYTtJQUNiLE1BQW9CO0lBQ3BCLFFBQXdCO0lBQ3hCLFFBQXFCO0lBQ3JCLFdBQXdCO0lBQ3hCLGVBQXVCO0lBQ3ZCLHlCQUFpQztJQUNqQyx1QkFBK0I7SUFFL0IsZ0dBQWdHLEdBQ2hHLEtBQWE7SUFDYiw0R0FBNEcsR0FDNUcsUUFBZ0I7SUFDaEIsaUdBQWlHLEdBQ2pHLE9BQWU7SUFDZixtR0FBbUcsR0FDbkcsVUFBbUI7SUFDbkIsMkdBQTJHLEdBQzNHLG1CQUEyQjtJQUUzQix5R0FBeUcsR0FDekcsSUFBSSxZQUE4QjtRQUNoQyxPQUFPLElBQUksQ0FBQyxrQkFBa0IsS0FBSyxZQUMvQixZQUNBLElBQUksS0FBSyxJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFDdkM7SUFFQSxJQUFJLE9BQWU7UUFDakIsT0FBTyxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQztJQUVBLFdBQW1CO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLElBQUk7SUFDbEI7SUFFQSxZQUNFLE1BQWMsRUFDZCxJQUFvRCxDQUNwRDtRQUNBLEtBQUssQ0FBQztRQUNOLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDcEI7SUFFQSxzT0FBc08sR0FDdE8sTUFBTSxTQUEwQjtRQUM5QixNQUFNLE1BQU0sTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSTtRQUMxRCxPQUFPLElBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFO0lBQ2pDO0lBRUEsYUFBYSxJQUFvRCxFQUFRO1FBQ3ZFLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLElBQUk7UUFDbEMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSztRQUNyQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPO1FBQzNDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU87UUFDM0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLFdBQVcsSUFBSSxJQUFJLENBQUMsVUFBVTtRQUNyRCxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssZ0JBQWdCLElBQUksSUFBSSxDQUFDLGNBQWM7UUFDbEUsSUFBSSxDQUFDLHNCQUFzQixHQUN6QixLQUFLLHdCQUF3QixJQUFJLElBQUksQ0FBQyxzQkFBc0I7UUFDOUQsSUFBSSxDQUFDLHdCQUF3QixHQUMzQixLQUFLLDBCQUEwQixJQUFJLElBQUksQ0FBQyx3QkFBd0I7UUFFbEUsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSTtRQUNsQyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxPQUFPO1FBQzVDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxPQUFPLElBQUksSUFBSSxDQUFDLE1BQU07UUFDekMsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUztRQUNqRCxJQUFJLENBQUMsa0JBQWtCLEdBQ3JCLENBQUMsS0FBSyxVQUFVLEtBQUssWUFDakIsWUFDQSxJQUFJLEtBQUssS0FBSyxVQUFVLEVBQUUsV0FBVyxFQUFFLEtBQUssSUFBSSxDQUFDLGtCQUFrQjtJQUMzRTtBQUNGLENBQUMifQ==