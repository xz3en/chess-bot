import { CHANNEL, GUILD_CHANNELS } from '../types/endpoint.ts';
import { BaseChildManager } from './baseChild.ts';
export class GuildChannelsManager extends BaseChildManager {
    guild;
    constructor(client, parent, guild){
        super(client, parent);
        this.guild = guild;
    }
    async get(id) {
        const res = await this.parent.get(id);
        if (res !== undefined && res.guild.id === this.guild.id) return res;
        else return undefined;
    }
    async size() {
        return await this.client.cache.size(this.parent.cacheName, (d)=>d.guild_id === this.guild.id) ?? 0;
    }
    /** Delete a Guild Channel */ async delete(id) {
        return this.client.rest.delete(CHANNEL(id));
    }
    async array() {
        const arr = await this.parent.array();
        return arr.filter((c)=>c.guild !== undefined && c.guild.id === this.guild.id);
    }
    async flush() {
        const arr = await this.array();
        for (const elem of arr){
            this.parent._delete(elem.id);
        }
        return true;
    }
    /** Create a new Guild Channel */ async create(options) {
        if (options.name === undefined) throw new Error('name is required for GuildChannelsManager#create');
        const res = await this.client.rest.post(GUILD_CHANNELS(this.guild.id), {
            name: options.name,
            type: options.type,
            topic: options.topic,
            bitrate: options.bitrate,
            user_limit: options.userLimit,
            rate_limit_per_user: options.rateLimitPerUser,
            position: options.position,
            permission_overwrites: options.permissionOverwrites,
            parent_id: options.parent === undefined ? undefined : typeof options.parent === 'object' ? options.parent.id : options.parent,
            nsfw: options.nsfw
        });
        await this.set(res.id, res);
        const channel = await this.get(res.id);
        return channel;
    }
    /** Modify the positions of a set of channel positions for the guild. */ async editPositions(...positions) {
        if (positions.length === 0) throw new Error('No channel positions to change specified');
        await this.client.rest.api.guilds[this.guild.id].channels.patch(positions.map((e)=>({
                id: typeof e.id === 'string' ? e.id : e.id.id,
                position: e.position ?? null
            })));
        return this;
    }
    async keys() {
        const channelsList = [];
        for (const channel of await this.client.cache.array('channels') ?? []){
            if (channel.guild_id === this.guild.id) channelsList.push(channel.id);
        }
        return channelsList;
    }
}
//# sourceMappingURL=data:application/json;base64,