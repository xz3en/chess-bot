// Ported from https://github.com/discordjs/discord.js/blob/master/src/util/BitField.js
/** Bit Field utility to work with Bits and Flags */ export class BitField {
    #flags = {};
    bitfield;
    constructor(flags, bits){
        this.#flags = flags;
        this.bitfield = BitField.resolve(this.#flags, bits);
    }
    any(bit) {
        return (this.bitfield & BitField.resolve(this.#flags, bit)) !== 0n;
    }
    equals(bit) {
        return this.bitfield === BitField.resolve(this.#flags, bit);
    }
    has(bit, ..._) {
        if (Array.isArray(bit)) return bit.every((p)=>this.has(p));
        bit = BitField.resolve(this.#flags, bit);
        return (this.bitfield & bit) === bit;
    }
    missing(bits, ...hasParams) {
        if (!Array.isArray(bits)) bits = new BitField(this.#flags, bits).toArray(false);
        return bits.filter((p)=>!this.has(p, ...hasParams));
    }
    freeze() {
        return Object.freeze(this);
    }
    add(...bits) {
        let total = 0n;
        for (const bit of bits){
            total |= BitField.resolve(this.#flags, bit);
        }
        if (Object.isFrozen(this)) return new BitField(this.#flags, this.bitfield | total);
        this.bitfield |= total;
        return this;
    }
    remove(...bits) {
        let total = 0n;
        for (const bit of bits){
            total |= BitField.resolve(this.#flags, bit);
        }
        if (Object.isFrozen(this)) return new BitField(this.#flags, this.bitfield & ~total);
        this.bitfield &= ~total;
        return this;
    }
    flags() {
        return this.#flags;
    }
    serialize(...hasParams) {
        const serialized = {};
        for (const [flag, bit] of Object.entries(this.#flags))serialized[flag] = this.has(BitField.resolve(this.#flags, bit), ...hasParams);
        return serialized;
    }
    toArray(...hasParams) {
        return Object.keys(this.#flags).filter((bit)=>this.has(BitField.resolve(this.#flags, bit), ...hasParams));
    }
    toJSON() {
        return this.bitfield.toString();
    }
    valueOf() {
        return this.bitfield;
    }
    *[Symbol.iterator]() {
        yield* this.toArray();
    }
    static resolve(flags, bit = 0n) {
        if (typeof bit === 'bigint') return bit;
        if (typeof bit === 'string' && !isNaN(parseInt(bit))) return BigInt(bit);
        if (typeof bit === 'number' && bit >= 0) return BigInt(bit);
        if (bit instanceof BitField) return this.resolve(flags, bit.bitfield);
        if (Array.isArray(bit)) return bit.map((p)=>this.resolve(flags, p)).reduce((prev, p)=>prev | p, 0n);
        if (typeof bit === 'string' && typeof flags[bit] !== 'undefined') return BigInt(flags[bit]);
        const error = new RangeError('BITFIELD_INVALID');
        throw error;
    }
}
//# sourceMappingURL=data:application/json;base64,