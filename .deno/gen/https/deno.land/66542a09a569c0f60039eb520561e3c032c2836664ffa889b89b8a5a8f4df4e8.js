export const inviteCreate = async (gateway, d)=>{
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    const guild = await gateway.client.guilds.get(d.guild_id);
    // Weird case, shouldn't happen
    if (guild === undefined) return;
    /**
   * TODO(DjDeveloperr): Add _get method in BaseChildManager
   */ const cachedChannel = await gateway.client.channels._get(d.channel_id);
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
    const cachedGuild = d.guild_id === undefined ? undefined : await guild.client.guilds._get(d.guild_id);
    const dataConverted = {
        code: d.code,
        guild: cachedGuild,
        // had to use `as ChannelPayload` because the _get method returned `ChannelPayload | undefined` which errored
        channel: cachedChannel,
        inviter: d.inviter,
        target_user: d.target_user,
        target_user_type: d.target_user_type
    };
    await guild.invites.set(d.code, dataConverted);
    const invite = await guild.invites.get(d.code);
    gateway.client.emit('inviteCreate', invite);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvaGFybW9ueUB2Mi45LjAvc3JjL2dhdGV3YXkvaGFuZGxlcnMvaW52aXRlQ3JlYXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgR2F0ZXdheSwgR2F0ZXdheUV2ZW50SGFuZGxlciB9IGZyb20gJy4uL21vZC50cydcbmltcG9ydCB7IEd1aWxkIH0gZnJvbSAnLi4vLi4vc3RydWN0dXJlcy9ndWlsZC50cydcbmltcG9ydCB7IEludml0ZUNyZWF0ZVBheWxvYWQgfSBmcm9tICcuLi8uLi90eXBlcy9nYXRld2F5LnRzJ1xuaW1wb3J0IHsgQ2hhbm5lbFBheWxvYWQgfSBmcm9tICcuLi8uLi90eXBlcy9jaGFubmVsLnRzJ1xuaW1wb3J0IHsgR3VpbGRQYXlsb2FkIH0gZnJvbSAnLi4vLi4vdHlwZXMvZ3VpbGQudHMnXG5pbXBvcnQgeyBJbnZpdGVQYXlsb2FkIH0gZnJvbSAnLi4vLi4vdHlwZXMvaW52aXRlLnRzJ1xuaW1wb3J0IHsgSW52aXRlIH0gZnJvbSAnLi4vLi4vc3RydWN0dXJlcy9pbnZpdGUudHMnXG5cbmV4cG9ydCBjb25zdCBpbnZpdGVDcmVhdGU6IEdhdGV3YXlFdmVudEhhbmRsZXIgPSBhc3luYyAoXG4gIGdhdGV3YXk6IEdhdGV3YXksXG4gIGQ6IEludml0ZUNyZWF0ZVBheWxvYWRcbikgPT4ge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICBjb25zdCBndWlsZDogR3VpbGQgfCB1bmRlZmluZWQgPSBhd2FpdCBnYXRld2F5LmNsaWVudC5ndWlsZHMuZ2V0KGQuZ3VpbGRfaWQhKVxuXG4gIC8vIFdlaXJkIGNhc2UsIHNob3VsZG4ndCBoYXBwZW5cbiAgaWYgKGd1aWxkID09PSB1bmRlZmluZWQpIHJldHVyblxuXG4gIC8qKlxuICAgKiBUT0RPKERqRGV2ZWxvcGVycik6IEFkZCBfZ2V0IG1ldGhvZCBpbiBCYXNlQ2hpbGRNYW5hZ2VyXG4gICAqL1xuICBjb25zdCBjYWNoZWRDaGFubmVsID0gYXdhaXQgZ2F0ZXdheS5jbGllbnQuY2hhbm5lbHMuX2dldChkLmNoYW5uZWxfaWQpXG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS10eXBlLWFzc2VydGlvblxuICBjb25zdCBjYWNoZWRHdWlsZDogR3VpbGRQYXlsb2FkIHwgdW5kZWZpbmVkID1cbiAgICBkLmd1aWxkX2lkID09PSB1bmRlZmluZWRcbiAgICAgID8gdW5kZWZpbmVkXG4gICAgICA6IGF3YWl0IGd1aWxkLmNsaWVudC5ndWlsZHMuX2dldChkLmd1aWxkX2lkKVxuXG4gIGNvbnN0IGRhdGFDb252ZXJ0ZWQ6IEludml0ZVBheWxvYWQgPSB7XG4gICAgY29kZTogZC5jb2RlLFxuICAgIGd1aWxkOiBjYWNoZWRHdWlsZCxcbiAgICAvLyBoYWQgdG8gdXNlIGBhcyBDaGFubmVsUGF5bG9hZGAgYmVjYXVzZSB0aGUgX2dldCBtZXRob2QgcmV0dXJuZWQgYENoYW5uZWxQYXlsb2FkIHwgdW5kZWZpbmVkYCB3aGljaCBlcnJvcmVkXG4gICAgY2hhbm5lbDogY2FjaGVkQ2hhbm5lbCBhcyB1bmtub3duIGFzIENoYW5uZWxQYXlsb2FkLFxuICAgIGludml0ZXI6IGQuaW52aXRlcixcbiAgICB0YXJnZXRfdXNlcjogZC50YXJnZXRfdXNlcixcbiAgICB0YXJnZXRfdXNlcl90eXBlOiBkLnRhcmdldF91c2VyX3R5cGVcbiAgfVxuXG4gIGF3YWl0IGd1aWxkLmludml0ZXMuc2V0KGQuY29kZSwgZGF0YUNvbnZlcnRlZClcbiAgY29uc3QgaW52aXRlID0gYXdhaXQgZ3VpbGQuaW52aXRlcy5nZXQoZC5jb2RlKVxuICBnYXRld2F5LmNsaWVudC5lbWl0KCdpbnZpdGVDcmVhdGUnLCBpbnZpdGUgYXMgdW5rbm93biBhcyBJbnZpdGUpXG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsT0FBTyxNQUFNLGVBQW9DLE9BQy9DLFNBQ0EsSUFDRztJQUNILG9FQUFvRTtJQUNwRSxNQUFNLFFBQTJCLE1BQU0sUUFBUSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFFBQVE7SUFFM0UsK0JBQStCO0lBQy9CLElBQUksVUFBVSxXQUFXO0lBRXpCOztHQUVDLEdBQ0QsTUFBTSxnQkFBZ0IsTUFBTSxRQUFRLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsVUFBVTtJQUVyRSw0RUFBNEU7SUFDNUUsTUFBTSxjQUNKLEVBQUUsUUFBUSxLQUFLLFlBQ1gsWUFDQSxNQUFNLE1BQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxRQUFRLENBQUM7SUFFaEQsTUFBTSxnQkFBK0I7UUFDbkMsTUFBTSxFQUFFLElBQUk7UUFDWixPQUFPO1FBQ1AsNkdBQTZHO1FBQzdHLFNBQVM7UUFDVCxTQUFTLEVBQUUsT0FBTztRQUNsQixhQUFhLEVBQUUsV0FBVztRQUMxQixrQkFBa0IsRUFBRSxnQkFBZ0I7SUFDdEM7SUFFQSxNQUFNLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRTtJQUNoQyxNQUFNLFNBQVMsTUFBTSxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJO0lBQzdDLFFBQVEsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0I7QUFDdEMsRUFBQyJ9