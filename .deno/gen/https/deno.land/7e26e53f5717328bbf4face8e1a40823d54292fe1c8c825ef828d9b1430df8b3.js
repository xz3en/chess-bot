import { GatewayIntents } from '../types/gateway.ts';
/* eslint-disable @typescript-eslint/no-extraneous-class */ /** Utility class for handling Gateway Intents */ export class Intents {
    static NonPrivileged = [
        GatewayIntents.GUILD_MESSAGES,
        GatewayIntents.DIRECT_MESSAGES,
        GatewayIntents.DIRECT_MESSAGE_REACTIONS,
        GatewayIntents.DIRECT_MESSAGE_TYPING,
        GatewayIntents.GUILDS,
        GatewayIntents.GUILD_BANS,
        GatewayIntents.GUILD_EMOJIS,
        GatewayIntents.GUILD_INTEGRATIONS,
        GatewayIntents.GUILD_INVITES,
        GatewayIntents.GUILD_MESSAGE_REACTIONS,
        GatewayIntents.GUILD_MESSAGE_TYPING,
        GatewayIntents.GUILD_VOICE_STATES,
        GatewayIntents.GUILD_WEBHOOKS
    ];
    static All = [
        GatewayIntents.GUILD_MEMBERS,
        GatewayIntents.GUILD_PRESENCES,
        ...Intents.NonPrivileged
    ];
    static Presence = [
        GatewayIntents.GUILD_PRESENCES,
        ...Intents.NonPrivileged
    ];
    static GuildMembers = [
        GatewayIntents.GUILD_MEMBERS,
        ...Intents.NonPrivileged
    ];
    static None = [
        ...Intents.NonPrivileged
    ];
    /** Create an Array of Intents easily passing Intents you're privileged for and disable the ones you don't need */ static create(privileged, disable) {
        let intents = [
            ...Intents.NonPrivileged
        ];
        if (privileged !== undefined && privileged.length !== 0) {
            if (privileged.includes('GUILD_MEMBERS')) intents.push(GatewayIntents.GUILD_MEMBERS);
            if (privileged.includes('GUILD_PRESENCES')) intents.push(GatewayIntents.GUILD_PRESENCES);
        }
        if (disable !== undefined) {
            intents = intents.filter((intent)=>!disable.includes(intent));
        }
        return intents;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvaGFybW9ueUB2Mi45LjAvc3JjL3V0aWxzL2ludGVudHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2F0ZXdheUludGVudHMgfSBmcm9tICcuLi90eXBlcy9nYXRld2F5LnRzJ1xuXG5leHBvcnQgdHlwZSBQcml2aWxlZ2VkSW50ZW50cyA9ICdHVUlMRF9NRU1CRVJTJyB8ICdHVUlMRF9QUkVTRU5DRVMnXG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHRyYW5lb3VzLWNsYXNzICovXG4vKiogVXRpbGl0eSBjbGFzcyBmb3IgaGFuZGxpbmcgR2F0ZXdheSBJbnRlbnRzICovXG5leHBvcnQgY2xhc3MgSW50ZW50cyB7XG4gIHN0YXRpYyBOb25Qcml2aWxlZ2VkOiBudW1iZXJbXSA9IFtcbiAgICBHYXRld2F5SW50ZW50cy5HVUlMRF9NRVNTQUdFUyxcbiAgICBHYXRld2F5SW50ZW50cy5ESVJFQ1RfTUVTU0FHRVMsXG4gICAgR2F0ZXdheUludGVudHMuRElSRUNUX01FU1NBR0VfUkVBQ1RJT05TLFxuICAgIEdhdGV3YXlJbnRlbnRzLkRJUkVDVF9NRVNTQUdFX1RZUElORyxcbiAgICBHYXRld2F5SW50ZW50cy5HVUlMRFMsXG4gICAgR2F0ZXdheUludGVudHMuR1VJTERfQkFOUyxcbiAgICBHYXRld2F5SW50ZW50cy5HVUlMRF9FTU9KSVMsXG4gICAgR2F0ZXdheUludGVudHMuR1VJTERfSU5URUdSQVRJT05TLFxuICAgIEdhdGV3YXlJbnRlbnRzLkdVSUxEX0lOVklURVMsXG4gICAgR2F0ZXdheUludGVudHMuR1VJTERfTUVTU0FHRV9SRUFDVElPTlMsXG4gICAgR2F0ZXdheUludGVudHMuR1VJTERfTUVTU0FHRV9UWVBJTkcsXG4gICAgR2F0ZXdheUludGVudHMuR1VJTERfVk9JQ0VfU1RBVEVTLFxuICAgIEdhdGV3YXlJbnRlbnRzLkdVSUxEX1dFQkhPT0tTXG4gIF1cblxuICBzdGF0aWMgQWxsOiBudW1iZXJbXSA9IFtcbiAgICBHYXRld2F5SW50ZW50cy5HVUlMRF9NRU1CRVJTLFxuICAgIEdhdGV3YXlJbnRlbnRzLkdVSUxEX1BSRVNFTkNFUyxcbiAgICAuLi5JbnRlbnRzLk5vblByaXZpbGVnZWRcbiAgXVxuXG4gIHN0YXRpYyBQcmVzZW5jZTogbnVtYmVyW10gPSBbXG4gICAgR2F0ZXdheUludGVudHMuR1VJTERfUFJFU0VOQ0VTLFxuICAgIC4uLkludGVudHMuTm9uUHJpdmlsZWdlZFxuICBdXG5cbiAgc3RhdGljIEd1aWxkTWVtYmVyczogbnVtYmVyW10gPSBbXG4gICAgR2F0ZXdheUludGVudHMuR1VJTERfTUVNQkVSUyxcbiAgICAuLi5JbnRlbnRzLk5vblByaXZpbGVnZWRcbiAgXVxuXG4gIHN0YXRpYyBOb25lOiBudW1iZXJbXSA9IFsuLi5JbnRlbnRzLk5vblByaXZpbGVnZWRdXG5cbiAgLyoqIENyZWF0ZSBhbiBBcnJheSBvZiBJbnRlbnRzIGVhc2lseSBwYXNzaW5nIEludGVudHMgeW91J3JlIHByaXZpbGVnZWQgZm9yIGFuZCBkaXNhYmxlIHRoZSBvbmVzIHlvdSBkb24ndCBuZWVkICovXG4gIHN0YXRpYyBjcmVhdGUoXG4gICAgcHJpdmlsZWdlZD86IFByaXZpbGVnZWRJbnRlbnRzW10sXG4gICAgZGlzYWJsZT86IG51bWJlcltdXG4gICk6IG51bWJlcltdIHtcbiAgICBsZXQgaW50ZW50czogbnVtYmVyW10gPSBbLi4uSW50ZW50cy5Ob25Qcml2aWxlZ2VkXVxuXG4gICAgaWYgKHByaXZpbGVnZWQgIT09IHVuZGVmaW5lZCAmJiBwcml2aWxlZ2VkLmxlbmd0aCAhPT0gMCkge1xuICAgICAgaWYgKHByaXZpbGVnZWQuaW5jbHVkZXMoJ0dVSUxEX01FTUJFUlMnKSlcbiAgICAgICAgaW50ZW50cy5wdXNoKEdhdGV3YXlJbnRlbnRzLkdVSUxEX01FTUJFUlMpXG4gICAgICBpZiAocHJpdmlsZWdlZC5pbmNsdWRlcygnR1VJTERfUFJFU0VOQ0VTJykpXG4gICAgICAgIGludGVudHMucHVzaChHYXRld2F5SW50ZW50cy5HVUlMRF9QUkVTRU5DRVMpXG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaW50ZW50cyA9IGludGVudHMuZmlsdGVyKChpbnRlbnQpID0+ICFkaXNhYmxlLmluY2x1ZGVzKGludGVudCkpXG4gICAgfVxuXG4gICAgcmV0dXJuIGludGVudHNcbiAgfVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsY0FBYyxRQUFRLHNCQUFxQjtBQUlwRCx5REFBeUQsR0FDekQsK0NBQStDLEdBQy9DLE9BQU8sTUFBTTtJQUNYLE9BQU8sZ0JBQTBCO1FBQy9CLGVBQWUsY0FBYztRQUM3QixlQUFlLGVBQWU7UUFDOUIsZUFBZSx3QkFBd0I7UUFDdkMsZUFBZSxxQkFBcUI7UUFDcEMsZUFBZSxNQUFNO1FBQ3JCLGVBQWUsVUFBVTtRQUN6QixlQUFlLFlBQVk7UUFDM0IsZUFBZSxrQkFBa0I7UUFDakMsZUFBZSxhQUFhO1FBQzVCLGVBQWUsdUJBQXVCO1FBQ3RDLGVBQWUsb0JBQW9CO1FBQ25DLGVBQWUsa0JBQWtCO1FBQ2pDLGVBQWUsY0FBYztLQUM5QixDQUFBO0lBRUQsT0FBTyxNQUFnQjtRQUNyQixlQUFlLGFBQWE7UUFDNUIsZUFBZSxlQUFlO1dBQzNCLFFBQVEsYUFBYTtLQUN6QixDQUFBO0lBRUQsT0FBTyxXQUFxQjtRQUMxQixlQUFlLGVBQWU7V0FDM0IsUUFBUSxhQUFhO0tBQ3pCLENBQUE7SUFFRCxPQUFPLGVBQXlCO1FBQzlCLGVBQWUsYUFBYTtXQUN6QixRQUFRLGFBQWE7S0FDekIsQ0FBQTtJQUVELE9BQU8sT0FBaUI7V0FBSSxRQUFRLGFBQWE7S0FBQyxDQUFBO0lBRWxELGdIQUFnSCxHQUNoSCxPQUFPLE9BQ0wsVUFBZ0MsRUFDaEMsT0FBa0IsRUFDUjtRQUNWLElBQUksVUFBb0I7ZUFBSSxRQUFRLGFBQWE7U0FBQztRQUVsRCxJQUFJLGVBQWUsYUFBYSxXQUFXLE1BQU0sS0FBSyxHQUFHO1lBQ3ZELElBQUksV0FBVyxRQUFRLENBQUMsa0JBQ3RCLFFBQVEsSUFBSSxDQUFDLGVBQWUsYUFBYTtZQUMzQyxJQUFJLFdBQVcsUUFBUSxDQUFDLG9CQUN0QixRQUFRLElBQUksQ0FBQyxlQUFlLGVBQWU7UUFDL0MsQ0FBQztRQUVELElBQUksWUFBWSxXQUFXO1lBQ3pCLFVBQVUsUUFBUSxNQUFNLENBQUMsQ0FBQyxTQUFXLENBQUMsUUFBUSxRQUFRLENBQUM7UUFDekQsQ0FBQztRQUVELE9BQU87SUFDVDtBQUNGLENBQUMifQ==