import { ColorUtil } from '../utils/colorutil.ts';
/** Message Embed Object */ export class Embed {
    title;
    type;
    description;
    url;
    timestamp;
    color;
    footer;
    image;
    thumbnail;
    video;
    provider;
    author;
    fields;
    files = [];
    static MAX_TITLE_LENGTH = 256;
    static MAX_DESCRIPTION_LENGTH = 4096;
    static MAX_FIELD_NAME_LENGTH = 256;
    static MAX_FIELD_VALUE_LENGTH = 1024;
    static MAX_FIELDS_LENGTH = 25;
    static MAX_FOOTER_TEXT_LENGTH = 2048;
    static MAX_AUTHOR_NAME_LENGTH = 256;
    static MAX_EMBED_LENGTH = 6000;
    constructor(data){
        this.title = data?.title;
        this.type = data?.type;
        this.description = data?.description;
        this.url = data?.url;
        this.timestamp = data?.timestamp;
        this.color = data?.color;
        this.footer = data?.footer;
        this.image = data?.image;
        this.thumbnail = data?.thumbnail;
        this.video = data?.video;
        this.provider = data?.provider;
        this.author = data?.author;
        this.fields = data?.fields;
    }
    /** Convert Embed Object to Embed Payload JSON */ toJSON() {
        let total = 0;
        if (this.title?.length !== undefined && this.title?.length > Embed.MAX_TITLE_LENGTH) {
            total += Number(this.title.length);
            throw new Error(`Embed title cannot exceed ${Embed.MAX_TITLE_LENGTH} characters.`);
        }
        if (this.description?.length !== undefined && this.description?.length > Embed.MAX_DESCRIPTION_LENGTH) {
            total += Number(this.description.length);
            throw new Error(`Embed description cannot exceed ${Embed.MAX_DESCRIPTION_LENGTH} characters.`);
        }
        if (this.fields?.length !== undefined) {
            this.fields.forEach((field)=>{
                if (field.name.length > Embed.MAX_FIELD_NAME_LENGTH) {
                    total += Number(field.name.length);
                    throw new Error(`Embed field name cannot exceed ${Embed.MAX_FIELD_NAME_LENGTH} characters.`);
                }
                if (field.value.length > Embed.MAX_FIELD_VALUE_LENGTH) {
                    total += Number(field.value.length);
                    throw new Error(`Embed field value cannot exceed ${Embed.MAX_FIELD_VALUE_LENGTH} characters.`);
                }
            });
            if (this.fields.length > Embed.MAX_FIELDS_LENGTH) throw new Error('Embed fields cannot exceed 25 field objects.');
        }
        if (this.footer?.text?.length !== undefined && this.footer?.text?.length > Embed.MAX_FOOTER_TEXT_LENGTH) {
            total += Number(this.footer?.text?.length);
            throw new Error(`Embed footer text cannot exceed ${Embed.MAX_FOOTER_TEXT_LENGTH}.`);
        }
        if (this.author?.name?.length !== undefined && this.author?.name?.length > Embed.MAX_AUTHOR_NAME_LENGTH) {
            total += Number(this.author?.name?.length);
            throw new Error(`Embed author name cannot exceed ${Embed.MAX_AUTHOR_NAME_LENGTH}.`);
        }
        if (total > Embed.MAX_EMBED_LENGTH) throw new Error(`Embed characters cannot exceed ${Embed.MAX_EMBED_LENGTH} characters in total.`);
        return {
            title: this.title,
            type: this.type,
            description: this.description,
            url: this.url,
            timestamp: this.timestamp,
            color: this.color,
            footer: this.footer,
            image: this.image,
            thumbnail: this.thumbnail,
            video: this.video,
            provider: this.provider,
            author: this.author,
            fields: this.fields
        };
    }
    /** Set Title of the Embed */ setTitle(title) {
        this.title = title;
        return this;
    }
    /** Set Embed description */ setDescription(description) {
        this.description = description;
        return this;
    }
    attach(...files) {
        for (const file of files){
            this.files.push(file);
        }
        return this;
    }
    /** Set Embed Type */ setType(type) {
        this.type = type;
        return this;
    }
    /** Set URL of the Embed */ setURL(url) {
        this.url = typeof url === 'object' ? url.toString() : url;
        return this;
    }
    setTimestamp(timestamp) {
        this.timestamp = new Date(timestamp).toISOString();
        return this;
    }
    setColor(color, g, b) {
        if (typeof color === 'number' && g === undefined && b === undefined) {
            this.color = color;
        } else if (typeof color === 'string' && color.toLowerCase() === 'random') {
            this.color = ColorUtil.resolveHex(ColorUtil.randomHex());
        } else if (typeof color === 'string' && color.startsWith('#')) {
            this.color = ColorUtil.resolveHex(color);
        } else if (typeof color === 'number' && g !== undefined && b !== undefined) {
            this.color = ColorUtil.resolveRGB([
                color,
                g,
                b
            ]);
        } else if (typeof color === 'string') {
            this.color = ColorUtil.resolveColor(color);
        } else throw new Error('Invalid Embed Color. Must be RGB, Hex (string or number), valid color name or a valid CSS color.');
        return this;
    }
    setFooter(footer, icon) {
        this.footer = typeof footer === 'string' ? {
            text: footer,
            icon_url: icon
        } : footer;
        return this;
    }
    /** Set Image of the Embed */ setImage(image) {
        this.image = typeof image === 'string' ? {
            url: image
        } : image;
        return this;
    }
    /** Set Thumbnail Image of the Embed */ setThumbnail(thumbnail) {
        this.thumbnail = typeof thumbnail === 'string' ? {
            url: thumbnail
        } : thumbnail;
        return this;
    }
    /** Set Embed Video */ setVideo(video) {
        this.video = typeof video === 'string' ? {
            url: video
        } : video;
        return this;
    }
    setProvider(provider, url) {
        this.provider = typeof provider === 'string' ? {
            name: provider,
            url
        } : provider;
        return this;
    }
    setAuthor(author, image) {
        this.author = typeof author === 'string' ? {
            name: author,
            icon_url: image
        } : author;
        return this;
    }
    setFields(fields) {
        this.fields = fields;
        return this;
    }
    addField(name, value, inline) {
        if (typeof name !== 'object' && value === undefined) throw new Error('field value is required');
        const field = typeof name === 'object' ? name : {
            name,
            value: value,
            inline
        };
        if (this.fields === undefined) {
            this.fields = [
                field
            ];
        } else {
            this.fields.push(field);
        }
        return this;
    }
    /** Adds multiple fields to the Embed */ addFields(...fields) {
        for (const field of fields){
            this.addField(field);
        }
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvaGFybW9ueUB2Mi45LjAvc3JjL3N0cnVjdHVyZXMvZW1iZWQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1xuICBFbWJlZEF1dGhvcixcbiAgRW1iZWRGaWVsZCxcbiAgRW1iZWRGb290ZXIsXG4gIEVtYmVkSW1hZ2UsXG4gIEVtYmVkUGF5bG9hZCxcbiAgRW1iZWRQcm92aWRlcixcbiAgRW1iZWRUaHVtYm5haWwsXG4gIEVtYmVkVHlwZXMsXG4gIEVtYmVkVmlkZW9cbn0gZnJvbSAnLi4vdHlwZXMvY2hhbm5lbC50cydcbmltcG9ydCB7IENvbG9ycywgQ29sb3JVdGlsIH0gZnJvbSAnLi4vdXRpbHMvY29sb3J1dGlsLnRzJ1xuaW1wb3J0IHR5cGUgeyBNZXNzYWdlQXR0YWNobWVudCB9IGZyb20gJy4vbWVzc2FnZS50cydcblxuLyoqIE1lc3NhZ2UgRW1iZWQgT2JqZWN0ICovXG5leHBvcnQgY2xhc3MgRW1iZWQge1xuICB0aXRsZT86IHN0cmluZ1xuICB0eXBlPzogRW1iZWRUeXBlc1xuICBkZXNjcmlwdGlvbj86IHN0cmluZ1xuICB1cmw/OiBzdHJpbmdcbiAgdGltZXN0YW1wPzogc3RyaW5nXG4gIGNvbG9yPzogbnVtYmVyXG4gIGZvb3Rlcj86IEVtYmVkRm9vdGVyXG4gIGltYWdlPzogRW1iZWRJbWFnZVxuICB0aHVtYm5haWw/OiBFbWJlZFRodW1ibmFpbFxuICB2aWRlbz86IEVtYmVkVmlkZW9cbiAgcHJvdmlkZXI/OiBFbWJlZFByb3ZpZGVyXG4gIGF1dGhvcj86IEVtYmVkQXV0aG9yXG4gIGZpZWxkcz86IEVtYmVkRmllbGRbXVxuICBmaWxlczogTWVzc2FnZUF0dGFjaG1lbnRbXSA9IFtdXG5cbiAgc3RhdGljIE1BWF9USVRMRV9MRU5HVEggPSAyNTZcbiAgc3RhdGljIE1BWF9ERVNDUklQVElPTl9MRU5HVEggPSA0MDk2XG4gIHN0YXRpYyBNQVhfRklFTERfTkFNRV9MRU5HVEggPSAyNTZcbiAgc3RhdGljIE1BWF9GSUVMRF9WQUxVRV9MRU5HVEggPSAxMDI0XG4gIHN0YXRpYyBNQVhfRklFTERTX0xFTkdUSCA9IDI1XG4gIHN0YXRpYyBNQVhfRk9PVEVSX1RFWFRfTEVOR1RIID0gMjA0OFxuICBzdGF0aWMgTUFYX0FVVEhPUl9OQU1FX0xFTkdUSCA9IDI1NlxuICBzdGF0aWMgTUFYX0VNQkVEX0xFTkdUSCA9IDYwMDBcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogRW1iZWRQYXlsb2FkKSB7XG4gICAgdGhpcy50aXRsZSA9IGRhdGE/LnRpdGxlXG4gICAgdGhpcy50eXBlID0gZGF0YT8udHlwZVxuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkYXRhPy5kZXNjcmlwdGlvblxuICAgIHRoaXMudXJsID0gZGF0YT8udXJsXG4gICAgdGhpcy50aW1lc3RhbXAgPSBkYXRhPy50aW1lc3RhbXBcbiAgICB0aGlzLmNvbG9yID0gZGF0YT8uY29sb3JcbiAgICB0aGlzLmZvb3RlciA9IGRhdGE/LmZvb3RlclxuICAgIHRoaXMuaW1hZ2UgPSBkYXRhPy5pbWFnZVxuICAgIHRoaXMudGh1bWJuYWlsID0gZGF0YT8udGh1bWJuYWlsXG4gICAgdGhpcy52aWRlbyA9IGRhdGE/LnZpZGVvXG4gICAgdGhpcy5wcm92aWRlciA9IGRhdGE/LnByb3ZpZGVyXG4gICAgdGhpcy5hdXRob3IgPSBkYXRhPy5hdXRob3JcbiAgICB0aGlzLmZpZWxkcyA9IGRhdGE/LmZpZWxkc1xuICB9XG5cbiAgLyoqIENvbnZlcnQgRW1iZWQgT2JqZWN0IHRvIEVtYmVkIFBheWxvYWQgSlNPTiAqL1xuICB0b0pTT04oKTogRW1iZWRQYXlsb2FkIHtcbiAgICBsZXQgdG90YWwgPSAwXG4gICAgaWYgKFxuICAgICAgdGhpcy50aXRsZT8ubGVuZ3RoICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIHRoaXMudGl0bGU/Lmxlbmd0aCA+IEVtYmVkLk1BWF9USVRMRV9MRU5HVEhcbiAgICApIHtcbiAgICAgIHRvdGFsICs9IE51bWJlcih0aGlzLnRpdGxlLmxlbmd0aClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEVtYmVkIHRpdGxlIGNhbm5vdCBleGNlZWQgJHtFbWJlZC5NQVhfVElUTEVfTEVOR1RIfSBjaGFyYWN0ZXJzLmBcbiAgICAgIClcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLmRlc2NyaXB0aW9uPy5sZW5ndGggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgdGhpcy5kZXNjcmlwdGlvbj8ubGVuZ3RoID4gRW1iZWQuTUFYX0RFU0NSSVBUSU9OX0xFTkdUSFxuICAgICkge1xuICAgICAgdG90YWwgKz0gTnVtYmVyKHRoaXMuZGVzY3JpcHRpb24ubGVuZ3RoKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRW1iZWQgZGVzY3JpcHRpb24gY2Fubm90IGV4Y2VlZCAke0VtYmVkLk1BWF9ERVNDUklQVElPTl9MRU5HVEh9IGNoYXJhY3RlcnMuYFxuICAgICAgKVxuICAgIH1cblxuICAgIGlmICh0aGlzLmZpZWxkcz8ubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuZmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgIGlmIChmaWVsZC5uYW1lLmxlbmd0aCA+IEVtYmVkLk1BWF9GSUVMRF9OQU1FX0xFTkdUSCkge1xuICAgICAgICAgIHRvdGFsICs9IE51bWJlcihmaWVsZC5uYW1lLmxlbmd0aClcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgRW1iZWQgZmllbGQgbmFtZSBjYW5ub3QgZXhjZWVkICR7RW1iZWQuTUFYX0ZJRUxEX05BTUVfTEVOR1RIfSBjaGFyYWN0ZXJzLmBcbiAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmllbGQudmFsdWUubGVuZ3RoID4gRW1iZWQuTUFYX0ZJRUxEX1ZBTFVFX0xFTkdUSCkge1xuICAgICAgICAgIHRvdGFsICs9IE51bWJlcihmaWVsZC52YWx1ZS5sZW5ndGgpXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgYEVtYmVkIGZpZWxkIHZhbHVlIGNhbm5vdCBleGNlZWQgJHtFbWJlZC5NQVhfRklFTERfVkFMVUVfTEVOR1RIfSBjaGFyYWN0ZXJzLmBcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBpZiAodGhpcy5maWVsZHMubGVuZ3RoID4gRW1iZWQuTUFYX0ZJRUxEU19MRU5HVEgpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRW1iZWQgZmllbGRzIGNhbm5vdCBleGNlZWQgMjUgZmllbGQgb2JqZWN0cy4nKVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIHRoaXMuZm9vdGVyPy50ZXh0Py5sZW5ndGggIT09IHVuZGVmaW5lZCAmJlxuICAgICAgdGhpcy5mb290ZXI/LnRleHQ/Lmxlbmd0aCA+IEVtYmVkLk1BWF9GT09URVJfVEVYVF9MRU5HVEhcbiAgICApIHtcbiAgICAgIHRvdGFsICs9IE51bWJlcih0aGlzLmZvb3Rlcj8udGV4dD8ubGVuZ3RoKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRW1iZWQgZm9vdGVyIHRleHQgY2Fubm90IGV4Y2VlZCAke0VtYmVkLk1BWF9GT09URVJfVEVYVF9MRU5HVEh9LmBcbiAgICAgIClcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLmF1dGhvcj8ubmFtZT8ubGVuZ3RoICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIHRoaXMuYXV0aG9yPy5uYW1lPy5sZW5ndGggPiBFbWJlZC5NQVhfQVVUSE9SX05BTUVfTEVOR1RIXG4gICAgKSB7XG4gICAgICB0b3RhbCArPSBOdW1iZXIodGhpcy5hdXRob3I/Lm5hbWU/Lmxlbmd0aClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEVtYmVkIGF1dGhvciBuYW1lIGNhbm5vdCBleGNlZWQgJHtFbWJlZC5NQVhfQVVUSE9SX05BTUVfTEVOR1RIfS5gXG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKHRvdGFsID4gRW1iZWQuTUFYX0VNQkVEX0xFTkdUSClcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYEVtYmVkIGNoYXJhY3RlcnMgY2Fubm90IGV4Y2VlZCAke0VtYmVkLk1BWF9FTUJFRF9MRU5HVEh9IGNoYXJhY3RlcnMgaW4gdG90YWwuYFxuICAgICAgKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRpdGxlOiB0aGlzLnRpdGxlLFxuICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICB1cmw6IHRoaXMudXJsLFxuICAgICAgdGltZXN0YW1wOiB0aGlzLnRpbWVzdGFtcCxcbiAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgZm9vdGVyOiB0aGlzLmZvb3RlcixcbiAgICAgIGltYWdlOiB0aGlzLmltYWdlLFxuICAgICAgdGh1bWJuYWlsOiB0aGlzLnRodW1ibmFpbCxcbiAgICAgIHZpZGVvOiB0aGlzLnZpZGVvLFxuICAgICAgcHJvdmlkZXI6IHRoaXMucHJvdmlkZXIsXG4gICAgICBhdXRob3I6IHRoaXMuYXV0aG9yLFxuICAgICAgZmllbGRzOiB0aGlzLmZpZWxkc1xuICAgIH1cbiAgfVxuXG4gIC8qKiBTZXQgVGl0bGUgb2YgdGhlIEVtYmVkICovXG4gIHNldFRpdGxlKHRpdGxlOiBzdHJpbmcpOiBFbWJlZCB7XG4gICAgdGhpcy50aXRsZSA9IHRpdGxlXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKiBTZXQgRW1iZWQgZGVzY3JpcHRpb24gKi9cbiAgc2V0RGVzY3JpcHRpb24oZGVzY3JpcHRpb246IHN0cmluZyk6IEVtYmVkIHtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb25cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgYXR0YWNoKC4uLmZpbGVzOiBNZXNzYWdlQXR0YWNobWVudFtdKTogRW1iZWQge1xuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgICAgdGhpcy5maWxlcy5wdXNoKGZpbGUpXG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKiogU2V0IEVtYmVkIFR5cGUgKi9cbiAgc2V0VHlwZSh0eXBlOiBFbWJlZFR5cGVzKTogRW1iZWQge1xuICAgIHRoaXMudHlwZSA9IHR5cGVcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqIFNldCBVUkwgb2YgdGhlIEVtYmVkICovXG4gIHNldFVSTCh1cmw6IHN0cmluZyB8IFVSTCk6IEVtYmVkIHtcbiAgICB0aGlzLnVybCA9IHR5cGVvZiB1cmwgPT09ICdvYmplY3QnID8gdXJsLnRvU3RyaW5nKCkgOiB1cmxcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqIFNldCBUaW1lc3RhbXAgb2YgdGhlIEVtYmVkICovXG4gIHNldFRpbWVzdGFtcCh0aW1lU3RyaW5nOiBzdHJpbmcpOiBFbWJlZFxuICBzZXRUaW1lc3RhbXAodW5peFRpbWVzdGFtcDogbnVtYmVyKTogRW1iZWRcbiAgc2V0VGltZXN0YW1wKGRhdGVPYmplY3Q6IERhdGUpOiBFbWJlZFxuICBzZXRUaW1lc3RhbXAodGltZXN0YW1wOiBzdHJpbmcgfCBEYXRlIHwgbnVtYmVyKTogRW1iZWQge1xuICAgIHRoaXMudGltZXN0YW1wID0gbmV3IERhdGUodGltZXN0YW1wKS50b0lTT1N0cmluZygpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKiBTZXQgQ29sb3Igb2YgdGhlIEVtYmVkICovXG4gIHNldENvbG9yKGhleEludDogbnVtYmVyKTogRW1iZWRcbiAgc2V0Q29sb3IocjogbnVtYmVyLCBnOiBudW1iZXIsIGI6IG51bWJlcik6IEVtYmVkXG4gIHNldENvbG9yKHJhbmRvbTogJ3JhbmRvbScpOiBFbWJlZFxuICBzZXRDb2xvcihoZXhTdHI6IHN0cmluZyk6IEVtYmVkXG4gIHNldENvbG9yKG5hbWVkQ29sb3I6IGtleW9mIENvbG9ycyk6IEVtYmVkXG4gIHNldENvbG9yKFxuICAgIGNvbG9yOiBudW1iZXIgfCAncmFuZG9tJyB8IHN0cmluZyB8IGtleW9mIENvbG9ycyxcbiAgICBnPzogbnVtYmVyLFxuICAgIGI/OiBudW1iZXJcbiAgKTogRW1iZWQge1xuICAgIGlmICh0eXBlb2YgY29sb3IgPT09ICdudW1iZXInICYmIGcgPT09IHVuZGVmaW5lZCAmJiBiID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuY29sb3IgPSBjb2xvclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbG9yID09PSAnc3RyaW5nJyAmJiBjb2xvci50b0xvd2VyQ2FzZSgpID09PSAncmFuZG9tJykge1xuICAgICAgdGhpcy5jb2xvciA9IENvbG9yVXRpbC5yZXNvbHZlSGV4KENvbG9yVXRpbC5yYW5kb21IZXgoKSlcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycgJiYgY29sb3Iuc3RhcnRzV2l0aCgnIycpKSB7XG4gICAgICB0aGlzLmNvbG9yID0gQ29sb3JVdGlsLnJlc29sdmVIZXgoY29sb3IpXG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHR5cGVvZiBjb2xvciA9PT0gJ251bWJlcicgJiZcbiAgICAgIGcgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgYiAhPT0gdW5kZWZpbmVkXG4gICAgKSB7XG4gICAgICB0aGlzLmNvbG9yID0gQ29sb3JVdGlsLnJlc29sdmVSR0IoW2NvbG9yLCBnLCBiXSlcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMuY29sb3IgPSBDb2xvclV0aWwucmVzb2x2ZUNvbG9yKGNvbG9yIGFzIGtleW9mIENvbG9ycylcbiAgICB9IGVsc2VcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0ludmFsaWQgRW1iZWQgQ29sb3IuIE11c3QgYmUgUkdCLCBIZXggKHN0cmluZyBvciBudW1iZXIpLCB2YWxpZCBjb2xvciBuYW1lIG9yIGEgdmFsaWQgQ1NTIGNvbG9yLidcbiAgICAgIClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqIFNldCBGb290ZXIgb2YgdGhlIEVtYmVkICovXG4gIHNldEZvb3Rlcih0ZXh0OiBzdHJpbmcsIGljb24/OiBzdHJpbmcpOiBFbWJlZFxuICBzZXRGb290ZXIoZm9vdGVyOiBFbWJlZEZvb3Rlcik6IEVtYmVkXG4gIHNldEZvb3Rlcihmb290ZXI6IEVtYmVkRm9vdGVyIHwgc3RyaW5nLCBpY29uPzogc3RyaW5nKTogRW1iZWQge1xuICAgIHRoaXMuZm9vdGVyID1cbiAgICAgIHR5cGVvZiBmb290ZXIgPT09ICdzdHJpbmcnID8geyB0ZXh0OiBmb290ZXIsIGljb25fdXJsOiBpY29uIH0gOiBmb290ZXJcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqIFNldCBJbWFnZSBvZiB0aGUgRW1iZWQgKi9cbiAgc2V0SW1hZ2UoaW1hZ2U6IEVtYmVkSW1hZ2UgfCBzdHJpbmcpOiBFbWJlZCB7XG4gICAgdGhpcy5pbWFnZSA9IHR5cGVvZiBpbWFnZSA9PT0gJ3N0cmluZycgPyB7IHVybDogaW1hZ2UgfSA6IGltYWdlXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKiBTZXQgVGh1bWJuYWlsIEltYWdlIG9mIHRoZSBFbWJlZCAqL1xuICBzZXRUaHVtYm5haWwodGh1bWJuYWlsOiBFbWJlZFRodW1ibmFpbCB8IHN0cmluZyk6IEVtYmVkIHtcbiAgICB0aGlzLnRodW1ibmFpbCA9XG4gICAgICB0eXBlb2YgdGh1bWJuYWlsID09PSAnc3RyaW5nJyA/IHsgdXJsOiB0aHVtYm5haWwgfSA6IHRodW1ibmFpbFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKiogU2V0IEVtYmVkIFZpZGVvICovXG4gIHNldFZpZGVvKHZpZGVvOiBFbWJlZFZpZGVvIHwgc3RyaW5nKTogRW1iZWQge1xuICAgIHRoaXMudmlkZW8gPSB0eXBlb2YgdmlkZW8gPT09ICdzdHJpbmcnID8geyB1cmw6IHZpZGVvIH0gOiB2aWRlb1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKiogU2V0IFByb3ZpZGVyIG9mIHRoZSBFbWJlZCAqL1xuICBzZXRQcm92aWRlcihuYW1lOiBzdHJpbmcsIHVybD86IHN0cmluZyk6IEVtYmVkXG4gIHNldFByb3ZpZGVyKHByb3ZpZGVyOiBFbWJlZFByb3ZpZGVyKTogRW1iZWRcbiAgc2V0UHJvdmlkZXIocHJvdmlkZXI6IEVtYmVkUHJvdmlkZXIgfCBzdHJpbmcsIHVybD86IHN0cmluZyk6IEVtYmVkIHtcbiAgICB0aGlzLnByb3ZpZGVyID1cbiAgICAgIHR5cGVvZiBwcm92aWRlciA9PT0gJ3N0cmluZycgPyB7IG5hbWU6IHByb3ZpZGVyLCB1cmwgfSA6IHByb3ZpZGVyXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKiBTZXQgQXV0aG9yIG9mIHRoZSBFbWJlZCAqL1xuICBzZXRBdXRob3IoYXV0aG9yOiBFbWJlZEF1dGhvcik6IEVtYmVkXG4gIHNldEF1dGhvcihuYW1lOiBzdHJpbmcsIGltYWdlPzogc3RyaW5nKTogRW1iZWRcbiAgc2V0QXV0aG9yKGF1dGhvcjogRW1iZWRBdXRob3IgfCBzdHJpbmcsIGltYWdlPzogc3RyaW5nKTogRW1iZWQge1xuICAgIHRoaXMuYXV0aG9yID1cbiAgICAgIHR5cGVvZiBhdXRob3IgPT09ICdzdHJpbmcnID8geyBuYW1lOiBhdXRob3IsIGljb25fdXJsOiBpbWFnZSB9IDogYXV0aG9yXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHNldEZpZWxkcyhmaWVsZHM6IEVtYmVkRmllbGRbXSk6IEVtYmVkIHtcbiAgICB0aGlzLmZpZWxkcyA9IGZpZWxkc1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKiogQWRkcyBhIEZpZWxkIHRvIHRoZSBFbWJlZCAqL1xuICBhZGRGaWVsZChmaWVsZDogRW1iZWRGaWVsZCk6IEVtYmVkXG4gIGFkZEZpZWxkKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZywgaW5saW5lPzogYm9vbGVhbik6IEVtYmVkXG4gIGFkZEZpZWxkKG5hbWU6IHN0cmluZyB8IEVtYmVkRmllbGQsIHZhbHVlPzogc3RyaW5nLCBpbmxpbmU/OiBib29sZWFuKTogRW1iZWQge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ29iamVjdCcgJiYgdmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgIHRocm93IG5ldyBFcnJvcignZmllbGQgdmFsdWUgaXMgcmVxdWlyZWQnKVxuICAgIGNvbnN0IGZpZWxkOiBFbWJlZEZpZWxkID1cbiAgICAgIHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JyA/IG5hbWUgOiB7IG5hbWUsIHZhbHVlOiB2YWx1ZSBhcyBzdHJpbmcsIGlubGluZSB9XG5cbiAgICBpZiAodGhpcy5maWVsZHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5maWVsZHMgPSBbZmllbGRdXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZmllbGRzLnB1c2goZmllbGQpXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKiBBZGRzIG11bHRpcGxlIGZpZWxkcyB0byB0aGUgRW1iZWQgKi9cbiAgYWRkRmllbGRzKC4uLmZpZWxkczogRW1iZWRGaWVsZFtdKTogRW1iZWQge1xuICAgIGZvciAoY29uc3QgZmllbGQgb2YgZmllbGRzKSB7XG4gICAgICB0aGlzLmFkZEZpZWxkKGZpZWxkKVxuICAgIH1cbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBV0EsU0FBaUIsU0FBUyxRQUFRLHdCQUF1QjtBQUd6RCx5QkFBeUIsR0FDekIsT0FBTyxNQUFNO0lBQ1gsTUFBYztJQUNkLEtBQWlCO0lBQ2pCLFlBQW9CO0lBQ3BCLElBQVk7SUFDWixVQUFrQjtJQUNsQixNQUFjO0lBQ2QsT0FBb0I7SUFDcEIsTUFBa0I7SUFDbEIsVUFBMEI7SUFDMUIsTUFBa0I7SUFDbEIsU0FBd0I7SUFDeEIsT0FBb0I7SUFDcEIsT0FBcUI7SUFDckIsUUFBNkIsRUFBRSxDQUFBO0lBRS9CLE9BQU8sbUJBQW1CLElBQUc7SUFDN0IsT0FBTyx5QkFBeUIsS0FBSTtJQUNwQyxPQUFPLHdCQUF3QixJQUFH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