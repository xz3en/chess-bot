import { Collection } from '../../utils/collection.ts';
export const messageDeleteBulk = async (gateway, d)=>{
    const channel = await gateway.client.channels.get(d.channel_id);
    // Fetch the channel if not cached
    // if (channel === undefined)
    //   // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
    //   channel = (await gateway.client.channels.fetch(
    //     d.channel_id
    //   )) as GuildTextBasedChannel
    if (channel === undefined) return;
    const messages = new Collection();
    const uncached = new Set();
    for (const id of d.ids){
        const message = await channel.messages.get(id);
        if (message === undefined) uncached.add(id);
        else {
            messages.set(id, message);
            await channel.messages._delete(id);
        }
    }
    gateway.client.emit('messageDeleteBulk', channel, messages, uncached);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvaGFybW9ueUB2Mi45LjAvc3JjL2dhdGV3YXkvaGFuZGxlcnMvbWVzc2FnZURlbGV0ZUJ1bGsudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBNZXNzYWdlIH0gZnJvbSAnLi4vLi4vc3RydWN0dXJlcy9tZXNzYWdlLnRzJ1xuaW1wb3J0IHR5cGUgeyBHdWlsZFRleHRCYXNlZENoYW5uZWwgfSBmcm9tICcuLi8uLi9zdHJ1Y3R1cmVzL2d1aWxkVGV4dENoYW5uZWwudHMnXG5pbXBvcnQgdHlwZSB7IE1lc3NhZ2VEZWxldGVCdWxrUGF5bG9hZCB9IGZyb20gJy4uLy4uL3R5cGVzL2dhdGV3YXkudHMnXG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSAnLi4vLi4vdXRpbHMvY29sbGVjdGlvbi50cydcbmltcG9ydCB0eXBlIHsgR2F0ZXdheSwgR2F0ZXdheUV2ZW50SGFuZGxlciB9IGZyb20gJy4uL21vZC50cydcblxuZXhwb3J0IGNvbnN0IG1lc3NhZ2VEZWxldGVCdWxrOiBHYXRld2F5RXZlbnRIYW5kbGVyID0gYXN5bmMgKFxuICBnYXRld2F5OiBHYXRld2F5LFxuICBkOiBNZXNzYWdlRGVsZXRlQnVsa1BheWxvYWRcbikgPT4ge1xuICBjb25zdCBjaGFubmVsID0gYXdhaXQgZ2F0ZXdheS5jbGllbnQuY2hhbm5lbHMuZ2V0PEd1aWxkVGV4dEJhc2VkQ2hhbm5lbD4oXG4gICAgZC5jaGFubmVsX2lkXG4gIClcbiAgLy8gRmV0Y2ggdGhlIGNoYW5uZWwgaWYgbm90IGNhY2hlZFxuICAvLyBpZiAoY2hhbm5lbCA9PT0gdW5kZWZpbmVkKVxuICAvLyAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktdHlwZS1hc3NlcnRpb25cbiAgLy8gICBjaGFubmVsID0gKGF3YWl0IGdhdGV3YXkuY2xpZW50LmNoYW5uZWxzLmZldGNoKFxuICAvLyAgICAgZC5jaGFubmVsX2lkXG4gIC8vICAgKSkgYXMgR3VpbGRUZXh0QmFzZWRDaGFubmVsXG4gIGlmIChjaGFubmVsID09PSB1bmRlZmluZWQpIHJldHVyblxuICBjb25zdCBtZXNzYWdlcyA9IG5ldyBDb2xsZWN0aW9uPHN0cmluZywgTWVzc2FnZT4oKVxuICBjb25zdCB1bmNhY2hlZCA9IG5ldyBTZXQ8c3RyaW5nPigpXG4gIGZvciAoY29uc3QgaWQgb2YgZC5pZHMpIHtcbiAgICBjb25zdCBtZXNzYWdlID0gYXdhaXQgY2hhbm5lbC5tZXNzYWdlcy5nZXQoaWQpXG4gICAgaWYgKG1lc3NhZ2UgPT09IHVuZGVmaW5lZCkgdW5jYWNoZWQuYWRkKGlkKVxuICAgIGVsc2Uge1xuICAgICAgbWVzc2FnZXMuc2V0KGlkLCBtZXNzYWdlKVxuICAgICAgYXdhaXQgY2hhbm5lbC5tZXNzYWdlcy5fZGVsZXRlKGlkKVxuICAgIH1cbiAgfVxuXG4gIGdhdGV3YXkuY2xpZW50LmVtaXQoJ21lc3NhZ2VEZWxldGVCdWxrJywgY2hhbm5lbCwgbWVzc2FnZXMsIHVuY2FjaGVkKVxufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLFNBQVMsVUFBVSxRQUFRLDRCQUEyQjtBQUd0RCxPQUFPLE1BQU0sb0JBQXlDLE9BQ3BELFNBQ0EsSUFDRztJQUNILE1BQU0sVUFBVSxNQUFNLFFBQVEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQy9DLEVBQUUsVUFBVTtJQUVkLGtDQUFrQztJQUNsQyw2QkFBNkI7SUFDN0IsaUZBQWlGO0lBQ2pGLG9EQUFvRDtJQUNwRCxtQkFBbUI7SUFDbkIsZ0NBQWdDO0lBQ2hDLElBQUksWUFBWSxXQUFXO0lBQzNCLE1BQU0sV0FBVyxJQUFJO0lBQ3JCLE1BQU0sV0FBVyxJQUFJO0lBQ3JCLEtBQUssTUFBTSxNQUFNLEVBQUUsR0FBRyxDQUFFO1FBQ3RCLE1BQU0sVUFBVSxNQUFNLFFBQVEsUUFBUSxDQUFDLEdBQUcsQ0FBQztRQUMzQyxJQUFJLFlBQVksV0FBVyxTQUFTLEdBQUcsQ0FBQzthQUNuQztZQUNILFNBQVMsR0FBRyxDQUFDLElBQUk7WUFDakIsTUFBTSxRQUFRLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFDakMsQ0FBQztJQUNIO0lBRUEsUUFBUSxNQUFNLENBQUMsSUFBSSxDQUFDLHFCQUFxQixTQUFTLFVBQVU7QUFDOUQsRUFBQyJ9