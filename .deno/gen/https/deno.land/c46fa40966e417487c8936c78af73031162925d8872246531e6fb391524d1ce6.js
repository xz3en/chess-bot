import { UserFlagsManager } from '../utils/userFlags.ts';
import { SnowflakeBase } from './base.ts';
import { ImageURL } from './cdn.ts';
import { DEFAULT_USER_AVATAR, USER_AVATAR } from '../types/endpoint.ts';
export class User extends SnowflakeBase {
    id;
    username;
    discriminator;
    avatar;
    bot;
    system;
    mfaEnabled;
    locale;
    verified;
    email;
    flags;
    /**
   * Nitro type of the User.
   *
   * 0 = No Nitro
   * 1 = Classic Nitro
   * 2 = Regular Nitro
   */ premiumType;
    publicFlags;
    get tag() {
        return `${this.username}#${this.discriminator}`;
    }
    get nickMention() {
        return `<@!${this.id}>`;
    }
    get mention() {
        return `<@${this.id}>`;
    }
    avatarURL(format = 'png', size = 512) {
        return this.avatar != null ? `${ImageURL(USER_AVATAR(this.id, this.avatar), format, size)}` : this.defaultAvatarURL;
    }
    get defaultAvatarURL() {
        return `${DEFAULT_USER_AVATAR(String(Number(this.discriminator) % 5))}.png`;
    }
    constructor(client, data){
        super(client, data);
        this.id = data.id;
        this.readFromData(data);
    }
    readFromData(data) {
        this.username = data.username ?? this.username;
        this.discriminator = data.discriminator ?? this.discriminator;
        this.avatar = data.avatar ?? this.avatar;
        this.bot = data.bot ?? this.bot;
        this.system = data.system ?? this.system;
        this.mfaEnabled = data.mfa_enabled ?? this.mfaEnabled;
        this.locale = data.locale ?? this.locale;
        this.verified = data.verified ?? this.verified;
        this.email = data.email ?? this.email;
        this.flags = data.flags !== undefined ? new UserFlagsManager(data.flags) : this.flags;
        this.premiumType = data.premium_type ?? this.premiumType;
        this.publicFlags = data.public_flags !== undefined ? new UserFlagsManager(data.public_flags) : this.publicFlags;
    }
    toString() {
        return this.mention;
    }
    async createDM() {
        return this.client.createDM(this);
    }
    async resolveDM() {
        const dmID = await this.client.channels.getUserDM(this.id);
        const dm = (dmID !== undefined ? await this.client.channels.get(dmID) : undefined) ?? await this.createDM().then((chan)=>this.client.channels.setUserDM(this.id, chan.id).then(()=>chan));
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
        return dm;
    }
    async send(content, options) {
        const dm = await this.resolveDM();
        return dm.send(content, options);
    }
}
export class UserResolvable extends SnowflakeBase {
    constructor(client, id){
        super(client);
        this.id = id;
    }
    async get() {
        return this.client.users.get(this.id);
    }
    async fetch() {
        return this.client.users.fetch(this.id);
    }
    async resolve() {
        return this.client.users.resolve(this.id);
    }
    id;
}
//# sourceMappingURL=data:application/json;base64,