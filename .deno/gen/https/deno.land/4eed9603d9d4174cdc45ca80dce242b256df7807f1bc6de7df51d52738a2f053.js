import { ApplicationCommandOptionType } from '../types/applicationCommand.ts';
import { Interaction } from './interactions.ts';
export class ApplicationCommandInteraction extends Interaction {
    /** Data sent with Interaction. Only applies to Application Command */ data;
    /** Resolved data for Snowflakes in Slash Command Arguments */ resolved;
    constructor(client, data, others){
        super(client, data, others);
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
        this.data = data.data;
        this.resolved = others.resolved;
    }
    /** Name of the Command Used (may change with future additions to Interactions!) */ get name() {
        return this.data.name;
    }
    /** Application Command options. Sub Command (and Group) nesting is stripped off for this */ get options() {
        let options = this.data.options ?? [];
        while(options.length === 1 && (options[0].type === ApplicationCommandOptionType.SUB_COMMAND_GROUP || options[0].type === ApplicationCommandOptionType.SUB_COMMAND)){
            options = options[0].options ?? [];
        }
        return options;
    }
    /** Gets sub command name from options */ get subCommand() {
        if (this.data.options?.[0]?.type === ApplicationCommandOptionType.SUB_COMMAND) return this.data.options[0].name;
        else if (this.data.options?.[0]?.type === ApplicationCommandOptionType.SUB_COMMAND_GROUP && this.data.options?.[0]?.options?.[0]?.type === ApplicationCommandOptionType.SUB_COMMAND) return this.data.options[0].options[0].name;
    }
    /** Gets sub command group name from options */ get subCommandGroup() {
        if (this.data.options?.[0]?.type === ApplicationCommandOptionType.SUB_COMMAND_GROUP) return this.data.options[0].name;
    }
    /** Target ID. Only valid for Context Menu commands */ get targetID() {
        return this.data.target_id;
    }
    /** Target User object. Only valid for User Context Menu commands */ get targetUser() {
        return this.targetID !== undefined ? this.resolved.users[this.targetID] : undefined;
    }
    /** Target Message object. Only valid for Message Context Menu commands */ get targetMessage() {
        return this.targetID !== undefined ? this.resolved.messages[this.targetID] : undefined;
    }
    /** Get an option by name */ option(name) {
        const options = this.options;
        const op = options.find((e)=>e.name === name);
        if (op === undefined || op.value === undefined) return undefined;
        if (op.type === ApplicationCommandOptionType.USER) {
            const u = this.resolved.users[op.value];
            if (this.resolved.members[op.value] !== undefined) u.member = this.resolved.members[op.value];
            return u;
        } else if (op.type === ApplicationCommandOptionType.ROLE) return this.resolved.roles[op.value];
        else if (op.type === ApplicationCommandOptionType.CHANNEL) return this.resolved.channels[op.value];
        else return op.value;
    }
}
/**
 * Deprecated, use ApplicationCommandInteraction instead
 * @deprecated
 */ export { ApplicationCommandInteraction as SlashCommandInteraction };
//# sourceMappingURL=data:application/json;base64,