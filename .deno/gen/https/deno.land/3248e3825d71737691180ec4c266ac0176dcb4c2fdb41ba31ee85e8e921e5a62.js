import { VoiceState } from '../structures/voiceState.ts';
import { BaseManager } from './base.ts';
export class GuildVoiceStatesManager extends BaseManager {
    guild;
    constructor(client, guild){
        super(client, `vs:${guild.id}`, VoiceState);
        this.guild = guild;
    }
    /** Get Client's Voice State in the Guild */ async me() {
        const member = await this.guild.me();
        return await this.get(member.id);
    }
    /** Get a Voice State by User ID */ async get(key) {
        const raw = await this._get(key);
        if (raw === undefined) return;
        const guild = raw.guild_id === undefined ? this.guild : await this.client.guilds.get(raw.guild_id);
        return new VoiceState(this.client, raw, {
            user: await this.client.users.get(raw.user_id),
            channel: raw.channel_id === null ? null : await this.client.channels.get(raw.channel_id),
            guild,
            member: guild === undefined ? undefined : await guild.members.get(raw.user_id)
        });
    }
    async array() {
        let arr = await this.client.cache.array(this.cacheName);
        if (arr === undefined) arr = [];
        return await Promise.all(arr.map(async (raw)=>{
            const guild = raw.guild_id === undefined ? this.guild : await this.client.guilds.get(raw.guild_id);
            return new VoiceState(this.client, raw, {
                user: await this.client.users.get(raw.user_id),
                channel: raw.channel_id === null ? null : await this.client.channels.get(raw.channel_id),
                guild,
                member: guild === undefined ? undefined : await guild.members.get(raw.user_id)
            });
        }));
    }
    async fromPayload(d) {
        for (const data of d){
            await this.set(data.user_id, data);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvaGFybW9ueUB2Mi45LjAvc3JjL21hbmFnZXJzL2d1aWxkVm9pY2VTdGF0ZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDbGllbnQgfSBmcm9tICcuLi9jbGllbnQvbW9kLnRzJ1xuaW1wb3J0IHR5cGUgeyBHdWlsZCB9IGZyb20gJy4uL3N0cnVjdHVyZXMvZ3VpbGQudHMnXG5pbXBvcnQgdHlwZSB7IFZvaWNlQ2hhbm5lbCB9IGZyb20gJy4uL3N0cnVjdHVyZXMvZ3VpbGRWb2ljZUNoYW5uZWwudHMnXG5pbXBvcnQgdHlwZSB7IFVzZXIgfSBmcm9tICcuLi9zdHJ1Y3R1cmVzL3VzZXIudHMnXG5pbXBvcnQgeyBWb2ljZVN0YXRlIH0gZnJvbSAnLi4vc3RydWN0dXJlcy92b2ljZVN0YXRlLnRzJ1xuaW1wb3J0IHR5cGUgeyBWb2ljZVN0YXRlUGF5bG9hZCB9IGZyb20gJy4uL3R5cGVzL3ZvaWNlLnRzJ1xuaW1wb3J0IHsgQmFzZU1hbmFnZXIgfSBmcm9tICcuL2Jhc2UudHMnXG5cbmV4cG9ydCBjbGFzcyBHdWlsZFZvaWNlU3RhdGVzTWFuYWdlciBleHRlbmRzIEJhc2VNYW5hZ2VyPFxuICBWb2ljZVN0YXRlUGF5bG9hZCxcbiAgVm9pY2VTdGF0ZVxuPiB7XG4gIGd1aWxkOiBHdWlsZFxuXG4gIGNvbnN0cnVjdG9yKGNsaWVudDogQ2xpZW50LCBndWlsZDogR3VpbGQpIHtcbiAgICBzdXBlcihjbGllbnQsIGB2czoke2d1aWxkLmlkfWAsIFZvaWNlU3RhdGUpXG4gICAgdGhpcy5ndWlsZCA9IGd1aWxkXG4gIH1cblxuICAvKiogR2V0IENsaWVudCdzIFZvaWNlIFN0YXRlIGluIHRoZSBHdWlsZCAqL1xuICBhc3luYyBtZSgpOiBQcm9taXNlPFZvaWNlU3RhdGUgfCB1bmRlZmluZWQ+IHtcbiAgICBjb25zdCBtZW1iZXIgPSBhd2FpdCB0aGlzLmd1aWxkLm1lKClcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXQobWVtYmVyLmlkKVxuICB9XG5cbiAgLyoqIEdldCBhIFZvaWNlIFN0YXRlIGJ5IFVzZXIgSUQgKi9cbiAgYXN5bmMgZ2V0KGtleTogc3RyaW5nKTogUHJvbWlzZTxWb2ljZVN0YXRlIHwgdW5kZWZpbmVkPiB7XG4gICAgY29uc3QgcmF3ID0gYXdhaXQgdGhpcy5fZ2V0KGtleSlcbiAgICBpZiAocmF3ID09PSB1bmRlZmluZWQpIHJldHVyblxuXG4gICAgY29uc3QgZ3VpbGQgPVxuICAgICAgcmF3Lmd1aWxkX2lkID09PSB1bmRlZmluZWRcbiAgICAgICAgPyB0aGlzLmd1aWxkXG4gICAgICAgIDogYXdhaXQgdGhpcy5jbGllbnQuZ3VpbGRzLmdldChyYXcuZ3VpbGRfaWQpXG5cbiAgICByZXR1cm4gbmV3IFZvaWNlU3RhdGUodGhpcy5jbGllbnQsIHJhdywge1xuICAgICAgdXNlcjogKGF3YWl0IHRoaXMuY2xpZW50LnVzZXJzLmdldChyYXcudXNlcl9pZCkpIGFzIHVua25vd24gYXMgVXNlcixcbiAgICAgIGNoYW5uZWw6XG4gICAgICAgIHJhdy5jaGFubmVsX2lkID09PSBudWxsXG4gICAgICAgICAgPyBudWxsXG4gICAgICAgICAgOiAoKGF3YWl0IHRoaXMuY2xpZW50LmNoYW5uZWxzLmdldDxWb2ljZUNoYW5uZWw+KFxuICAgICAgICAgICAgICByYXcuY2hhbm5lbF9pZFxuICAgICAgICAgICAgKSkgYXMgdW5rbm93biBhcyBWb2ljZUNoYW5uZWwpLFxuICAgICAgZ3VpbGQsXG4gICAgICBtZW1iZXI6XG4gICAgICAgIGd1aWxkID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBhd2FpdCBndWlsZC5tZW1iZXJzLmdldChyYXcudXNlcl9pZClcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgYXJyYXkoKTogUHJvbWlzZTxWb2ljZVN0YXRlW10+IHtcbiAgICBsZXQgYXJyID0gYXdhaXQgKHRoaXMuY2xpZW50LmNhY2hlLmFycmF5KFxuICAgICAgdGhpcy5jYWNoZU5hbWVcbiAgICApIGFzIFZvaWNlU3RhdGVQYXlsb2FkW10pXG4gICAgaWYgKGFyciA9PT0gdW5kZWZpbmVkKSBhcnIgPSBbXVxuXG4gICAgcmV0dXJuIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgYXJyLm1hcChhc3luYyAocmF3KSA9PiB7XG4gICAgICAgIGNvbnN0IGd1aWxkID1cbiAgICAgICAgICByYXcuZ3VpbGRfaWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyB0aGlzLmd1aWxkXG4gICAgICAgICAgICA6IGF3YWl0IHRoaXMuY2xpZW50Lmd1aWxkcy5nZXQocmF3Lmd1aWxkX2lkKVxuXG4gICAgICAgIHJldHVybiBuZXcgVm9pY2VTdGF0ZSh0aGlzLmNsaWVudCwgcmF3LCB7XG4gICAgICAgICAgdXNlcjogKGF3YWl0IHRoaXMuY2xpZW50LnVzZXJzLmdldChyYXcudXNlcl9pZCkpIGFzIHVua25vd24gYXMgVXNlcixcbiAgICAgICAgICBjaGFubmVsOlxuICAgICAgICAgICAgcmF3LmNoYW5uZWxfaWQgPT09IG51bGxcbiAgICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICAgIDogKChhd2FpdCB0aGlzLmNsaWVudC5jaGFubmVscy5nZXQ8Vm9pY2VDaGFubmVsPihcbiAgICAgICAgICAgICAgICAgIHJhdy5jaGFubmVsX2lkXG4gICAgICAgICAgICAgICAgKSkgYXMgdW5rbm93biBhcyBWb2ljZUNoYW5uZWwpLFxuICAgICAgICAgIGd1aWxkLFxuICAgICAgICAgIG1lbWJlcjpcbiAgICAgICAgICAgIGd1aWxkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgOiBhd2FpdCBndWlsZC5tZW1iZXJzLmdldChyYXcudXNlcl9pZClcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgKVxuICB9XG5cbiAgYXN5bmMgZnJvbVBheWxvYWQoZDogVm9pY2VTdGF0ZVBheWxvYWRbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgIGZvciAoY29uc3QgZGF0YSBvZiBkKSB7XG4gICAgICBhd2FpdCB0aGlzLnNldChkYXRhLnVzZXJfaWQsIGRhdGEpXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsU0FBUyxVQUFVLFFBQVEsOEJBQTZCO0FBRXhELFNBQVMsV0FBVyxRQUFRLFlBQVc7QUFFdkMsT0FBTyxNQUFNLGdDQUFnQztJQUkzQyxNQUFZO0lBRVosWUFBWSxNQUFjLEVBQUUsS0FBWSxDQUFFO1FBQ3hDLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRTtRQUNoQyxJQUFJLENBQUMsS0FBSyxHQUFHO0lBQ2Y7SUFFQSwwQ0FBMEMsR0FDMUMsTUFBTSxLQUFzQztRQUMxQyxNQUFNLFNBQVMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDbEMsT0FBTyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFO0lBQ2pDO0lBRUEsaUNBQWlDLEdBQ2pDLE1BQU0sSUFBSSxHQUFXLEVBQW1DO1FBQ3RELE1BQU0sTUFBTSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDNUIsSUFBSSxRQUFRLFdBQVc7UUFFdkIsTUFBTSxRQUNKLElBQUksUUFBUSxLQUFLLFlBQ2IsSUFBSSxDQUFDLEtBQUssR0FDVixNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFFBQVEsQ0FBQztRQUVoRCxPQUFPLElBQUksV0FBVyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUs7WUFDdEMsTUFBTyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLE9BQU87WUFDOUMsU0FDRSxJQUFJLFVBQVUsS0FBSyxJQUFJLEdBQ25CLElBQUksR0FDRixNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDOUIsSUFBSSxVQUFVLENBQ2M7WUFDcEM7WUFDQSxRQUNFLFVBQVUsWUFBWSxZQUFZLE1BQU0sTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDO1FBQzFFO0lBQ0Y7SUFFQSxNQUFNLFFBQStCO1FBQ25DLElBQUksTUFBTSxNQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FDdEMsSUFBSSxDQUFDLFNBQVM7UUFFaEIsSUFBSSxRQUFRLFdBQVcsTUFBTSxFQUFFO1FBRS9CLE9BQU8sTUFBTSxRQUFRLEdBQUcsQ0FDdEIsSUFBSSxHQUFHLENBQUMsT0FBTyxNQUFRO1lBQ3JCLE1BQU0sUUFDSixJQUFJLFFBQVEsS0FBSyxZQUNiLElBQUksQ0FBQyxLQUFLLEdBQ1YsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxRQUFRLENBQUM7WUFFaEQsT0FBTyxJQUFJLFdBQVcsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLO2dCQUN0QyxNQUFPLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksT0FBTztnQkFDOUMsU0FDRSxJQUFJLFVBQVUsS0FBSyxJQUFJLEdBQ25CLElBQUksR0FDRixNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FDOUIsSUFBSSxVQUFVLENBQ2M7Z0JBQ3BDO2dCQUNBLFFBQ0UsVUFBVSxZQUNOLFlBQ0EsTUFBTSxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxPQUFPLENBQUM7WUFDNUM7UUFDRjtJQUVKO0lBRUEsTUFBTSxZQUFZLENBQXNCLEVBQWlCO1FBQ3ZELEtBQUssTUFBTSxRQUFRLEVBQUc7WUFDcEIsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssT0FBTyxFQUFFO1FBQy9CO0lBQ0Y7QUFDRixDQUFDIn0=