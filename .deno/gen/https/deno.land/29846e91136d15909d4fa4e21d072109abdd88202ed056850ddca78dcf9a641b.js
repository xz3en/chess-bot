import { MessageSticker, MessageStickerPack } from '../structures/messageSticker.ts';
import { BaseManager } from './base.ts';
export class StickersManager extends BaseManager {
    constructor(client){
        super(client, `stickers`, MessageSticker);
    }
    /** Fetches list of Nitro Sticker Packs. These are not cached. */ async getStickerPacks() {
        const packsRaw = await this.client.rest.endpoints.getStickerPacks();
        const packs = [];
        for (const pack of packsRaw){
            packs.push(new MessageStickerPack(this.client, pack));
        }
        return packs;
    }
    /** Delete a Guild Sticker */ async delete(guild, id, reason) {
        id = typeof id === 'string' ? id : id.id;
        const result = await this.client.rest.endpoints.deleteGuildSticker(typeof guild === 'string' ? guild : guild.id, id, reason).then(()=>true);
        if (result === true) await this._delete(id);
        return result;
    }
    /** Fetches a Sticker */ async fetch(sticker) {
        const data = await this.client.rest.endpoints.getSticker(typeof sticker === 'string' ? sticker : sticker.id);
        if (data.guild_id !== undefined) await this.set(data.id, data);
        return new MessageSticker(this.client, data);
    }
    /** Fetches all Guild Stickers from API (and caches them) */ async fetchAll(guild) {
        const stickers = await this.client.rest.endpoints.getGuildStickers(typeof guild === 'string' ? guild : guild.id);
        const result = [];
        for (const raw of stickers){
            await this.set(raw.id, raw);
            result.push(new MessageSticker(this.client, raw));
        }
        return result;
    }
    /** Creates a new Guild Sticker */ async create(guild, options) {
        const data = await this.client.rest.endpoints.createGuildSticker(typeof guild === 'string' ? guild : guild.id, options);
        await this.set(data.id, data);
        return new MessageSticker(this.client, data);
    }
    /** Edit an existing Guild Sticker */ async edit(guild, sticker, options) {
        const id = typeof sticker === 'string' ? sticker : sticker.id;
        const data = await this.client.rest.endpoints.modifyGuildSticker(typeof guild === 'string' ? guild : guild.id, id, options);
        await this.set(data.id, data);
        return new MessageSticker(this.client, data);
    }
    async fromPayload(stickers) {
        for (const sticker of stickers){
            await this.set(sticker.id, sticker);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvaGFybW9ueUB2Mi45LjAvc3JjL21hbmFnZXJzL3N0aWNrZXJzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ2xpZW50IH0gZnJvbSAnLi4vY2xpZW50L21vZC50cydcbmltcG9ydCB0eXBlIHsgR3VpbGQgfSBmcm9tICcuLi9zdHJ1Y3R1cmVzL2d1aWxkLnRzJ1xuaW1wb3J0IHtcbiAgTWVzc2FnZVN0aWNrZXIsXG4gIE1lc3NhZ2VTdGlja2VyUGFja1xufSBmcm9tICcuLi9zdHJ1Y3R1cmVzL21lc3NhZ2VTdGlja2VyLnRzJ1xuaW1wb3J0IHR5cGUge1xuICBDcmVhdGVHdWlsZFN0aWNrZXJPcHRpb25zLFxuICBNZXNzYWdlU3RpY2tlclBheWxvYWQsXG4gIE1vZGlmeUd1aWxkU3RpY2tlck9wdGlvbnNcbn0gZnJvbSAnLi4vdHlwZXMvY2hhbm5lbC50cydcbmltcG9ydCB7IEJhc2VNYW5hZ2VyIH0gZnJvbSAnLi9iYXNlLnRzJ1xuXG5leHBvcnQgY2xhc3MgU3RpY2tlcnNNYW5hZ2VyIGV4dGVuZHMgQmFzZU1hbmFnZXI8XG4gIE1lc3NhZ2VTdGlja2VyUGF5bG9hZCxcbiAgTWVzc2FnZVN0aWNrZXJcbj4ge1xuICBjb25zdHJ1Y3RvcihjbGllbnQ6IENsaWVudCkge1xuICAgIHN1cGVyKGNsaWVudCwgYHN0aWNrZXJzYCwgTWVzc2FnZVN0aWNrZXIpXG4gIH1cblxuICAvKiogRmV0Y2hlcyBsaXN0IG9mIE5pdHJvIFN0aWNrZXIgUGFja3MuIFRoZXNlIGFyZSBub3QgY2FjaGVkLiAqL1xuICBhc3luYyBnZXRTdGlja2VyUGFja3MoKTogUHJvbWlzZTxNZXNzYWdlU3RpY2tlclBhY2tbXT4ge1xuICAgIGNvbnN0IHBhY2tzUmF3ID0gYXdhaXQgdGhpcy5jbGllbnQucmVzdC5lbmRwb2ludHMuZ2V0U3RpY2tlclBhY2tzKClcbiAgICBjb25zdCBwYWNrcyA9IFtdXG4gICAgZm9yIChjb25zdCBwYWNrIG9mIHBhY2tzUmF3KSB7XG4gICAgICBwYWNrcy5wdXNoKG5ldyBNZXNzYWdlU3RpY2tlclBhY2sodGhpcy5jbGllbnQsIHBhY2spKVxuICAgIH1cbiAgICByZXR1cm4gcGFja3NcbiAgfVxuXG4gIC8qKiBEZWxldGUgYSBHdWlsZCBTdGlja2VyICovXG4gIGFzeW5jIGRlbGV0ZShcbiAgICBndWlsZDogc3RyaW5nIHwgR3VpbGQsXG4gICAgaWQ6IHN0cmluZyB8IE1lc3NhZ2VTdGlja2VyLFxuICAgIHJlYXNvbj86IHN0cmluZ1xuICApOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBpZCA9IHR5cGVvZiBpZCA9PT0gJ3N0cmluZycgPyBpZCA6IGlkLmlkXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5jbGllbnQucmVzdC5lbmRwb2ludHNcbiAgICAgIC5kZWxldGVHdWlsZFN0aWNrZXIoXG4gICAgICAgIHR5cGVvZiBndWlsZCA9PT0gJ3N0cmluZycgPyBndWlsZCA6IGd1aWxkLmlkLFxuICAgICAgICBpZCxcbiAgICAgICAgcmVhc29uXG4gICAgICApXG4gICAgICAudGhlbigoKSA9PiB0cnVlKVxuICAgIGlmIChyZXN1bHQgPT09IHRydWUpIGF3YWl0IHRoaXMuX2RlbGV0ZShpZClcbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvKiogRmV0Y2hlcyBhIFN0aWNrZXIgKi9cbiAgYXN5bmMgZmV0Y2goc3RpY2tlcjogTWVzc2FnZVN0aWNrZXIgfCBzdHJpbmcpOiBQcm9taXNlPE1lc3NhZ2VTdGlja2VyPiB7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuY2xpZW50LnJlc3QuZW5kcG9pbnRzLmdldFN0aWNrZXIoXG4gICAgICB0eXBlb2Ygc3RpY2tlciA9PT0gJ3N0cmluZycgPyBzdGlja2VyIDogc3RpY2tlci5pZFxuICAgIClcbiAgICBpZiAoZGF0YS5ndWlsZF9pZCAhPT0gdW5kZWZpbmVkKSBhd2FpdCB0aGlzLnNldChkYXRhLmlkLCBkYXRhKVxuICAgIHJldHVybiBuZXcgTWVzc2FnZVN0aWNrZXIodGhpcy5jbGllbnQsIGRhdGEpXG4gIH1cblxuICAvKiogRmV0Y2hlcyBhbGwgR3VpbGQgU3RpY2tlcnMgZnJvbSBBUEkgKGFuZCBjYWNoZXMgdGhlbSkgKi9cbiAgYXN5bmMgZmV0Y2hBbGwoZ3VpbGQ6IHN0cmluZyB8IEd1aWxkKTogUHJvbWlzZTxNZXNzYWdlU3RpY2tlcltdPiB7XG4gICAgY29uc3Qgc3RpY2tlcnMgPSBhd2FpdCB0aGlzLmNsaWVudC5yZXN0LmVuZHBvaW50cy5nZXRHdWlsZFN0aWNrZXJzKFxuICAgICAgdHlwZW9mIGd1aWxkID09PSAnc3RyaW5nJyA/IGd1aWxkIDogZ3VpbGQuaWRcbiAgICApXG4gICAgY29uc3QgcmVzdWx0ID0gW11cbiAgICBmb3IgKGNvbnN0IHJhdyBvZiBzdGlja2Vycykge1xuICAgICAgYXdhaXQgdGhpcy5zZXQocmF3LmlkLCByYXcpXG4gICAgICByZXN1bHQucHVzaChuZXcgTWVzc2FnZVN0aWNrZXIodGhpcy5jbGllbnQsIHJhdykpXG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIC8qKiBDcmVhdGVzIGEgbmV3IEd1aWxkIFN0aWNrZXIgKi9cbiAgYXN5bmMgY3JlYXRlKFxuICAgIGd1aWxkOiBHdWlsZCB8IHN0cmluZyxcbiAgICBvcHRpb25zOiBDcmVhdGVHdWlsZFN0aWNrZXJPcHRpb25zXG4gICk6IFByb21pc2U8TWVzc2FnZVN0aWNrZXI+IHtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5jbGllbnQucmVzdC5lbmRwb2ludHMuY3JlYXRlR3VpbGRTdGlja2VyKFxuICAgICAgdHlwZW9mIGd1aWxkID09PSAnc3RyaW5nJyA/IGd1aWxkIDogZ3VpbGQuaWQsXG4gICAgICBvcHRpb25zXG4gICAgKVxuICAgIGF3YWl0IHRoaXMuc2V0KGRhdGEuaWQsIGRhdGEpXG4gICAgcmV0dXJuIG5ldyBNZXNzYWdlU3RpY2tlcih0aGlzLmNsaWVudCwgZGF0YSlcbiAgfVxuXG4gIC8qKiBFZGl0IGFuIGV4aXN0aW5nIEd1aWxkIFN0aWNrZXIgKi9cbiAgYXN5bmMgZWRpdChcbiAgICBndWlsZDogR3VpbGQgfCBzdHJpbmcsXG4gICAgc3RpY2tlcjogc3RyaW5nIHwgTWVzc2FnZVN0aWNrZXIsXG4gICAgb3B0aW9uczogUGFydGlhbDxNb2RpZnlHdWlsZFN0aWNrZXJPcHRpb25zPlxuICApOiBQcm9taXNlPE1lc3NhZ2VTdGlja2VyPiB7XG4gICAgY29uc3QgaWQgPSB0eXBlb2Ygc3RpY2tlciA9PT0gJ3N0cmluZycgPyBzdGlja2VyIDogc3RpY2tlci5pZFxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmNsaWVudC5yZXN0LmVuZHBvaW50cy5tb2RpZnlHdWlsZFN0aWNrZXIoXG4gICAgICB0eXBlb2YgZ3VpbGQgPT09ICdzdHJpbmcnID8gZ3VpbGQgOiBndWlsZC5pZCxcbiAgICAgIGlkLFxuICAgICAgb3B0aW9uc1xuICAgIClcbiAgICBhd2FpdCB0aGlzLnNldChkYXRhLmlkLCBkYXRhKVxuICAgIHJldHVybiBuZXcgTWVzc2FnZVN0aWNrZXIodGhpcy5jbGllbnQsIGRhdGEpXG4gIH1cblxuICBhc3luYyBmcm9tUGF5bG9hZChzdGlja2VyczogTWVzc2FnZVN0aWNrZXJQYXlsb2FkW10pOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBmb3IgKGNvbnN0IHN0aWNrZXIgb2Ygc3RpY2tlcnMpIHtcbiAgICAgIGF3YWl0IHRoaXMuc2V0KHN0aWNrZXIuaWQsIHN0aWNrZXIpXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsU0FDRSxjQUFjLEVBQ2Qsa0JBQWtCLFFBQ2Isa0NBQWlDO0FBTXhDLFNBQVMsV0FBVyxRQUFRLFlBQVc7QUFFdkMsT0FBTyxNQUFNLHdCQUF3QjtJQUluQyxZQUFZLE1BQWMsQ0FBRTtRQUMxQixLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO0lBQzVCO0lBRUEsK0RBQStELEdBQy9ELE1BQU0sa0JBQWlEO1FBQ3JELE1B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