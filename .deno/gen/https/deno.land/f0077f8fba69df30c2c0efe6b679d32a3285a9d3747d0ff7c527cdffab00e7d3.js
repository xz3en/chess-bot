import { Emoji } from '../structures/emoji.ts';
import { MessageReaction } from '../structures/messageReaction.ts';
import { MESSAGE_REACTION, MESSAGE_REACTIONS, MESSAGE_REACTION_USER } from '../types/endpoint.ts';
import { BaseManager } from './base.ts';
export class MessageReactionsManager extends BaseManager {
    message;
    constructor(client, message){
        super(client, `reactions:${message.id}`, MessageReaction);
        this.message = message;
    }
    async updateRefs() {
        const newVal = await this.message.channel.messages.get(this.message.id);
        if (newVal !== undefined) {
            this.message = newVal;
        }
        await this.message.updateRefs();
    }
    async get(id) {
        const raw = await this._get(id);
        if (raw === undefined) return;
        const emojiID = raw.emoji.id !== null ? raw.emoji.id : raw.emoji.name;
        let emoji = await this.client.emojis.get(emojiID);
        if (emoji === undefined) emoji = new Emoji(this.client, raw.emoji);
        await this.updateRefs();
        const reaction = new MessageReaction(this.client, raw, this.message, emoji);
        return reaction;
    }
    async set(key, value) {
        await this.client.cache.set(this.cacheName, key, value, this.client.reactionCacheLifetime);
    }
    async array() {
        let arr = await this.client.cache.array(this.cacheName);
        if (arr === undefined) arr = [];
        return await Promise.all(arr.map(async (raw)=>{
            const emojiID = raw.emoji.id !== null ? raw.emoji.id : raw.emoji.name;
            let emoji = await this.client.emojis.get(emojiID);
            if (emoji === undefined) emoji = new Emoji(this.client, raw.emoji);
            return new MessageReaction(this.client, raw, this.message, emoji);
        }));
    }
    async flush() {
        await this.client.cache.deleteCache(`reaction_users:${this.message.id}`);
        await this.client.cache.deleteCache(this.cacheName);
    }
    /** Remove all Reactions from the Message */ async removeAll() {
        await this.client.rest.delete(MESSAGE_REACTIONS(this.message.channel.id, this.message.id));
    }
    /** Remove a specific Emoji from Reactions */ async removeEmoji(emoji) {
        emoji = emoji instanceof String && emoji[0] === '<' ? emoji.substring(1) : emoji;
        emoji = emoji instanceof String && emoji[emoji.length - 1] === '>' ? emoji.substring(0, emoji.length - 2) : emoji;
        const val = encodeURIComponent(typeof emoji === 'object' ? emoji.id ?? emoji.name : emoji);
        await this.client.rest.delete(MESSAGE_REACTION(this.message.channel.id, this.message.id, val));
        return this;
    }
    /** Remove a specific Emoji from Reactions */ async removeUser(emoji, user) {
        emoji = emoji instanceof String && emoji[0] === '<' ? emoji.substring(1) : emoji;
        emoji = emoji instanceof String && emoji[emoji.length - 1] === '>' ? emoji.substring(0, emoji.length - 2) : emoji;
        const val = encodeURIComponent(typeof emoji === 'object' ? emoji.id ?? emoji.name : emoji);
        await this.client.rest.delete(MESSAGE_REACTION_USER(this.message.channel.id, this.message.id, val, typeof user === 'string' ? user : user.id));
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,