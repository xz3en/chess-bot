// https://github.com/google/skia/blob/main/modules/canvaskit/npm_build/types/index.d.ts
// and dom types from DefinitelyTyped project
// Minimum TypeScript Version: 3.7
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvY2FudmFzQHYxLjQuMS9zcmMvdHlwZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9za2lhL2Jsb2IvbWFpbi9tb2R1bGVzL2NhbnZhc2tpdC9ucG1fYnVpbGQvdHlwZXMvaW5kZXguZC50c1xuLy8gYW5kIGRvbSB0eXBlcyBmcm9tIERlZmluaXRlbHlUeXBlZCBwcm9qZWN0XG5cbi8vIE1pbmltdW0gVHlwZVNjcmlwdCBWZXJzaW9uOiAzLjdcblxuZXhwb3J0IHR5cGUgQ2FudmFzRGlyZWN0aW9uID0gXCJsdHJcIiB8IFwicnRsXCIgfCBcImluaGVyaXRcIjtcbmV4cG9ydCB0eXBlIENhbnZhc0ZpbGxSdWxlID0gXCJub256ZXJvXCIgfCBcImV2ZW5vZGRcIjtcbmV4cG9ydCB0eXBlIENhbnZhc0xpbmVDYXAgPSBcImJ1dHRcIiB8IFwicm91bmRcIiB8IFwic3F1YXJlXCI7XG5leHBvcnQgdHlwZSBDYW52YXNMaW5lSm9pbiA9IFwicm91bmRcIiB8IFwiYmV2ZWxcIiB8IFwibWl0ZXJcIjtcbmV4cG9ydCB0eXBlIENhbnZhc1RleHRBbGlnbiA9IFwic3RhcnRcIiB8IFwiZW5kXCIgfCBcImxlZnRcIiB8IFwicmlnaHRcIiB8IFwiY2VudGVyXCI7XG5leHBvcnQgdHlwZSBDYW52YXNUZXh0QmFzZWxpbmUgPVxuICB8IFwidG9wXCJcbiAgfCBcImhhbmdpbmdcIlxuICB8IFwibWlkZGxlXCJcbiAgfCBcImFscGhhYmV0aWNcIlxuICB8IFwiaWRlb2dyYXBoaWNcIlxuICB8IFwiYm90dG9tXCI7XG5leHBvcnQgdHlwZSBJbWFnZVNtb290aGluZ1F1YWxpdHkgPSBcImxvd1wiIHwgXCJtZWRpdW1cIiB8IFwiaGlnaFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIERPTU1hdHJpeDJESW5pdCB7XG4gIGE6IG51bWJlcjtcbiAgYjogbnVtYmVyO1xuICBjOiBudW1iZXI7XG4gIGQ6IG51bWJlcjtcbiAgZTogbnVtYmVyO1xuICBmOiBudW1iZXI7XG4gIG0xMTogbnVtYmVyO1xuICBtMTI6IG51bWJlcjtcbiAgbTIxOiBudW1iZXI7XG4gIG0yMjogbnVtYmVyO1xuICBtNDE6IG51bWJlcjtcbiAgbTQyOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FudmFzR3JhZGllbnQge1xuICBhZGRDb2xvclN0b3Aob2Zmc2V0OiBudW1iZXIsIGNvbG9yOiBzdHJpbmcpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENhbnZhc1BhdHRlcm4ge1xuICBzZXRUcmFuc2Zvcm0odHJhbnNmb3JtPzogRE9NTWF0cml4MkRJbml0KTogdm9pZDtcbn1cblxuLy8gVE9ETzogQ29tcGxldGUgdHlwZXMgaGVyZVxuZXhwb3J0IGludGVyZmFjZSBET01NYXRyaXhJbml0IHt9XG5leHBvcnQgaW50ZXJmYWNlIERPTVBvaW50IHt9XG5leHBvcnQgaW50ZXJmYWNlIERPTVBvaW50SW5pdCB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIEltYWdlQml0bWFwIHtcbiAgaGVpZ2h0OiBudW1iZXI7XG4gIHdpZHRoOiBudW1iZXI7XG5cbiAgY2xvc2UoKTogdm9pZDtcbn1cblxuLy8gSFRNTCBFbGVtZW50OyB3b24ndCBiZSBhZGRpbmcgaXRzIHR5cGVzIGhlcmUuXG5leHBvcnQgaW50ZXJmYWNlIEVsZW1lbnQge31cblxuZXhwb3J0IGludGVyZmFjZSBIVE1MQ2FudmFzRWxlbWVudCB7fVxuZXhwb3J0IHR5cGUgQ2FudmFzSW1hZ2VTb3VyY2UgPVxuICB8IEVtdWxhdGVkQ2FudmFzMkRcbiAgfCBJbWFnZUJpdG1hcFxuICB8IEVtYmluZE9iamVjdDxJbWFnZT5cbiAgfCBJbWFnZTtcblxuZXhwb3J0IGludGVyZmFjZSBET01NYXRyaXhSZWFkT25seSB7XG4gIHJlYWRvbmx5IGE6IG51bWJlcjtcbiAgcmVhZG9ubHkgYjogbnVtYmVyO1xuICByZWFkb25seSBjOiBudW1iZXI7XG4gIHJlYWRvbmx5IGQ6IG51bWJlcjtcbiAgcmVhZG9ubHkgZTogbnVtYmVyO1xuICByZWFkb25seSBmOiBudW1iZXI7XG4gIHJlYWRvbmx5IGlzMkQ6IGJvb2xlYW47XG4gIHJlYWRvbmx5IGlzSWRlbnRpdHk6IGJvb2xlYW47XG4gIHJlYWRvbmx5IG0xMTogbnVtYmVyO1xuICByZWFkb25seSBtMTI6IG51bWJlcjtcbiAgcmVhZG9ubHkgbTEzOiBudW1iZXI7XG4gIHJlYWRvbmx5IG0xNDogbnVtYmVyO1xuICByZWFkb25seSBtMjE6IG51bWJlcjtcbiAgcmVhZG9ubHkgbTIyOiBudW1iZXI7XG4gIHJlYWRvbmx5IG0yMzogbnVtYmVyO1xuICByZWFkb25seSBtMjQ6IG51bWJlcjtcbiAgcmVhZG9ubHkgbTMxOiBudW1iZXI7XG4gIHJlYWRvbmx5IG0zMjogbnVtYmVyO1xuICByZWFkb25seSBtMzM6IG51bWJlcjtcbiAgcmVhZG9ubHkgbTM0OiBudW1iZXI7XG4gIHJlYWRvbmx5IG00MTogbnVtYmVyO1xuICByZWFkb25seSBtNDI6IG51bWJlcjtcbiAgcmVhZG9ubHkgbTQzOiBudW1iZXI7XG4gIHJlYWRvbmx5IG00NDogbnVtYmVyO1xuICBmbGlwWCgpOiBET01NYXRyaXg7XG4gIGZsaXBZKCk6IERPTU1hdHJpeDtcbiAgaW52ZXJzZSgpOiBET01NYXRyaXg7XG4gIG11bHRpcGx5KG90aGVyPzogRE9NTWF0cml4SW5pdCk6IERPTU1hdHJpeDtcbiAgcm90YXRlKHJvdFg/OiBudW1iZXIsIHJvdFk/OiBudW1iZXIsIHJvdFo/OiBudW1iZXIpOiBET01NYXRyaXg7XG4gIHJvdGF0ZUF4aXNBbmdsZShcbiAgICB4PzogbnVtYmVyLFxuICAgIHk/OiBudW1iZXIsXG4gICAgej86IG51bWJlcixcbiAgICBhbmdsZT86IG51bWJlcixcbiAgKTogRE9NTWF0cml4O1xuICByb3RhdGVGcm9tVmVjdG9yKHg/OiBudW1iZXIsIHk/OiBudW1iZXIpOiBET01NYXRyaXg7XG4gIHNjYWxlKFxuICAgIHNjYWxlWD86IG51bWJlcixcbiAgICBzY2FsZVk/OiBudW1iZXIsXG4gICAgc2NhbGVaPzogbnVtYmVyLFxuICAgIG9yaWdpblg/OiBudW1iZXIsXG4gICAgb3JpZ2luWT86IG51bWJlcixcbiAgICBvcmlnaW5aPzogbnVtYmVyLFxuICApOiBET01NYXRyaXg7XG4gIHNjYWxlM2QoXG4gICAgc2NhbGU/OiBudW1iZXIsXG4gICAgb3JpZ2luWD86IG51bWJlcixcbiAgICBvcmlnaW5ZPzogbnVtYmVyLFxuICAgIG9yaWdpblo/OiBudW1iZXIsXG4gICk6IERPTU1hdHJpeDtcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIHNjYWxlTm9uVW5pZm9ybShzY2FsZVg/OiBudW1iZXIsIHNjYWxlWT86IG51bWJlcik6IERPTU1hdHJpeDtcbiAgc2tld1goc3g/OiBudW1iZXIpOiBET01NYXRyaXg7XG4gIHNrZXdZKHN5PzogbnVtYmVyKTogRE9NTWF0cml4O1xuICB0b0Zsb2F0MzJBcnJheSgpOiBGbG9hdDMyQXJyYXk7XG4gIHRvRmxvYXQ2NEFycmF5KCk6IEZsb2F0NjRBcnJheTtcbiAgdG9KU09OKCk6IGFueTtcbiAgdHJhbnNmb3JtUG9pbnQocG9pbnQ/OiBET01Qb2ludEluaXQpOiBET01Qb2ludDtcbiAgdHJhbnNsYXRlKHR4PzogbnVtYmVyLCB0eT86IG51bWJlciwgdHo/OiBudW1iZXIpOiBET01NYXRyaXg7XG4gIHRvU3RyaW5nKCk6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBET01NYXRyaXggZXh0ZW5kcyBET01NYXRyaXhSZWFkT25seSB7XG4gIGE6IG51bWJlcjtcbiAgYjogbnVtYmVyO1xuICBjOiBudW1iZXI7XG4gIGQ6IG51bWJlcjtcbiAgZTogbnVtYmVyO1xuICBmOiBudW1iZXI7XG4gIG0xMTogbnVtYmVyO1xuICBtMTI6IG51bWJlcjtcbiAgbTEzOiBudW1iZXI7XG4gIG0xNDogbnVtYmVyO1xuICBtMjE6IG51bWJlcjtcbiAgbTIyOiBudW1iZXI7XG4gIG0yMzogbnVtYmVyO1xuICBtMjQ6IG51bWJlcjtcbiAgbTMxOiBudW1iZXI7XG4gIG0zMjogbnVtYmVyO1xuICBtMzM6IG51bWJlcjtcbiAgbTM0OiBudW1iZXI7XG4gIG00MTogbnVtYmVyO1xuICBtNDI6IG51bWJlcjtcbiAgbTQzOiBudW1iZXI7XG4gIG00NDogbnVtYmVyO1xuICBpbnZlcnRTZWxmKCk6IERPTU1hdHJpeDtcbiAgbXVsdGlwbHlTZWxmKG90aGVyPzogRE9NTWF0cml4SW5pdCk6IERPTU1hdHJpeDtcbiAgcHJlTXVsdGlwbHlTZWxmKG90aGVyPzogRE9NTWF0cml4SW5pdCk6IERPTU1hdHJpeDtcbiAgcm90YXRlQXhpc0FuZ2xlU2VsZihcbiAgICB4PzogbnVtYmVyLFxuICAgIHk/OiBudW1iZXIsXG4gICAgej86IG51bWJlcixcbiAgICBhbmdsZT86IG51bWJlcixcbiAgKTogRE9NTWF0cml4O1xuICByb3RhdGVGcm9tVmVjdG9yU2VsZih4PzogbnVtYmVyLCB5PzogbnVtYmVyKTogRE9NTWF0cml4O1xuICByb3RhdGVTZWxmKHJvdFg/OiBudW1iZXIsIHJvdFk/OiBudW1iZXIsIHJvdFo/OiBudW1iZXIpOiBET01NYXRyaXg7XG4gIHNjYWxlM2RTZWxmKFxuICAgIHNjYWxlPzogbnVtYmVyLFxuICAgIG9yaWdpblg/OiBudW1iZXIsXG4gICAgb3JpZ2luWT86IG51bWJlcixcbiAgICBvcmlnaW5aPzogbnVtYmVyLFxuICApOiBET01NYXRyaXg7XG4gIHNjYWxlU2VsZihcbiAgICBzY2FsZVg/OiBudW1iZXIsXG4gICAgc2NhbGVZPzogbnVtYmVyLFxuICAgIHNjYWxlWj86IG51bWJlcixcbiAgICBvcmlnaW5YPzogbnVtYmVyLFxuICAgIG9yaWdpblk/OiBudW1iZXIsXG4gICAgb3JpZ2luWj86IG51bWJlcixcbiAgKTogRE9NTWF0cml4O1xuICBzZXRNYXRyaXhWYWx1ZSh0cmFuc2Zvcm1MaXN0OiBzdHJpbmcpOiBET01NYXRyaXg7XG4gIHNrZXdYU2VsZihzeD86IG51bWJlcik6IERPTU1hdHJpeDtcbiAgc2tld1lTZWxmKHN5PzogbnVtYmVyKTogRE9NTWF0cml4O1xuICB0cmFuc2xhdGVTZWxmKHR4PzogbnVtYmVyLCB0eT86IG51bWJlciwgdHo/OiBudW1iZXIpOiBET01NYXRyaXg7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FudmFzQ29tcG9zaXRpbmcge1xuICBnbG9iYWxBbHBoYTogbnVtYmVyO1xuICBnbG9iYWxDb21wb3NpdGVPcGVyYXRpb246IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYW52YXNEcmF3SW1hZ2Uge1xuICBkcmF3SW1hZ2UoaW1hZ2U6IENhbnZhc0ltYWdlU291cmNlLCBkeDogbnVtYmVyLCBkeTogbnVtYmVyKTogdm9pZDtcbiAgZHJhd0ltYWdlKFxuICAgIGltYWdlOiBDYW52YXNJbWFnZVNvdXJjZSxcbiAgICBkeDogbnVtYmVyLFxuICAgIGR5OiBudW1iZXIsXG4gICAgZHc6IG51bWJlcixcbiAgICBkaDogbnVtYmVyLFxuICApOiB2b2lkO1xuICBkcmF3SW1hZ2UoXG4gICAgaW1hZ2U6IENhbnZhc0ltYWdlU291cmNlLFxuICAgIHN4OiBudW1iZXIsXG4gICAgc3k6IG51bWJlcixcbiAgICBzdzogbnVtYmVyLFxuICAgIHNoOiBudW1iZXIsXG4gICAgZHg6IG51bWJlcixcbiAgICBkeTogbnVtYmVyLFxuICAgIGR3OiBudW1iZXIsXG4gICAgZGg6IG51bWJlcixcbiAgKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYW52YXNEcmF3UGF0aCB7XG4gIGJlZ2luUGF0aCgpOiB2b2lkO1xuICBjbGlwKGZpbGxSdWxlPzogQ2FudmFzRmlsbFJ1bGUpOiB2b2lkO1xuICBjbGlwKHBhdGg6IFBhdGgyRCwgZmlsbFJ1bGU/OiBDYW52YXNGaWxsUnVsZSk6IHZvaWQ7XG4gIGZpbGwoZmlsbFJ1bGU/OiBDYW52YXNGaWxsUnVsZSk6IHZvaWQ7XG4gIGZpbGwocGF0aDogUGF0aDJELCBmaWxsUnVsZT86IENhbnZhc0ZpbGxSdWxlKTogdm9pZDtcbiAgaXNQb2ludEluUGF0aCh4OiBudW1iZXIsIHk6IG51bWJlciwgZmlsbFJ1bGU/OiBDYW52YXNGaWxsUnVsZSk6IGJvb2xlYW47XG4gIGlzUG9pbnRJblBhdGgoXG4gICAgcGF0aDogUGF0aDJELFxuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXIsXG4gICAgZmlsbFJ1bGU/OiBDYW52YXNGaWxsUnVsZSxcbiAgKTogYm9vbGVhbjtcbiAgaXNQb2ludEluU3Ryb2tlKHg6IG51bWJlciwgeTogbnVtYmVyKTogYm9vbGVhbjtcbiAgaXNQb2ludEluU3Ryb2tlKHBhdGg6IFBhdGgyRCwgeDogbnVtYmVyLCB5OiBudW1iZXIpOiBib29sZWFuO1xuICBzdHJva2UoKTogdm9pZDtcbiAgc3Ryb2tlKHBhdGg6IFBhdGgyRCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FudmFzRmlsbFN0cm9rZVN0eWxlcyB7XG4gIGZpbGxTdHlsZTogc3RyaW5nIHwgQ2FudmFzR3JhZGllbnQgfCBDYW52YXNQYXR0ZXJuO1xuICBzdHJva2VTdHlsZTogc3RyaW5nIHwgQ2FudmFzR3JhZGllbnQgfCBDYW52YXNQYXR0ZXJuO1xuICBjcmVhdGVMaW5lYXJHcmFkaWVudChcbiAgICB4MDogbnVtYmVyLFxuICAgIHkwOiBudW1iZXIsXG4gICAgeDE6IG51bWJlcixcbiAgICB5MTogbnVtYmVyLFxuICApOiBDYW52YXNHcmFkaWVudDtcbiAgY3JlYXRlUGF0dGVybihcbiAgICBpbWFnZTogQ2FudmFzSW1hZ2VTb3VyY2UsXG4gICAgcmVwZXRpdGlvbjogc3RyaW5nIHwgbnVsbCxcbiAgKTogQ2FudmFzUGF0dGVybiB8IG51bGw7XG4gIGNyZWF0ZVJhZGlhbEdyYWRpZW50KFxuICAgIHgwOiBudW1iZXIsXG4gICAgeTA6IG51bWJlcixcbiAgICByMDogbnVtYmVyLFxuICAgIHgxOiBudW1iZXIsXG4gICAgeTE6IG51bWJlcixcbiAgICByMTogbnVtYmVyLFxuICApOiBDYW52YXNHcmFkaWVudDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYW52YXNGaWx0ZXJzIHtcbiAgZmlsdGVyOiBzdHJpbmc7XG59XG5cbi8qKiBBbiBvcGFxdWUgb2JqZWN0IGRlc2NyaWJpbmcgYSBncmFkaWVudC4gSXQgaXMgcmV0dXJuZWQgYnkgdGhlIG1ldGhvZHMgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELmNyZWF0ZUxpbmVhckdyYWRpZW50KCkgb3IgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELmNyZWF0ZVJhZGlhbEdyYWRpZW50KCkuICovXG5leHBvcnQgaW50ZXJmYWNlIENhbnZhc0dyYWRpZW50IHtcbiAgLyoqXG4gICAqIEFkZHMgYSBjb2xvciBzdG9wIHdpdGggdGhlIGdpdmVuIGNvbG9yIHRvIHRoZSBncmFkaWVudCBhdCB0aGUgZ2l2ZW4gb2Zmc2V0LiAwLjAgaXMgdGhlIG9mZnNldCBhdCBvbmUgZW5kIG9mIHRoZSBncmFkaWVudCwgMS4wIGlzIHRoZSBvZmZzZXQgYXQgdGhlIG90aGVyIGVuZC5cbiAgICpcbiAgICogVGhyb3dzIGFuIFwiSW5kZXhTaXplRXJyb3JcIiBET01FeGNlcHRpb24gaWYgdGhlIG9mZnNldCBpcyBvdXQgb2YgcmFuZ2UuIFRocm93cyBhIFwiU3ludGF4RXJyb3JcIiBET01FeGNlcHRpb24gaWYgdGhlIGNvbG9yIGNhbm5vdCBiZSBwYXJzZWQuXG4gICAqL1xuICBhZGRDb2xvclN0b3Aob2Zmc2V0OiBudW1iZXIsIGNvbG9yOiBzdHJpbmcpOiB2b2lkO1xufVxuXG5kZWNsYXJlIHZhciBDYW52YXNHcmFkaWVudDoge1xuICBwcm90b3R5cGU6IENhbnZhc0dyYWRpZW50O1xuICBuZXcgKCk6IENhbnZhc0dyYWRpZW50O1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBDYW52YXNJbWFnZURhdGEge1xuICBjcmVhdGVJbWFnZURhdGEoc3c6IG51bWJlciwgc2g6IG51bWJlcik6IEltYWdlRGF0YTtcbiAgY3JlYXRlSW1hZ2VEYXRhKGltYWdlZGF0YTogSW1hZ2VEYXRhKTogSW1hZ2VEYXRhO1xuICBnZXRJbWFnZURhdGEoc3g6IG51bWJlciwgc3k6IG51bWJlciwgc3c6IG51bWJlciwgc2g6IG51bWJlcik6IEltYWdlRGF0YTtcbiAgcHV0SW1hZ2VEYXRhKGltYWdlZGF0YTogSW1hZ2VEYXRhLCBkeDogbnVtYmVyLCBkeTogbnVtYmVyKTogdm9pZDtcbiAgcHV0SW1hZ2VEYXRhKFxuICAgIGltYWdlZGF0YTogSW1hZ2VEYXRhLFxuICAgIGR4OiBudW1iZXIsXG4gICAgZHk6IG51bWJlcixcbiAgICBkaXJ0eVg6IG51bWJlcixcbiAgICBkaXJ0eVk6IG51bWJlcixcbiAgICBkaXJ0eVdpZHRoOiBudW1iZXIsXG4gICAgZGlydHlIZWlnaHQ6IG51bWJlcixcbiAgKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYW52YXNJbWFnZVNtb290aGluZyB7XG4gIGltYWdlU21vb3RoaW5nRW5hYmxlZDogYm9vbGVhbjtcbiAgaW1hZ2VTbW9vdGhpbmdRdWFsaXR5OiBJbWFnZVNtb290aGluZ1F1YWxpdHk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FudmFzUGF0aCB7XG4gIGFyYyhcbiAgICB4OiBudW1iZXIsXG4gICAgeTogbnVtYmVyLFxuICAgIHJhZGl1czogbnVtYmVyLFxuICAgIHN0YXJ0QW5nbGU6IG51bWJlcixcbiAgICBlbmRBbmdsZTogbnVtYmVyLFxuICAgIGFudGljbG9ja3dpc2U/OiBib29sZWFuLFxuICApOiB2b2lkO1xuICBhcmNUbyh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyLCByYWRpdXM6IG51bWJlcik6IHZvaWQ7XG4gIGJlemllckN1cnZlVG8oXG4gICAgY3AxeDogbnVtYmVyLFxuICAgIGNwMXk6IG51bWJlcixcbiAgICBjcDJ4OiBudW1iZXIsXG4gICAgY3AyeTogbnVtYmVyLFxuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXIsXG4gICk6IHZvaWQ7XG4gIGNsb3NlUGF0aCgpOiB2b2lkO1xuICBlbGxpcHNlKFxuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXIsXG4gICAgcmFkaXVzWDogbnVtYmVyLFxuICAgIHJhZGl1c1k6IG51bWJlcixcbiAgICByb3RhdGlvbjogbnVtYmVyLFxuICAgIHN0YXJ0QW5nbGU6IG51bWJlcixcbiAgICBlbmRBbmdsZTogbnVtYmVyLFxuICAgIGFudGljbG9ja3dpc2U/OiBib29sZWFuLFxuICApOiB2b2lkO1xuICBsaW5lVG8oeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkO1xuICBtb3ZlVG8oeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkO1xuICBxdWFkcmF0aWNDdXJ2ZVRvKGNweDogbnVtYmVyLCBjcHk6IG51bWJlciwgeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkO1xuICByZWN0KHg6IG51bWJlciwgeTogbnVtYmVyLCB3OiBudW1iZXIsIGg6IG51bWJlcik6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FudmFzUGF0aERyYXdpbmdTdHlsZXMge1xuICBsaW5lQ2FwOiBDYW52YXNMaW5lQ2FwO1xuICBsaW5lRGFzaE9mZnNldDogbnVtYmVyO1xuICBsaW5lSm9pbjogQ2FudmFzTGluZUpvaW47XG4gIGxpbmVXaWR0aDogbnVtYmVyO1xuICBtaXRlckxpbWl0OiBudW1iZXI7XG4gIGdldExpbmVEYXNoKCk6IG51bWJlcltdO1xuICBzZXRMaW5lRGFzaChzZWdtZW50czogbnVtYmVyW10pOiB2b2lkO1xufVxuXG4vKiogQW4gb3BhcXVlIG9iamVjdCBkZXNjcmliaW5nIGEgcGF0dGVybiwgYmFzZWQgb24gYW4gaW1hZ2UsIGEgY2FudmFzLCBvciBhIHZpZGVvLCBjcmVhdGVkIGJ5IHRoZSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQuY3JlYXRlUGF0dGVybigpIG1ldGhvZC4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2FudmFzUGF0dGVybiB7XG4gIC8qKlxuICAgKiBTZXRzIHRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggdGhhdCB3aWxsIGJlIHVzZWQgd2hlbiByZW5kZXJpbmcgdGhlIHBhdHRlcm4gZHVyaW5nIGEgZmlsbCBvciBzdHJva2UgcGFpbnRpbmcgb3BlcmF0aW9uLlxuICAgKi9cbiAgc2V0VHJhbnNmb3JtKHRyYW5zZm9ybT86IERPTU1hdHJpeDJESW5pdCk6IHZvaWQ7XG59XG5cbmRlY2xhcmUgdmFyIENhbnZhc1BhdHRlcm46IHtcbiAgcHJvdG90eXBlOiBDYW52YXNQYXR0ZXJuO1xuICBuZXcgKCk6IENhbnZhc1BhdHRlcm47XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIENhbnZhc1JlY3Qge1xuICBjbGVhclJlY3QoeDogbnVtYmVyLCB5OiBudW1iZXIsIHc6IG51bWJlciwgaDogbnVtYmVyKTogdm9pZDtcbiAgZmlsbFJlY3QoeDogbnVtYmVyLCB5OiBudW1iZXIsIHc6IG51bWJlciwgaDogbnVtYmVyKTogdm9pZDtcbiAgc3Ryb2tlUmVjdCh4OiBudW1iZXIsIHk6IG51bWJlciwgdzogbnVtYmVyLCBoOiBudW1iZXIpOiB2b2lkO1xufVxuXG4vKiogVGhlIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCBleHBvcnQgaW50ZXJmYWNlLCBwYXJ0IG9mIHRoZSBDYW52YXMgQVBJLCBwcm92aWRlcyB0aGUgMkQgcmVuZGVyaW5nIGNvbnRleHQgZm9yIHRoZSBkcmF3aW5nIHN1cmZhY2Ugb2YgYSA8Y2FudmFzPiBlbGVtZW50LiBJdCBpcyB1c2VkIGZvciBkcmF3aW5nIHNoYXBlcywgdGV4dCwgaW1hZ2VzLCBhbmQgb3RoZXIgb2JqZWN0cy4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEXG4gIGV4dGVuZHNcbiAgICBDYW52YXNDb21wb3NpdGluZyxcbiAgICBDYW52YXNEcmF3SW1hZ2UsXG4gICAgQ2FudmFzRHJhd1BhdGgsXG4gICAgQ2FudmFzRmlsbFN0cm9rZVN0eWxlcyxcbiAgICBDYW52YXNGaWx0ZXJzLFxuICAgIENhbnZhc0ltYWdlRGF0YSxcbiAgICBDYW52YXNJbWFnZVNtb290aGluZyxcbiAgICBDYW52YXNQYXRoLFxuICAgIENhbnZhc1BhdGhEcmF3aW5nU3R5bGVzLFxuICAgIENhbnZhc1JlY3QsXG4gICAgQ2FudmFzU2hhZG93U3R5bGVzLFxuICAgIENhbnZhc1N0YXRlLFxuICAgIENhbnZhc1RleHQsXG4gICAgQ2FudmFzVGV4dERyYXdpbmdTdHlsZXMsXG4gICAgQ2FudmFzVHJhbnNmb3JtLFxuICAgIENhbnZhc1VzZXJJbnRlcmZhY2Uge1xuICByZWFkb25seSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xufVxuXG5kZWNsYXJlIHZhciBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ6IHtcbiAgcHJvdG90eXBlOiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XG4gIG5ldyAoKTogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBDYW52YXNTaGFkb3dTdHlsZXMge1xuICBzaGFkb3dCbHVyOiBudW1iZXI7XG4gIHNoYWRvd0NvbG9yOiBzdHJpbmc7XG4gIHNoYWRvd09mZnNldFg6IG51bWJlcjtcbiAgc2hhZG93T2Zmc2V0WTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENhbnZhc1N0YXRlIHtcbiAgcmVzdG9yZSgpOiB2b2lkO1xuICBzYXZlKCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dE1ldHJpY3Mge1xuICBhY3R1YWxCb3VuZGluZ0JveEFzY2VudDogbnVtYmVyO1xuICBhY3R1YWxCb3VuZGluZ0JveERlc2NlbnQ6IG51bWJlcjtcbiAgYWN0dWFsQm91bmRpbmdCb3hMZWZ0OiBudW1iZXI7XG4gIGFjdHVhbEJvdW5kaW5nQm94UmlnaHQ6IG51bWJlcjtcbiAgYWxwaGFiZXRpY0Jhc2VsaW5lOiBudW1iZXI7XG4gIGVtSGVpZ2h0QXNjZW50OiBudW1iZXI7XG4gIGVtSGVpZ2h0RGVzY2VudDogbnVtYmVyO1xuICBmb250Qm91bmRpbmdCb3hBc2NlbnQ6IG51bWJlcjtcbiAgZm9udEJvdW5kaW5nQm94RGVzY2VudDogbnVtYmVyO1xuICBoYW5naW5nQmFzZWxpbmU6IG51bWJlcjtcbiAgaWRlb2dyYXBoaWNCYXNlbGluZTogbnVtYmVyO1xuICB3aWR0aDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENhbnZhc1RleHQge1xuICBmaWxsVGV4dCh0ZXh0OiBzdHJpbmcsIHg6IG51bWJlciwgeTogbnVtYmVyLCBtYXhXaWR0aD86IG51bWJlcik6IHZvaWQ7XG4gIG1lYXN1cmVUZXh0KHRleHQ6IHN0cmluZyk6IFRleHRNZXRyaWNzO1xuICBzdHJva2VUZXh0KHRleHQ6IHN0cmluZywgeDogbnVtYmVyLCB5OiBudW1iZXIsIG1heFdpZHRoPzogbnVtYmVyKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYW52YXNUZXh0RHJhd2luZ1N0eWxlcyB7XG4gIGRpcmVjdGlvbjogQ2FudmFzRGlyZWN0aW9uO1xuICBmb250OiBzdHJpbmc7XG4gIHRleHRBbGlnbjogQ2FudmFzVGV4dEFsaWduO1xuICB0ZXh0QmFzZWxpbmU6IENhbnZhc1RleHRCYXNlbGluZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYW52YXNUcmFuc2Zvcm0ge1xuICBnZXRUcmFuc2Zvcm0oKTogRE9NTWF0cml4O1xuICByZXNldFRyYW5zZm9ybSgpOiB2b2lkO1xuICByb3RhdGUoYW5nbGU6IG51bWJlcik6IHZvaWQ7XG4gIHNjYWxlKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZDtcbiAgc2V0VHJhbnNmb3JtKFxuICAgIGE6IG51bWJlcixcbiAgICBiOiBudW1iZXIsXG4gICAgYzogbnVtYmVyLFxuICAgIGQ6IG51bWJlcixcbiAgICBlOiBudW1iZXIsXG4gICAgZjogbnVtYmVyLFxuICApOiB2b2lkO1xuICBzZXRUcmFuc2Zvcm0odHJhbnNmb3JtPzogRE9NTWF0cml4MkRJbml0KTogdm9pZDtcbiAgdHJhbnNmb3JtKFxuICAgIGE6IG51bWJlcixcbiAgICBiOiBudW1iZXIsXG4gICAgYzogbnVtYmVyLFxuICAgIGQ6IG51bWJlcixcbiAgICBlOiBudW1iZXIsXG4gICAgZjogbnVtYmVyLFxuICApOiB2b2lkO1xuICB0cmFuc2xhdGUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENhbnZhc1VzZXJJbnRlcmZhY2Uge1xuICBkcmF3Rm9jdXNJZk5lZWRlZChlbGVtZW50OiBFbGVtZW50KTogdm9pZDtcbiAgZHJhd0ZvY3VzSWZOZWVkZWQocGF0aDogUGF0aDJELCBlbGVtZW50OiBFbGVtZW50KTogdm9pZDtcbiAgc2Nyb2xsUGF0aEludG9WaWV3KCk6IHZvaWQ7XG4gIHNjcm9sbFBhdGhJbnRvVmlldyhwYXRoOiBQYXRoMkQpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEltYWdlRGF0YSB7XG4gIGRhdGE6IFVpbnQ4Q2xhbXBlZEFycmF5O1xuICBoZWlnaHQ6IG51bWJlcjtcbiAgd2lkdGg6IG51bWJlcjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgUGF0aDJEIHt9XG5cbmV4cG9ydCBkZWNsYXJlIGZ1bmN0aW9uIENhbnZhc0tpdEluaXQoXG4gIG9wdHM6IENhbnZhc0tpdEluaXRPcHRpb25zLFxuKTogUHJvbWlzZTxDYW52YXNLaXQ+O1xuXG5leHBvcnQgaW50ZXJmYWNlIENhbnZhc0tpdEluaXRPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoaXMgY2FsbGJhY2sgd2lsbCBiZSBpbnZva2VkIHdoZW4gdGhlIENhbnZhc0tpdCBsb2FkZXIgbmVlZHMgdG8gZmV0Y2ggYSBmaWxlIChlLmcuXG4gICAqIHRoZSBibG9iIG9mIFdBU00gY29kZSkuIFRoZSBjb3JyZWN0IHVybCBwcmVmaXggc2hvdWxkIGJlIGFwcGxpZWQuXG4gICAqIEBwYXJhbSBmaWxlIC0gdGhlIG5hbWUgb2YgdGhlIGZpbGUgdGhhdCBpcyBhYm91dCB0byBiZSBsb2FkZWQuXG4gICAqL1xuICBsb2NhdGVGaWxlKGZpbGU6IHN0cmluZyk6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYW52YXNLaXQge1xuICAvLyBIZWxwZXJzXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgQ29sb3Igd2l0aCB0aGUgc2FtZSBBUEkgYXMgQ1NTJ3MgcmdiYSgpLCB0aGF0IGlzXG4gICAqIEludGVybmFsbHksIENvbG9ycyBhcmUgZm91ciB1bnByZW11bHRpcGxpZWQgMzItYml0IGZsb2F0czogciwgZywgYiwgYS5cbiAgICogSW4gb3JkZXIgdG8gY29uc3RydWN0IG9uZSB3aXRoIG1vcmUgcHJlY2lzaW9uIG9yIGluIGEgd2lkZXIgZ2FtdXQsXG4gICAqIHVzZSBDYW52YXNLaXQuQ29sb3I0ZigpLlxuICAgKlxuICAgKiBAcGFyYW0gciAtIHJlZCB2YWx1ZSwgY2xhbXBlZCB0byBbMCwgMjU1XS5cbiAgICogQHBhcmFtIGcgLSBncmVlbiB2YWx1ZSwgY2xhbXBlZCB0byBbMCwgMjU1XS5cbiAgICogQHBhcmFtIGIgLSBibHVlIHZhbHVlLCBjbGFtcGVkIHRvIFswLCAyNTVdLlxuICAgKiBAcGFyYW0gYSAtIGFscGhhIHZhbHVlLCBmcm9tIDAgdG8gMS4wLiBCeSBkZWZhdWx0IGlzIDEuMCAob3BhcXVlKS5cbiAgICovXG4gIENvbG9yKHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIsIGE/OiBudW1iZXIpOiBDb2xvcjtcblxuICAvKipcbiAgICogQ29uc3RydWN0IGEgNC1mbG9hdCBjb2xvci4gRmxvYXQgdmFsdWVzIGFyZSB0eXBpY2FsbHkgYmV0d2VlbiAwLjAgYW5kIDEuMC5cbiAgICogQHBhcmFtIHIgLSByZWQgdmFsdWUuXG4gICAqIEBwYXJhbSBnIC0gZ3JlZW4gdmFsdWUuXG4gICAqIEBwYXJhbSBiIC0gYmx1ZSB2YWx1ZS5cbiAgICogQHBhcmFtIGEgLSBhbHBoYSB2YWx1ZS4gQnkgZGVmYXVsdCBpcyAxLjAgKG9wYXF1ZSkuXG4gICAqL1xuICBDb2xvcjRmKHI6IG51bWJlciwgZzogbnVtYmVyLCBiOiBudW1iZXIsIGE/OiBudW1iZXIpOiBDb2xvcjtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhIENvbG9yIGFzIGEgMzIgYml0IHVuc2lnbmVkIGludGVnZXIsIHdpdGggOCBiaXRzIGFzc2lnbmVkIHRvIGVhY2ggY2hhbm5lbC5cbiAgICogQ2hhbm5lbHMgYXJlIGV4cGVjdGVkIHRvIGJlIGJldHdlZW4gMCBhbmQgMjU1IGFuZCB3aWxsIGJlIGNsYW1wZWQgYXMgc3VjaC5cbiAgICogSWYgYSBpcyBvbWl0dGVkLCBpdCB3aWxsIGJlIDI1NSAob3BhcXVlKS5cbiAgICpcbiAgICogVGhpcyBpcyBub3QgdGhlIHByZWZlcnJlZCB3YXkgdG8gdXNlIGNvbG9ycyBpbiBTa2lhIEFQSXMsIHVzZSBDb2xvciBvciBDb2xvcjRmLlxuICAgKiBAcGFyYW0gciAtIHJlZCB2YWx1ZSwgY2xhbXBlZCB0byBbMCwgMjU1XS5cbiAgICogQHBhcmFtIGcgLSBncmVlbiB2YWx1ZSwgY2xhbXBlZCB0byBbMCwgMjU1XS5cbiAgICogQHBhcmFtIGIgLSBibHVlIHZhbHVlLCBjbGFtcGVkIHRvIFswLCAyNTVdLlxuICAgKiBAcGFyYW0gYSAtIGFscGhhIHZhbHVlLCBmcm9tIDAgdG8gMS4wLiBCeSBkZWZhdWx0IGlzIDEuMCAob3BhcXVlKS5cbiAgICovXG4gIENvbG9yQXNJbnQocjogbnVtYmVyLCBnOiBudW1iZXIsIGI6IG51bWJlciwgYT86IG51bWJlcik6IENvbG9ySW50O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgY3NzIHN0eWxlIFtyLCBnLCBiLCBhXSB3aGVyZSByLCBnLCBiIGFyZSByZXR1cm5lZCBhc1xuICAgKiBpbnRzIGluIHRoZSByYW5nZSBbMCwgMjU1XSBhbmQgd2hlcmUgYSBpcyBzY2FsZWQgYmV0d2VlbiAwIGFuZCAxLjAuXG4gICAqIFtEZXByZWNhdGVkXSAtIHRoaXMgaXMgdHJpdmlhbCBub3cgdGhhdCBDb2xvciBpcyA0IGZsb2F0cy5cbiAgICovXG4gIGdldENvbG9yQ29tcG9uZW50cyhjOiBDb2xvcik6IG51bWJlcltdO1xuXG4gIC8qKlxuICAgKiBUYWtlcyBpbiBhIENTUyBjb2xvciB2YWx1ZSBhbmQgcmV0dXJucyBhIENhbnZhc0tpdC5Db2xvclxuICAgKiAod2hpY2ggaXMgYW4gYXJyYXkgb2YgNCBmbG9hdHMgaW4gUkdCQSBvcmRlcikuIEFuIG9wdGlvbmFsIGNvbG9yTWFwXG4gICAqIG1heSBiZSBwcm92aWRlZCB3aGljaCBtYXBzIGN1c3RvbSBzdHJpbmdzIHRvIHZhbHVlcy5cbiAgICogSW4gdGhlIENhbnZhc0tpdCBjYW52YXMyZCBzaGltIGxheWVyLCB3ZSBwcm92aWRlIHRoaXMgbWFwIGZvciBwcm9jZXNzaW5nXG4gICAqIGNhbnZhczJkIGNhbGxzLCBidXQgbm90IGhlcmUgZm9yIGNvZGUgc2l6ZSByZWFzb25zLlxuICAgKi9cbiAgcGFyc2VDb2xvclN0cmluZyhjb2xvcjogc3RyaW5nLCBjb2xvck1hcD86IFJlY29yZDxzdHJpbmcsIENvbG9yPik6IENvbG9yO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgY29weSBvZiB0aGUgcGFzc2VkIGluIGNvbG9yIHdpdGggYSBuZXcgYWxwaGEgdmFsdWUgYXBwbGllZC5cbiAgICogW0RlcHJlY2F0ZWRdIC0gdGhpcyBpcyB0cml2aWFsIG5vdyB0aGF0IENvbG9yIGlzIDQgZmxvYXRzLlxuICAgKi9cbiAgbXVsdGlwbHlCeUFscGhhKGM6IENvbG9yLCBhbHBoYTogbnVtYmVyKTogQ29sb3I7XG5cbiAgLyoqXG4gICAqIENvbXB1dGVzIGNvbG9yIHZhbHVlcyBmb3Igb25lLXBhc3MgdG9uYWwgYWxwaGEuXG4gICAqIE5vdGUsIGlmIG1hbGxvY2VkIGNvbG9ycyBhcmUgcGFzc2VkIGluLCB0aGUgbWVtb3J5IHBvaW50ZWQgYXQgYnkgdGhlIE1hbGxvY09ialxuICAgKiB3aWxsIGJlIG92ZXJ3cml0dGVuIHdpdGggdGhlIGNvbXB1dGVkIHRvbmFsIGNvbG9ycyAoYW5kIHRodXMgdGhlIHJldHVybiB2YWwgY2FuIGJlXG4gICAqIGlnbm9yZWQpLlxuICAgKiBAcGFyYW0gY29sb3JzXG4gICAqL1xuICBjb21wdXRlVG9uYWxDb2xvcnMoY29sb3JzOiBUb25hbENvbG9yc0lucHV0KTogVG9uYWxDb2xvcnNPdXRwdXQ7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSByZWN0YW5nbGUgd2l0aCB0aGUgZ2l2ZW4gcGFyYW1hdGVycy4gU2VlIFJlY3QuaCBmb3IgbW9yZS5cbiAgICogQHBhcmFtIGxlZnQgLSBUaGUgeCBjb29yZGluYXRlIG9mIHRoZSB1cHBlci1sZWZ0IGNvcm5lci5cbiAgICogQHBhcmFtIHRvcCAgLSBUaGUgeSBjb29yZGluYXRlIG9mIHRoZSB1cHBlci1sZWZ0IGNvcm5lci5cbiAgICogQHBhcmFtIHJpZ2h0IC0gVGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgbG93ZXItcmlnaHQgY29ybmVyLlxuICAgKiBAcGFyYW0gYm90dG9tIC0gVGhlIHkgY29vcmRpbmF0ZSBvZiB0aGUgbG93ZXItcmlnaHQgY29ybmVyLlxuICAgKi9cbiAgTFRSQlJlY3QobGVmdDogbnVtYmVyLCB0b3A6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIpOiBSZWN0O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcmVjdGFuZ2xlIHdpdGggdGhlIGdpdmVuIHBhcmFtYXRlcnMuIFNlZSBSZWN0LmggZm9yIG1vcmUuXG4gICAqIEBwYXJhbSB4IC0gVGhlIHggY29vcmRpbmF0ZSBvZiB0aGUgdXBwZXItbGVmdCBjb3JuZXIuXG4gICAqIEBwYXJhbSB5ICAtIFRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIHVwcGVyLWxlZnQgY29ybmVyLlxuICAgKiBAcGFyYW0gd2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIHJlY3RhbmdsZS5cbiAgICogQHBhcmFtIGhlaWdodCAtIFRoZSBoZWlnaHQgb2YgdGhlIHJlY3RhbmdsZS5cbiAgICovXG4gIFhZV0hSZWN0KHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IFJlY3Q7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSByZWN0YW5nbGUgd2l0aCB0aGUgZ2l2ZW4gaW50ZWdlciBwYXJhbWF0ZXJzLiBTZWUgUmVjdC5oIGZvciBtb3JlLlxuICAgKiBAcGFyYW0gbGVmdCAtIFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIHVwcGVyLWxlZnQgY29ybmVyLlxuICAgKiBAcGFyYW0gdG9wICAtIFRoZSB5IGNvb3JkaW5hdGUgb2YgdGhlIHVwcGVyLWxlZnQgY29ybmVyLlxuICAgKiBAcGFyYW0gcmlnaHQgLSBUaGUgeCBjb29yZGluYXRlIG9mIHRoZSBsb3dlci1yaWdodCBjb3JuZXIuXG4gICAqIEBwYXJhbSBib3R0b20gLSBUaGUgeSBjb29yZGluYXRlIG9mIHRoZSBsb3dlci1yaWdodCBjb3JuZXIuXG4gICAqL1xuICBMVFJCaVJlY3QobGVmdDogbnVtYmVyLCB0b3A6IG51bWJlciwgcmlnaHQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIpOiBJUmVjdDtcblxuICAvKipcbiAgICogUmV0dXJucyBhIHJlY3RhbmdsZSB3aXRoIHRoZSBnaXZlbiBwYXJhbWF0ZXJzLiBTZWUgUmVjdC5oIGZvciBtb3JlLlxuICAgKiBAcGFyYW0geCAtIFRoZSB4IGNvb3JkaW5hdGUgb2YgdGhlIHVwcGVyLWxlZnQgY29ybmVyLlxuICAgKiBAcGFyYW0geSAgLSBUaGUgeSBjb29yZGluYXRlIG9mIHRoZSB1cHBlci1sZWZ0IGNvcm5lci5cbiAgICogQHBhcmFtIHdpZHRoIC0gVGhlIHdpZHRoIG9mIHRoZSByZWN0YW5nbGUuXG4gICAqIEBwYXJhbSBoZWlnaHQgLSBUaGUgaGVpZ2h0IG9mIHRoZSByZWN0YW5nbGUuXG4gICAqL1xuICBYWVdIaVJlY3QoeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogSVJlY3Q7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSByZWN0YW5nbGUgd2l0aCByb3VuZGVkIGNvcm5lcnMgY29uc2lzdGluZyBvZiB0aGUgZ2l2ZW4gcmVjdGFuZ2xlIGFuZFxuICAgKiB0aGUgc2FtZSByYWRpdXNYIGFuZCByYWRpdXNZIGZvciBhbGwgZm91ciBjb3JuZXJzLlxuICAgKiBAcGFyYW0gcmVjdCAtIFRoZSBiYXNlIHJlY3RhbmdsZS5cbiAgICogQHBhcmFtIHJ4IC0gVGhlIHJhZGl1cyBvZiB0aGUgY29ybmVycyBpbiB0aGUgeCBkaXJlY3Rpb24uXG4gICAqIEBwYXJhbSByeSAtIFRoZSByYWRpdXMgb2YgdGhlIGNvcm5lcnMgaW4gdGhlIHkgZGlyZWN0aW9uLlxuICAgKi9cbiAgUlJlY3RYWShyZWN0OiBJbnB1dFJlY3QsIHJ4OiBudW1iZXIsIHJ5OiBudW1iZXIpOiBSUmVjdDtcblxuICAvKipcbiAgICogR2VuZXJhdGUgYm91bmRpbmcgYm94IGZvciBzaGFkb3dzIHJlbGF0aXZlIHRvIHBhdGguIEluY2x1ZGVzIGJvdGggdGhlIGFtYmllbnQgYW5kIHNwb3RcbiAgICogc2hhZG93IGJvdW5kcy4gVGhpcyBwYWlycyB3aXRoIENhbnZhcy5kcmF3U2hhZG93KCkuXG4gICAqIFNlZSBTa1NoYWRvd1V0aWxzLmggZm9yIG1vcmUgZGV0YWlscy5cbiAgICogQHBhcmFtIGN0bSAtIEN1cnJlbnQgdHJhbnNmb3JtYXRpb24gbWF0cml4IHRvIGRldmljZSBzcGFjZS5cbiAgICogQHBhcmFtIHBhdGggLSBUaGUgb2NjbHVkZXIgdXNlZCB0byBnZW5lcmF0ZSB0aGUgc2hhZG93cy5cbiAgICogQHBhcmFtIHpQbGFuZVBhcmFtcyAtIFZhbHVlcyBmb3IgdGhlIHBsYW5lIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgdGhlIFogb2Zmc2V0IG9mIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgb2NjbHVkZXIgZnJvbSB0aGUgY2FudmFzIGJhc2VkIG9uIGxvY2FsIHggYW5kIHkgdmFsdWVzICh0aGUgY3VycmVudFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4IGlzIG5vdCBhcHBsaWVkKS5cbiAgICogQHBhcmFtIGxpZ2h0UG9zIC0gVGhlIDNEIHBvc2l0aW9uIG9mIHRoZSBsaWdodCByZWxhdGl2ZSB0byB0aGUgY2FudmFzIHBsYW5lLiBUaGlzIGlzXG4gICAqICAgICAgICAgICAgICAgICAgIGluZGVwZW5kZW50IG9mIHRoZSBjYW52YXMncyBjdXJyZW50IG1hdHJpeC5cbiAgICogQHBhcmFtIGxpZ2h0UmFkaXVzIC0gVGhlIHJhZGl1cyBvZiB0aGUgZGlzYyBsaWdodC5cbiAgICogQHBhcmFtIGZsYWdzIC0gU2VlIFNrU2hhZG93RmxhZ3MuaDsgMCBtZWFucyB1c2UgZGVmYXVsdCBvcHRpb25zLlxuICAgKiBAcGFyYW0gZHN0UmVjdCAtIGlmIHByb3ZpZGVkLCB0aGUgYm91bmRzIHdpbGwgYmUgY29waWVkIGludG8gdGhpcyByZWN0IGluc3RlYWQgb2YgYWxsb2NhdGluZ1xuICAgKiAgICAgICAgICAgICAgICAgIGEgbmV3IG9uZS5cbiAgICogQHJldHVybnMgVGhlIGJvdW5kaW5nIHJlY3RhbmdsZSBvciBudWxsIGlmIGl0IGNvdWxkIG5vdCBiZSBjb21wdXRlZC5cbiAgICovXG4gIGdldFNoYWRvd0xvY2FsQm91bmRzKFxuICAgIGN0bTogSW5wdXRNYXRyaXgsXG4gICAgcGF0aDogUGF0aCxcbiAgICB6UGxhbmVQYXJhbXM6IElucHV0VmVjdG9yMyxcbiAgICBsaWdodFBvczogSW5wdXRWZWN0b3IzLFxuICAgIGxpZ2h0UmFkaXVzOiBudW1iZXIsXG4gICAgZmxhZ3M6IG51bWJlcixcbiAgICBkc3RSZWN0PzogUmVjdCxcbiAgKTogUmVjdCB8IG51bGw7XG5cbiAgLyoqXG4gICAqIE1hbGxvYyByZXR1cm5zIGEgVHlwZWRBcnJheSBiYWNrZWQgYnkgdGhlIEMrKyBtZW1vcnkgb2YgdGhlXG4gICAqIGdpdmVuIGxlbmd0aC4gSXQgc2hvdWxkIG9ubHkgYmUgdXNlZCBieSBhZHZhbmNlZCB1c2VycyB3aG9cbiAgICogY2FuIG1hbmFnZSBtZW1vcnkgYW5kIGluaXRpYWxpemUgdmFsdWVzIHByb3Blcmx5LiBXaGVuIHVzZWRcbiAgICogY29ycmVjdGx5LCBpdCBjYW4gc2F2ZSBjb3B5aW5nIG9mIGRhdGEgYmV0d2VlbiBKUyBhbmQgQysrLlxuICAgKiBXaGVuIHVzZWQgaW5jb3JyZWN0bHksIGl0IGNhbiBsZWFkIHRvIG1lbW9yeSBsZWFrcy5cbiAgICogQW55IG1lbW9yeSBhbGxvY2F0ZWQgYnkgQ2FudmFzS2l0Lk1hbGxvYyBuZWVkcyB0byBiZSByZWxlYXNlZCB3aXRoIENhbnZhc0tpdC5GcmVlLlxuICAgKlxuICAgKiBjb25zdCBtT2JqID0gQ2FudmFzS2l0Lk1hbGxvYyhGbG9hdDMyQXJyYXksIDIwKTtcbiAgICogR2V0IGEgVHlwZWRBcnJheSB2aWV3IGFyb3VuZCB0aGUgbWFsbG9jJ2QgbWVtb3J5ICh0aGlzIGRvZXMgbm90IGNvcHkgYW55dGhpbmcpLlxuICAgKiBjb25zdCB0YSA9IG1PYmoudG9UeXBlZEFycmF5KCk7XG4gICAqIC8vIHN0b3JlIGRhdGEgaW50byB0YVxuICAgKiBjb25zdCBjZiA9IENhbnZhc0tpdC5Db2xvckZpbHRlci5NYWtlTWF0cml4KHRhKTsgLy8gbU9iaiBjb3VsZCBhbHNvIGJlIHVzZWQuXG4gICAqXG4gICAqIC8vIGV2ZW50dWFsbHkuLi5cbiAgICogQ2FudmFzS2l0LkZyZWUobU9iaik7XG4gICAqXG4gICAqIEBwYXJhbSB0eXBlZEFycmF5IC0gY29uc3RydWN0b3IgZm9yIHRoZSB0eXBlZEFycmF5LlxuICAgKiBAcGFyYW0gbGVuIC0gbnVtYmVyIG9mICplbGVtZW50cyogdG8gc3RvcmUuXG4gICAqL1xuICBNYWxsb2ModHlwZWRBcnJheTogVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBsZW46IG51bWJlcik6IE1hbGxvY09iajtcblxuICAvKipcbiAgICogQXMgTWFsbG9jIGJ1dCBmb3IgR2x5cGhJRHMuIFRoaXMgaGVscGVyIGV4aXN0cyB0byBtYWtlIHN1cmUgdGhlIEpTIHNpZGUgYW5kIHRoZSBDKysgc2lkZVxuICAgKiBzdGF5IGluIGFncmVlbWVudCB3aXRoIGhvdyB3aWRlIEdseXBoSURzIGFyZS5cbiAgICogQHBhcmFtIGxlbiAtIG51bWJlciBvZiBHbHlwaElEcyB0byBtYWtlIHNwYWNlIGZvci5cbiAgICovXG4gIE1hbGxvY0dseXBoSURzKGxlbjogbnVtYmVyKTogTWFsbG9jT2JqO1xuXG4gIC8qKlxuICAgKiBGcmVlIGZyZWVzIHRoZSBtZW1vcnkgcmV0dXJuZWQgYnkgTWFsbG9jLlxuICAgKiBBbnkgbWVtb3J5IGFsbG9jYXRlZCBieSBDYW52YXNLaXQuTWFsbG9jIG5lZWRzIHRvIGJlIHJlbGVhc2VkIHdpdGggQ2FudmFzS2l0LkZyZWUuXG4gICAqL1xuICBGcmVlKG06IE1hbGxvY09iaik6IHZvaWQ7XG5cbiAgLy8gU3VyZmFjZSByZWxhdGVkIGZ1bmN0aW9uc1xuICAvKipcbiAgICogQ3JlYXRlcyBhIFN1cmZhY2Ugb24gYSBnaXZlbiBjYW52YXMuIElmIGJvdGggR1BVIGFuZCBDUFUgbW9kZXMgaGF2ZSBiZWVuIGNvbXBpbGVkIGluLCB0aGlzXG4gICAqIHdpbGwgZmlyc3QgdHJ5IHRvIGNyZWF0ZSBhIEdQVSBzdXJmYWNlIGFuZCB0aGVuIGZhbGxiYWNrIHRvIGEgQ1BVIG9uZSBpZiB0aGF0IGZhaWxzLiBJZiBqdXN0XG4gICAqIHRoZSBDUFUgbW9kZSBoYXMgYmVlbiBjb21waWxlZCBpbiwgYSBDUFUgc3VyZmFjZSB3aWxsIGJlIGNyZWF0ZWQuXG4gICAqIEBwYXJhbSBjYW52YXMgLSBlaXRoZXIgdGhlIGNhbnZhcyBlbGVtZW50IGl0c2VsZiBvciBhIHN0cmluZyB3aXRoIHRoZSBET00gaWQgb2YgaXQuXG4gICAqL1xuICBNYWtlQ2FudmFzU3VyZmFjZShjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50IHwgc3RyaW5nKTogU3VyZmFjZSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBSYXN0ZXIgKENQVSkgU3VyZmFjZSB0aGF0IHdpbGwgZHJhdyBpbnRvIHRoZSBwcm92aWRlZCBNYWxsb2MnZCBidWZmZXIuIFRoaXMgYWxsb3dzXG4gICAqIGNsaWVudHMgdG8gZWZmaWNpZW50bHkgYmUgYWJsZSB0byByZWFkIHRoZSBjdXJyZW50IHBpeGVscyB3L28gaGF2aW5nIHRvIGNvcHkuXG4gICAqIFRoZSBsZW5ndGggb2YgcGl4ZWxzIG11c3QgYmUgYXQgbGVhc3QgaGVpZ2h0ICogYnl0ZXNQZXJSb3cgYnl0ZXMgYmlnLlxuICAgKiBAcGFyYW0gaWlcbiAgICogQHBhcmFtIHBpeGVsc1xuICAgKiBAcGFyYW0gYnl0ZXNQZXJSb3cgLSBIb3cgbWFueSBieXRlcyBhcmUgcGVyIHJvdy4gVGhpcyBpcyBhdCBsZWFzdCB3aWR0aCAqIGJ5dGVzUGVyQ29sb3JUeXBlLiBGb3IgZXhhbXBsZSxcbiAgICogICAgICAgICAgICAgICAgICAgICAgYW4gODg4OCBDb2xvclR5cGUgaGFzIDQgYnl0ZXMgcGVyIHBpeGVsLCBzbyBhIDUgcGl4ZWwgd2lkZSA4ODg4IHN1cmZhY2UgbmVlZHMgYXQgbGVhc3RcbiAgICogICAgICAgICAgICAgICAgICAgICAgNSAqIDQgPSAyMCBieXRlc1BlclJvdy4gU29tZSBjbGllbnRzIG1heSBoYXZlIG1vcmUgdGhhbiB0aGUgdXN1YWwgdG8gbWFrZSB0aGUgZGF0YSBsaW5lXG4gICAqICAgICAgICAgICAgICAgICAgICAgIHVwIHdpdGggYSBwYXJ0aWN1bGFyIG11bHRpcGxlLlxuICAgKi9cbiAgTWFrZVJhc3RlckRpcmVjdFN1cmZhY2UoXG4gICAgaWk6IEltYWdlSW5mbyxcbiAgICBwaXhlbHM6IE1hbGxvY09iaixcbiAgICBieXRlc1BlclJvdzogbnVtYmVyLFxuICApOiBTdXJmYWNlIHwgbnVsbDtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIENQVSBiYWNrZWQgKGFrYSByYXN0ZXIpIHN1cmZhY2UuXG4gICAqIEBwYXJhbSBjYW52YXMgLSBlaXRoZXIgdGhlIGNhbnZhcyBlbGVtZW50IGl0c2VsZiBvciBhIHN0cmluZyB3aXRoIHRoZSBET00gaWQgb2YgaXQuXG4gICAqL1xuICBNYWtlU1dDYW52YXNTdXJmYWNlKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQgfCBzdHJpbmcpOiBTdXJmYWNlIHwgbnVsbDtcblxuICAvKipcbiAgICogQSBoZWxwZXIgZm9yIGNyZWF0aW5nIGEgV2ViR0wgYmFja2VkIChha2EgR1BVKSBzdXJmYWNlIGFuZCBmYWxsaW5nIGJhY2sgdG8gYSBDUFUgc3VyZmFjZSBpZlxuICAgKiB0aGUgR1BVIG9uZSBjYW5ub3QgYmUgY3JlYXRlZC4gVGhpcyB3b3JrcyBmb3IgYm90aCBXZWJHTCAxIGFuZCBXZWJHTCAyLlxuICAgKiBAcGFyYW0gY2FudmFzIC0gRWl0aGVyIHRoZSBjYW52YXMgZWxlbWVudCBpdHNlbGYgb3IgYSBzdHJpbmcgd2l0aCB0aGUgRE9NIGlkIG9mIGl0LlxuICAgKiBAcGFyYW0gY29sb3JTcGFjZSAtIE9uZSBvZiB0aGUgc3VwcG9ydGVkIGNvbG9yIHNwYWNlcy4gRGVmYXVsdCBpcyBTUkdCLlxuICAgKiBAcGFyYW0gb3B0cyAtIE9wdGlvbnMgdGhhdCB3aWxsIGdldCBwYXNzZWQgdG8gdGhlIGNyZWF0aW9uIG9mIHRoZSBXZWJHTCBjb250ZXh0LlxuICAgKi9cbiAgTWFrZVdlYkdMQ2FudmFzU3VyZmFjZShcbiAgICBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50IHwgc3RyaW5nLFxuICAgIGNvbG9yU3BhY2U/OiBDb2xvclNwYWNlLFxuICAgIG9wdHM/OiBXZWJHTE9wdGlvbnMsXG4gICk6IFN1cmZhY2UgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgQ1BVIGJhY2tlZCBzdXJmYWNlIHdpdGggdGhlIGdpdmVuIGRpbWVuc2lvbnMsIGFuIFNSR0IgY29sb3JzcGFjZSwgVW5wcmVtdWxcbiAgICogYWxwaGFUeXBlIGFuZCA4ODg4IGNvbG9yIHR5cGUuIFRoZSBwaXhlbHMgYmVsb25naW5nIHRvIHRoaXMgc3VyZmFjZSAgd2lsbCBiZSBpbiBtZW1vcnkgYW5kXG4gICAqIG5vdCB2aXNpYmxlLlxuICAgKiBAcGFyYW0gd2lkdGggLSBudW1iZXIgb2YgcGl4ZWxzIG9mIHRoZSB3aWR0aCBvZiB0aGUgZHJhd2FibGUgYXJlYS5cbiAgICogQHBhcmFtIGhlaWdodCAtIG51bWJlciBvZiBwaXhlbHMgb2YgdGhlIGhlaWdodCBvZiB0aGUgZHJhd2FibGUgYXJlYS5cbiAgICovXG4gIE1ha2VTdXJmYWNlKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogU3VyZmFjZSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBXZWJHTCBDb250ZXh0IGZyb20gdGhlIGdpdmVuIGNhbnZhcyB3aXRoIHRoZSBnaXZlbiBvcHRpb25zLiBJZiBvcHRpb25zIGFyZSBvbWl0dGVkLFxuICAgKiBzZW5zaWJsZSBkZWZhdWx0cyB3aWxsIGJlIHVzZWQuXG4gICAqIEBwYXJhbSBjYW52YXNcbiAgICogQHBhcmFtIG9wdHNcbiAgICovXG4gIEdldFdlYkdMQ29udGV4dChcbiAgICBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LFxuICAgIG9wdHM/OiBXZWJHTE9wdGlvbnMsXG4gICk6IFdlYkdMQ29udGV4dEhhbmRsZTtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIEdyRGlyZWN0Q29udGV4dCBmcm9tIHRoZSBnaXZlbiBXZWJHTCBDb250ZXh0LlxuICAgKiBAcGFyYW0gY3R4XG4gICAqL1xuICBNYWtlR3JDb250ZXh0KGN0eDogV2ViR0xDb250ZXh0SGFuZGxlKTogR3JEaXJlY3RDb250ZXh0IHwgbnVsbDtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIFN1cmZhY2UgdGhhdCB3aWxsIGJlIGRyYXduIHRvIHRoZSBnaXZlbiBHckRpcmVjdENvbnRleHQgKGFuZCBzaG93IHVwIG9uIHNjcmVlbikuXG4gICAqIEBwYXJhbSBjdHhcbiAgICogQHBhcmFtIHdpZHRoIC0gbnVtYmVyIG9mIHBpeGVscyBvZiB0aGUgd2lkdGggb2YgdGhlIHZpc2libGUgYXJlYS5cbiAgICogQHBhcmFtIGhlaWdodCAtIG51bWJlciBvZiBwaXhlbHMgb2YgdGhlIGhlaWdodCBvZiB0aGUgdmlzaWJsZSBhcmVhLlxuICAgKiBAcGFyYW0gY29sb3JTcGFjZVxuICAgKi9cbiAgTWFrZU9uU2NyZWVuR0xTdXJmYWNlKFxuICAgIGN0eDogR3JEaXJlY3RDb250ZXh0LFxuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgY29sb3JTcGFjZTogQ29sb3JTcGFjZSxcbiAgKTogU3VyZmFjZSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSAobm9uLXZpc2libGUpIFN1cmZhY2Ugb24gdGhlIEdQVS4gSXQgaGFzIHRoZSBnaXZlbiBkaW1lbnNpb25zIGFuZCB1c2VzIDg4ODhcbiAgICogY29sb3IgZGVwdGggYW5kIHByZW11bHRpcGxpZWQgYWxwaGEuIFNlZSBTdXJmYWNlLmggZm9yIG1vcmUgZGV0YWlscy5cbiAgICogQHBhcmFtIGN0eFxuICAgKiBAcGFyYW0gd2lkdGhcbiAgICogQHBhcmFtIGhlaWdodFxuICAgKi9cbiAgTWFrZVJlbmRlclRhcmdldChcbiAgICBjdHg6IEdyRGlyZWN0Q29udGV4dCxcbiAgICB3aWR0aDogbnVtYmVyLFxuICAgIGhlaWdodDogbnVtYmVyLFxuICApOiBTdXJmYWNlIHwgbnVsbDtcblxuICAvKipcbiAgICogUmV0dXJucyBhIChub24tdmlzaWJsZSkgU3VyZmFjZSBvbiB0aGUgR1BVLiBJdCBoYXMgdGhlIHNldHRpbmdzIHByb3ZpZGVkIGJ5IGltYWdlIGluZm8uXG4gICAqIFNlZSBTdXJmYWNlLmggZm9yIG1vcmUgZGV0YWlscy5cbiAgICogQHBhcmFtIGN0eFxuICAgKiBAcGFyYW0gaW5mb1xuICAgKi9cbiAgTWFrZVJlbmRlclRhcmdldChjdHg6IEdyRGlyZWN0Q29udGV4dCwgaW5mbzogSW1hZ2VJbmZvKTogU3VyZmFjZSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgdGhlIGFzc29jaWF0ZWQgV2ViR0xDb250ZXh0LiBGdW5jdGlvbiBub3QgYXZhaWxhYmxlIG9uIHRoZSBDUFUgdmVyc2lvbi5cbiAgICogQHBhcmFtIGN0eFxuICAgKi9cbiAgZGVsZXRlQ29udGV4dChjdHg6IFdlYkdMQ29udGV4dEhhbmRsZSk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG1heCBzaXplIG9mIHRoZSBnbG9iYWwgY2FjaGUgZm9yIGJpdG1hcHMgdXNlZCBieSBDYW52YXNLaXQuXG4gICAqL1xuICBnZXREZWNvZGVDYWNoZUxpbWl0Qnl0ZXMoKTogbnVtYmVyO1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBzaXplIG9mIHRoZSBnbG9iYWwgY2FjaGUgZm9yIGJpdG1hcHMgdXNlZCBieSBDYW52YXNLaXQuXG4gICAqL1xuICBnZXREZWNvZGVDYWNoZVVzZWRCeXRlcygpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIG1heCBzaXplIG9mIHRoZSBnbG9iYWwgY2FjaGUgZm9yIGJpdG1hcHMgdXNlZCBieSBDYW52YXNLaXQuXG4gICAqIEBwYXJhbSBzaXplIC0gbnVtYmVyIG9mIGJ5dGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2FjaGUgYml0bWFwcy5cbiAgICovXG4gIHNldERlY29kZUNhY2hlTGltaXRCeXRlcyhzaXplOiBudW1iZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBEZWNvZGVzIHRoZSBnaXZlbiBieXRlcyBpbnRvIGFuIGFuaW1hdGVkIGltYWdlLiBSZXR1cm5zIG51bGwgaWYgdGhlIGJ5dGVzIHdlcmUgaW52YWxpZC5cbiAgICogVGhlIHBhc3NlZCBpbiBieXRlcyB3aWxsIGJlIGNvcGllZCBpbnRvIHRoZSBXQVNNIGhlYXAsIHNvIHRoZSBjYWxsZXIgY2FuIGRpc3Bvc2Ugb2YgdGhlbS5cbiAgICogQHBhcmFtIGJ5dGVzXG4gICAqL1xuICBNYWtlQW5pbWF0ZWRJbWFnZUZyb21FbmNvZGVkKFxuICAgIGJ5dGVzOiBVaW50OEFycmF5IHwgQXJyYXlCdWZmZXIsXG4gICk6IEFuaW1hdGVkSW1hZ2UgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGVtdWxhdGVkIENhbnZhczJEIG9mIHRoZSBnaXZlbiBzaXplLlxuICAgKiBAcGFyYW0gd2lkdGhcbiAgICogQHBhcmFtIGhlaWdodFxuICAgKi9cbiAgTWFrZUNhbnZhcyh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IEVtdWxhdGVkQ2FudmFzMkQ7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gaW1hZ2Ugd2l0aCB0aGUgZ2l2ZW4gcGl4ZWwgZGF0YSBhbmQgZm9ybWF0LlxuICAgKiBOb3RlIHRoYXQgd2Ugd2lsbCBhbHdheXMgbWFrZSBhIGNvcHkgb2YgdGhlIHBpeGVsIGRhdGEsIGJlY2F1c2Ugb2YgaW5jb25zaXN0ZW5jaWVzIGluXG4gICAqIGJlaGF2aW9yIGJldHdlZW4gR1BVIGFuZCBDUFUgKGkuZS4gdGhlIHBpeGVsIGRhdGEgd2lsbCBiZSB0dXJuZWQgaW50byBhIEdQVSB0ZXh0dXJlIGFuZFxuICAgKiBub3QgbW9kaWZpYWJsZSBhZnRlciBjcmVhdGlvbikuXG4gICAqXG4gICAqIEBwYXJhbSBpbmZvXG4gICAqIEBwYXJhbSBieXRlcyAtIGJ5dGVzIHJlcHJlc2VudGluZyB0aGUgcGl4ZWwgZGF0YS5cbiAgICogQHBhcmFtIGJ5dGVzUGVyUm93XG4gICAqL1xuICBNYWtlSW1hZ2UoXG4gICAgaW5mbzogSW1hZ2VJbmZvLFxuICAgIGJ5dGVzOiBudW1iZXJbXSB8IFVpbnQ4QXJyYXkgfCBVaW50OENsYW1wZWRBcnJheSxcbiAgICBieXRlc1BlclJvdzogbnVtYmVyLFxuICApOiBJbWFnZSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBJbWFnZSBiYWNrZWQgYnkgdGhlIGVuY29kZWQgZGF0YSwgYnV0IGF0dGVtcHQgdG8gZGVmZXIgZGVjb2RpbmcgdW50aWwgdGhlIGltYWdlXG4gICAqIGlzIGFjdHVhbGx5IHVzZWQvZHJhd24uIFRoaXMgZGVmZXJyYWwgYWxsb3dzIHRoZSBzeXN0ZW0gdG8gY2FjaGUgdGhlIHJlc3VsdCwgZWl0aGVyIG9uIHRoZVxuICAgKiBDUFUgb3Igb24gdGhlIEdQVSwgZGVwZW5kaW5nIG9uIHdoZXJlIHRoZSBpbWFnZSBpcyBkcmF3bi5cbiAgICogVGhpcyBkZWNvZGluZyB1c2VzIHRoZSBjb2RlY3MgdGhhdCBoYXZlIGJlZW4gY29tcGlsZWQgaW50byBDYW52YXNLaXQuIElmIHRoZSBieXRlcyBhcmVcbiAgICogaW52YWxpZCAob3IgYW4gdW5yZWNvZ25pemVkIGNvZGVjKSwgbnVsbCB3aWxsIGJlIHJldHVybmVkLiBTZWUgSW1hZ2UuaCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKiBAcGFyYW0gYnl0ZXNcbiAgICovXG4gIE1ha2VJbWFnZUZyb21FbmNvZGVkKGJ5dGVzOiBVaW50OEFycmF5IHwgQXJyYXlCdWZmZXIpOiBJbWFnZSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSW1hZ2Ugd2l0aCB0aGUgZGF0YSBmcm9tIHRoZSBwcm92aWRlZCBDYW52YXNJbWFnZVNvdXJjZSAoZS5nLiA8aW1nPikuIFRoaXMgd2lsbFxuICAgKiB1c2UgdGhlIGJyb3dzZXIncyBidWlsdCBpbiBjb2RlY3MsIGluIHRoYXQgc3JjIHdpbGwgYmUgZHJhd24gdG8gYSBjYW52YXMgYW5kIHRoZW4gcmVhZGJhY2tcbiAgICogYW5kIHBsYWNlZCBpbnRvIGFuIEltYWdlLlxuICAgKiBAcGFyYW0gc3JjXG4gICAqL1xuICBNYWtlSW1hZ2VGcm9tQ2FudmFzSW1hZ2VTb3VyY2Uoc3JjOiBDYW52YXNJbWFnZVNvdXJjZSk6IEltYWdlO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIFNrUGljdHVyZSB3aGljaCBoYXMgYmVlbiBzZXJpYWxpemVkIHByZXZpb3VzbHkgdG8gdGhlIGdpdmVuIGJ5dGVzLlxuICAgKiBAcGFyYW0gYnl0ZXNcbiAgICovXG4gIE1ha2VQaWN0dXJlKGJ5dGVzOiBVaW50OEFycmF5IHwgQXJyYXlCdWZmZXIpOiBTa1BpY3R1cmUgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIFZlcnRpY2VzIGJhc2VkIG9uIHRoZSBnaXZlbiBwb3NpdGlvbnMgYW5kIG9wdGlvbmFsIHBhcmFtZXRlcnMuXG4gICAqIFNlZSBTa1ZlcnRpY2VzLmggKGVzcGVjaWFsbHkgdGhlIEJ1aWxkZXIpIGZvciBtb3JlIGRldGFpbHMuXG4gICAqIEBwYXJhbSBtb2RlXG4gICAqIEBwYXJhbSBwb3NpdGlvbnNcbiAgICogQHBhcmFtIHRleHR1cmVDb29yZGluYXRlc1xuICAgKiBAcGFyYW0gY29sb3JzIC0gZWl0aGVyIGEgbGlzdCBvZiBpbnQgY29sb3JzIG9yIGEgZmxhdHRlbmVkIGNvbG9yIGFycmF5LlxuICAgKiBAcGFyYW0gaW5kaWNlc1xuICAgKiBAcGFyYW0gaXNWb2xhdGlsZVxuICAgKi9cbiAgTWFrZVZlcnRpY2VzKFxuICAgIG1vZGU6IFZlcnRleE1vZGUsXG4gICAgcG9zaXRpb25zOiBJbnB1dEZsYXR0ZW5lZFBvaW50QXJyYXksXG4gICAgdGV4dHVyZUNvb3JkaW5hdGVzPzogSW5wdXRGbGF0dGVuZWRQb2ludEFycmF5IHwgbnVsbCxcbiAgICBjb2xvcnM/OiBGbG9hdDMyQXJyYXkgfCBDb2xvckludEFycmF5IHwgbnVsbCxcbiAgICBpbmRpY2VzPzogbnVtYmVyW10gfCBudWxsLFxuICAgIGlzVm9sYXRpbGU/OiBib29sZWFuLFxuICApOiBWZXJ0aWNlcztcblxuICAvKipcbiAgICogUmV0dXJucyBhIFNrb3R0aWUgYW5pbWF0aW9uIGJ1aWx0IGZyb20gdGhlIHByb3ZpZGVkIGpzb24gc3RyaW5nLlxuICAgKiBSZXF1aXJlcyB0aGF0IFNrb3R0aWUgYmUgY29tcGlsZWQgaW50byBDYW52YXNLaXQuXG4gICAqIEBwYXJhbSBqc29uXG4gICAqL1xuICBNYWtlQW5pbWF0aW9uKGpzb246IHN0cmluZyk6IFNrb3R0aWVBbmltYXRpb247XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBtYW5hZ2VkIFNrb3R0aWUgYW5pbWF0aW9uIGJ1aWx0IGZyb20gdGhlIHByb3ZpZGVkIGpzb24gc3RyaW5nIGFuZCBhc3NldHMuXG4gICAqIFJlcXVpcmVzIHRoYXQgU2tvdHRpZSBiZSBjb21waWxlZCBpbnRvIENhbnZhc0tpdC5cbiAgICogQHBhcmFtIGpzb25cbiAgICogQHBhcmFtIGFzc2V0cyAtIGEgZGljdGlvbmFyeSBvZiBuYW1lZCBibG9iczogeyBrZXk6IEFycmF5QnVmZmVyLCAuLi4gfVxuICAgKiBAcGFyYW0gZmlsdGVyUHJlZml4IC0gYW4gb3B0aW9uYWwgc3RyaW5nIGFjdGluZyBhcyBhIG5hbWUgZmlsdGVyIGZvciBzZWxlY3RpbmcgXCJpbnRlcmVzdGluZ1wiXG4gICAqICAgICAgICAgICAgICAgICAgICAgICBMb3R0aWUgcHJvcGVydGllcyAoc3VyZmFjZWQgaW4gdGhlIGVtYmVkZGVkIHBsYXllciBjb250cm9scylcbiAgICogQHBhcmFtIHNvdW5kTWFwIC0gYW4gb3B0aW9uYWwgbWFwcGluZyBvZiBzb3VuZCBpZGVudGlmaWVycyAoc3RyaW5ncykgdG8gQXVkaW9QbGF5ZXJzLlxuICAgKiAgICAgICAgICAgICAgICAgICBPbmx5IG5lZWRlZCBpZiB0aGUgYW5pbWF0aW9uIHN1cHBvcnRzIHNvdW5kLlxuICAgKi9cbiAgTWFrZU1hbmFnZWRBbmltYXRpb24oXG4gICAganNvbjogc3RyaW5nLFxuICAgIGFzc2V0cz86IFJlY29yZDxzdHJpbmcsIEFycmF5QnVmZmVyPixcbiAgICBmaWx0ZXJQcmVmaXg/OiBzdHJpbmcsXG4gICAgc291bmRNYXA/OiBTb3VuZE1hcCxcbiAgKTogTWFuYWdlZFNrb3R0aWVBbmltYXRpb247XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBQYXJ0aWNsZXMgZWZmZWN0IGJ1aWx0IGZyb20gdGhlIHByb3ZpZGVkIGpzb24gc3RyaW5nIGFuZCBhc3NldHMuXG4gICAqIFJlcXVpcmVzIHRoYXQgUGFydGljbGVzIGJlIGNvbXBpbGVkIGludG8gQ2FudmFzS2l0XG4gICAqIEBwYXJhbSBqc29uXG4gICAqIEBwYXJhbSBhc3NldHNcbiAgICovXG4gIE1ha2VQYXJ0aWNsZXMoanNvbjogc3RyaW5nLCBhc3NldHM/OiBSZWNvcmQ8c3RyaW5nLCBBcnJheUJ1ZmZlcj4pOiBQYXJ0aWNsZXM7XG5cbiAgLy8gQ29uc3RydWN0b3JzLCBpLmUuIHRoaW5ncyBtYWRlIHdpdGggYG5ldyBDYW52YXNLaXQuRm9vKClgO1xuICByZWFkb25seSBJbWFnZURhdGE6IEltYWdlRGF0YUNvbnN0cnVjdG9yO1xuICByZWFkb25seSBQYXJhZ3JhcGhTdHlsZTogUGFyYWdyYXBoU3R5bGVDb25zdHJ1Y3RvcjtcbiAgcmVhZG9ubHkgQ29udG91ck1lYXN1cmVJdGVyOiBDb250b3VyTWVhc3VyZUl0ZXJDb25zdHJ1Y3RvcjtcbiAgcmVhZG9ubHkgRm9udDogRm9udENvbnN0cnVjdG9yO1xuICByZWFkb25seSBQYWludDogRGVmYXVsdENvbnN0cnVjdG9yPFBhaW50PjtcbiAgcmVhZG9ubHkgUGF0aDogUGF0aENvbnN0cnVjdG9yQW5kRmFjdG9yeTtcbiAgcmVhZG9ubHkgUGljdHVyZVJlY29yZGVyOiBEZWZhdWx0Q29uc3RydWN0b3I8UGljdHVyZVJlY29yZGVyPjtcbiAgcmVhZG9ubHkgVGV4dFN0eWxlOiBUZXh0U3R5bGVDb25zdHJ1Y3RvcjtcblxuICAvLyBGYWN0b3JpZXMsIGkuZS4gdGhpbmdzIG1hZGUgd2l0aCBDYW52YXNLaXQuRm9vLk1ha2VUdXJib0VuY2Fwc3VsYXRvcigpXG4gIHJlYWRvbmx5IFBhcmFncmFwaEJ1aWxkZXI6IFBhcmFncmFwaEJ1aWxkZXJGYWN0b3J5O1xuICByZWFkb25seSBDb2xvckZpbHRlcjogQ29sb3JGaWx0ZXJGYWN0b3J5O1xuICByZWFkb25seSBGb250TWdyOiBGb250TWdyRmFjdG9yeTtcbiAgcmVhZG9ubHkgSW1hZ2VGaWx0ZXI6IEltYWdlRmlsdGVyRmFjdG9yeTtcbiAgcmVhZG9ubHkgTWFza0ZpbHRlcjogTWFza0ZpbHRlckZhY3Rvcnk7XG4gIHJlYWRvbmx5IFBhdGhFZmZlY3Q6IFBhdGhFZmZlY3RGYWN0b3J5O1xuICByZWFkb25seSBSdW50aW1lRWZmZWN0OiBSdW50aW1lRWZmZWN0RmFjdG9yeTtcbiAgcmVhZG9ubHkgU2hhZGVyOiBTaGFkZXJGYWN0b3J5O1xuICByZWFkb25seSBUZXh0QmxvYjogVGV4dEJsb2JGYWN0b3J5O1xuICByZWFkb25seSBUeXBlZmFjZTogVHlwZWZhY2VGYWN0b3J5O1xuICByZWFkb25seSBUeXBlZmFjZUZvbnRQcm92aWRlcjogVHlwZWZhY2VGb250UHJvdmlkZXJGYWN0b3J5O1xuXG4gIC8vIE1pc2NcbiAgcmVhZG9ubHkgQ29sb3JNYXRyaXg6IENvbG9yTWF0cml4SGVscGVycztcbiAgcmVhZG9ubHkgTWF0cml4OiBNYXRyaXgzeDNIZWxwZXJzO1xuICByZWFkb25seSBNNDQ6IE1hdHJpeDR4NEhlbHBlcnM7XG4gIHJlYWRvbmx5IFZlY3RvcjogVmVjdG9ySGVscGVycztcblxuICAvLyBDb3JlIEVudW1zXG4gIHJlYWRvbmx5IEFscGhhVHlwZTogQWxwaGFUeXBlRW51bVZhbHVlcztcbiAgcmVhZG9ubHkgQmxlbmRNb2RlOiBCbGVuZE1vZGVFbnVtVmFsdWVzO1xuICByZWFkb25seSBCbHVyU3R5bGU6IEJsdXJTdHlsZUVudW1WYWx1ZXM7XG4gIHJlYWRvbmx5IENsaXBPcDogQ2xpcE9wRW51bVZhbHVlcztcbiAgcmVhZG9ubHkgQ29sb3JUeXBlOiBDb2xvclR5cGVFbnVtVmFsdWVzO1xuICByZWFkb25seSBGaWxsVHlwZTogRmlsbFR5cGVFbnVtVmFsdWVzO1xuICByZWFkb25seSBGaWx0ZXJNb2RlOiBGaWx0ZXJNb2RlRW51bVZhbHVlcztcbiAgcmVhZG9ubHkgRm9udEVkZ2luZzogRm9udEVkZ2luZ0VudW1WYWx1ZXM7XG4gIHJlYWRvbmx5IEZvbnRIaW50aW5nOiBGb250SGludGluZ0VudW1WYWx1ZXM7XG4gIHJlYWRvbmx5IEdseXBoUnVuRmxhZ3M6IEdseXBoUnVuRmxhZ1ZhbHVlcztcbiAgcmVhZG9ubHkgSW1hZ2VGb3JtYXQ6IEltYWdlRm9ybWF0RW51bVZhbHVlcztcbiAgcmVhZG9ubHkgTWlwbWFwTW9kZTogTWlwbWFwTW9kZUVudW1WYWx1ZXM7XG4gIHJlYWRvbmx5IFBhaW50U3R5bGU6IFBhaW50U3R5bGVFbnVtVmFsdWVzO1xuICByZWFkb25seSBQYXRoT3A6IFBhdGhPcEVudW1WYWx1ZXM7XG4gIHJlYWRvbmx5IFBvaW50TW9kZTogUG9pbnRNb2RlRW51bVZhbHVlcztcbiAgcmVhZG9ubHkgQ29sb3JTcGFjZTogQ29sb3JTcGFjZUVudW1WYWx1ZXM7XG4gIHJlYWRvbmx5IFN0cm9rZUNhcDogU3Ryb2tlQ2FwRW51bVZhbHVlcztcbiAgcmVhZG9ubHkgU3Ryb2tlSm9pbjogU3Ryb2tlSm9pbkVudW1WYWx1ZXM7XG4gIHJlYWRvbmx5IFRpbGVNb2RlOiBUaWxlTW9kZUVudW1WYWx1ZXM7XG4gIHJlYWRvbmx5IFZlcnRleE1vZGU6IFZlcnRleE1vZGVFbnVtVmFsdWVzO1xuXG4gIC8vIENvcmUgQ29uc3RhbnRzXG4gIHJlYWRvbmx5IFRSQU5TUEFSRU5UOiBDb2xvcjtcbiAgcmVhZG9ubHkgQkxBQ0s6IENvbG9yO1xuICByZWFkb25seSBXSElURTogQ29sb3I7XG4gIHJlYWRvbmx5IFJFRDogQ29sb3I7XG4gIHJlYWRvbmx5IEdSRUVOOiBDb2xvcjtcbiAgcmVhZG9ubHkgQkxVRTogQ29sb3I7XG4gIHJlYWRvbmx5IFlFTExPVzogQ29sb3I7XG4gIHJlYWRvbmx5IENZQU46IENvbG9yO1xuICByZWFkb25seSBNQUdFTlRBOiBDb2xvcjtcblxuICByZWFkb25seSBNT1ZFX1ZFUkI6IG51bWJlcjtcbiAgcmVhZG9ubHkgTElORV9WRVJCOiBudW1iZXI7XG4gIHJlYWRvbmx5IFFVQURfVkVSQjogbnVtYmVyO1xuICByZWFkb25seSBDT05JQ19WRVJCOiBudW1iZXI7XG4gIHJlYWRvbmx5IENVQklDX1ZFUkI6IG51bWJlcjtcbiAgcmVhZG9ubHkgQ0xPU0VfVkVSQjogbnVtYmVyO1xuXG4gIHJlYWRvbmx5IFNhdmVMYXllckluaXRXaXRoUHJldmlvdXM6IFNhdmVMYXllckZsYWc7XG4gIHJlYWRvbmx5IFNhdmVMYXllckYxNkNvbG9yVHlwZTogU2F2ZUxheWVyRmxhZztcblxuICAvKipcbiAgICogVXNlIHRoaXMgc2hhZG93IGZsYWcgdG8gaW5kaWNhdGUgdGhlIG9jY2x1ZGluZyBvYmplY3QgaXMgbm90IG9wYXF1ZS4gS25vd2luZyB0aGF0IHRoZVxuICAgKiBvY2NsdWRlciBpcyBvcGFxdWUgYWxsb3dzIHVzIHRvIGN1bGwgc2hhZG93IGdlb21ldHJ5IGJlaGluZCBpdCBhbmQgaW1wcm92ZSBwZXJmb3JtYW5jZS5cbiAgICovXG4gIHJlYWRvbmx5IFNoYWRvd1RyYW5zcGFyZW50T2NjbHVkZXI6IG51bWJlcjtcbiAgLyoqXG4gICAqIFVzZSB0aGlzIHNoYWRvdyBmbGFnIHRvIG5vdCB1c2UgYW5hbHl0aWMgc2hhZG93cy5cbiAgICovXG4gIHJlYWRvbmx5IFNoYWRvd0dlb21ldHJpY09ubHk6IG51bWJlcjtcbiAgLyoqXG4gICAqIFVzZSB0aGlzIHNoYWRvdyBmbGFnIHRvIGluZGljYXRlIHRoZSBsaWdodCBwb3NpdGlvbiByZXByZXNlbnRzIGEgZGlyZWN0aW9uIGFuZCBsaWdodCByYWRpdXNcbiAgICogaXMgYmx1ciByYWRpdXMgYXQgZWxldmF0aW9uIDEuXG4gICAqL1xuICByZWFkb25seSBTaGFkb3dEaXJlY3Rpb25hbExpZ2h0OiBudW1iZXI7XG5cbiAgcmVhZG9ubHkgZ3B1PzogYm9vbGVhbjsgLy8gdHJ1ZSBpZiBHUFUgY29kZSB3YXMgY29tcGlsZWQgaW5cbiAgcmVhZG9ubHkgbWFuYWdlZF9za290dGllPzogYm9vbGVhbjsgLy8gdHJ1ZSBpZiBhZHZhbmNlZCAobWFuYWdlZCkgU2tvdHRpZSBjb2RlIHdhcyBjb21waWxlZCBpblxuICByZWFkb25seSBwYXJ0aWNsZXM/OiBib29sZWFuOyAvLyB0cnVlIGlmIFBhcnRpY2xlcyBjb2RlIHdhcyBjb21waWxlZCBpblxuICByZWFkb25seSBydF9lZmZlY3Q/OiBib29sZWFuOyAvLyB0cnVlIGlmIFJ1bnRpbWVFZmZlY3Qgd2FzIGNvbXBpbGVkIGluXG4gIHJlYWRvbmx5IHNrb3R0aWU/OiBib29sZWFuOyAvLyB0cnVlIGlmIGJhc2UgU2tvdHRpZSBjb2RlIHdhcyBjb21waWxlZCBpblxuXG4gIC8vIFBhcmFncmFwaCBFbnVtc1xuICByZWFkb25seSBBZmZpbml0eTogQWZmaW5pdHlFbnVtVmFsdWVzO1xuICByZWFkb25seSBEZWNvcmF0aW9uU3R5bGU6IERlY29yYXRpb25TdHlsZUVudW1WYWx1ZXM7XG4gIHJlYWRvbmx5IEZvbnRTbGFudDogRm9udFNsYW50RW51bVZhbHVlcztcbiAgcmVhZG9ubHkgRm9udFdlaWdodDogRm9udFdlaWdodEVudW1WYWx1ZXM7XG4gIHJlYWRvbmx5IEZvbnRXaWR0aDogRm9udFdpZHRoRW51bVZhbHVlcztcbiAgcmVhZG9ubHkgUGxhY2Vob2xkZXJBbGlnbm1lbnQ6IFBsYWNlaG9sZGVyQWxpZ25tZW50RW51bVZhbHVlcztcbiAgcmVhZG9ubHkgUmVjdEhlaWdodFN0eWxlOiBSZWN0SGVpZ2h0U3R5bGVFbnVtVmFsdWVzO1xuICByZWFkb25seSBSZWN0V2lkdGhTdHlsZTogUmVjdFdpZHRoU3R5bGVFbnVtVmFsdWVzO1xuICByZWFkb25seSBUZXh0QWxpZ246IFRleHRBbGlnbkVudW1WYWx1ZXM7XG4gIHJlYWRvbmx5IFRleHRCYXNlbGluZTogVGV4dEJhc2VsaW5lRW51bVZhbHVlcztcbiAgcmVhZG9ubHkgVGV4dERpcmVjdGlvbjogVGV4dERpcmVjdGlvbkVudW1WYWx1ZXM7XG4gIHJlYWRvbmx5IFRleHRIZWlnaHRCZWhhdmlvcjogVGV4dEhlaWdodEJlaGF2aW9yRW51bVZhbHVlcztcblxuICAvLyBQYXJhZ3JhcGggQ29uc3RhbnRzXG4gIHJlYWRvbmx5IE5vRGVjb3JhdGlvbjogbnVtYmVyO1xuICByZWFkb25seSBVbmRlcmxpbmVEZWNvcmF0aW9uOiBudW1iZXI7XG4gIHJlYWRvbmx5IE92ZXJsaW5lRGVjb3JhdGlvbjogbnVtYmVyO1xuICByZWFkb25seSBMaW5lVGhyb3VnaERlY29yYXRpb246IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYW1lcmEge1xuICAvKiogYSAzZCBwb2ludCBsb2NhdGluZyB0aGUgY2FtZXJhLiAqL1xuICBleWU6IFZlY3RvcjM7XG4gIC8qKiBjZW50ZXIgb2YgYXR0ZW50aW9uIC0gdGhlIDNkIHBvaW50IHRoZSBjYW1lcmEgaXMgbG9va2luZyBhdC4gKi9cbiAgY29hOiBWZWN0b3IzO1xuICAvKipcbiAgICogQSB1bml0IHZlY3RvciBwb2ludGluZyB0aGUgY2FtZXJhcyB1cCBkaXJlY3Rpb24uIE5vdGUgdGhhdCB1c2luZyBvbmx5IGV5ZSBhbmQgY29hXG4gICAqIHdvdWxkIGxlYXZlIHRoZSByb2xsIG9mIHRoZSBjYW1lcmEgdW5zcGVjaWZpZWQuXG4gICAqL1xuICB1cDogVmVjdG9yMztcbiAgLyoqIG5lYXIgY2xpcHBpbmcgcGxhbmUgZGlzdGFuY2UgKi9cbiAgbmVhcjogbnVtYmVyO1xuICAvKiogZmFyIGNsaXBwaW5nIHBsYW5lIGRpc3RhbmNlICovXG4gIGZhcjogbnVtYmVyO1xuICAvKiogZmllbGQgb2YgdmlldyBpbiByYWRpYW5zICovXG4gIGFuZ2xlOiBBbmdsZUluUmFkaWFucztcbn1cblxuLyoqXG4gKiBDYW52YXNLaXQgaXMgYnVpbHQgd2l0aCBFbXNjcmlwdGVuIGFuZCBFbWJpbmQuIEVtYmluZCBhZGRzIHRoZSBmb2xsb3dpbmcgbWV0aG9kcyB0byBhbGwgb2JqZWN0c1xuICogdGhhdCBhcmUgZXhwb3NlZCB3aXRoIGl0LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVtYmluZE9iamVjdDxUIGV4dGVuZHMgRW1iaW5kT2JqZWN0PFQ+PiB7XG4gIGNsb25lKCk6IFQ7XG4gIGRlbGV0ZSgpOiB2b2lkO1xuICBkZWxldGVBZnRlcigpOiB2b2lkO1xuICBpc0FsaWFzT2Yob3RoZXI6IGFueSk6IGJvb2xlYW47XG4gIGlzRGVsZXRlZCgpOiBib29sZWFuO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHNldCBvZiBlbnVtIHZhbHVlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFbWJpbmRFbnVtIHtcbiAgcmVhZG9ubHkgdmFsdWVzOiBudW1iZXJbXTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgc2luZ2xlIG1lbWJlciBvZiBhbiBlbnVtLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVtYmluZEVudW1FbnRpdHkge1xuICByZWFkb25seSB2YWx1ZTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVtdWxhdGVkQ2FudmFzMkQge1xuICB3aWR0aDogbnVtYmVyO1xuICBoZWlnaHQ6IG51bWJlcjtcblxuICAvKipcbiAgICogQ2xlYW5zIHVwIGFsbCByZXNvdXJjZXMgYXNzb2NpYXRlZCB3aXRoIHRoaXMgZW11bGF0ZWQgY2FudmFzLlxuICAgKi9cbiAgZGlzcG9zZSgpOiB2b2lkO1xuICAvKipcbiAgICogRGVjb2RlcyBhbiBpbWFnZSB3aXRoIHRoZSBnaXZlbiBieXRlcy5cbiAgICogQHBhcmFtIGJ5dGVzXG4gICAqL1xuICBkZWNvZGVJbWFnZShieXRlczogQXJyYXlCdWZmZXIgfCBVaW50OEFycmF5KTogSW1hZ2U7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gZW11bGF0ZWQgY2FudmFzMmQgY29udGV4dCBpZiB0eXBlID09ICcyZCcsIG51bGwgb3RoZXJ3aXNlLlxuICAgKiBAcGFyYW0gdHlwZVxuICAgKi9cbiAgZ2V0Q29udGV4dCh0eXBlOiBcIjJkXCIpOiBFbXVsYXRlZENhbnZhczJEQ29udGV4dDtcbiAgZ2V0Q29udGV4dCh0eXBlOiBzdHJpbmcpOiBudWxsO1xuXG4gIC8qKlxuICAgKiBMb2FkcyB0aGUgZ2l2ZW4gZm9udCB3aXRoIHRoZSBnaXZlbiBkZXNjcmlwdG9ycy4gRW11bGF0ZXMgbmV3IEZvbnRGYWNlKCkuXG4gICAqIEBwYXJhbSBieXRlc1xuICAgKiBAcGFyYW0gZGVzY3JpcHRvcnNcbiAgICovXG4gIGxvYWRGb250KFxuICAgIGJ5dGVzOiBBcnJheUJ1ZmZlciB8IFVpbnQ4QXJyYXksXG4gICAgZGVzY3JpcHRvcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGZvbnQgaW50byBDYW52YXMuIChub2RlLWNhbnZhcyBjb21wYXRpYmlsaXR5KVxuICAgKiBAcGFyYW0gc3JjIFNvdXJjZSBvZiB0aGUgZm9udCAoUGF0aC9VUkwpXG4gICAqIEBwYXJhbSBkZXNjcmlwdG9yc1xuICAgKi9cbiAgcmVnaXN0ZXJGb250KHNyYzogc3RyaW5nLCBkZXNjcmlwdG9yczogb2JqZWN0KTogdm9pZDtcblxuICAvKipcbiAgICogUmV0dXJucyBhbiBuZXcgZW11bGF0ZWQgUGF0aDJEIG9iamVjdC5cbiAgICogQHBhcmFtIHN0ciAtIGFuIFNWRyBzdHJpbmcgcmVwcmVzZW50aW5nIGEgcGF0aC5cbiAgICovXG4gIG1ha2VQYXRoMkQoc3RyPzogc3RyaW5nKTogRW11bGF0ZWRQYXRoMkQ7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgY2FudmFzIGFzIGEgYmFzZTY0IGVuY29kZWQgaW1hZ2Ugc3RyaW5nLlxuICAgKiBAcGFyYW0gY29kZWMgLSBpbWFnZS9wbmcgYnkgZGVmYXVsdDsgaW1hZ2UvanBlZyBhbHNvIHN1cHBvcnRlZC5cbiAgICogQHBhcmFtIHF1YWxpdHlcbiAgICovXG4gIHRvRGF0YVVSTChjb2RlYz86IHN0cmluZywgcXVhbGl0eT86IG51bWJlcik6IHN0cmluZztcblxuICAvKipcbiAgICogUmV0dXJucyBCdWZmZXIgY29udGFpbmluZyBJbWFnZSBkYXRhLlxuICAgKi9cbiAgdG9CdWZmZXIobWltZVR5cGU/OiBcImltYWdlL3BuZ1wiIHwgXCJpbWFnZS9qcGVnXCIpOiBVaW50OEFycmF5O1xuXG4gIC8qKiBSZXR1cm5zIHJhdyBidWZmZXIsIHBvaW50aW5nIHRvIFdBU00gbWVtb3J5LCBvZiB1bmRlcmx5aW5nIFJHQkEgZGF0YSB3aXRoIFplcm8gQ29weWluZy4gKi9cbiAgZ2V0UmF3QnVmZmVyKHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IFVpbnQ4QXJyYXk7XG59XG5cbi8qKiBQYXJ0IG9mIHRoZSBDYW52YXMyRCBlbXVsYXRpb24gY29kZSAqL1xuZXhwb3J0IHR5cGUgRW11bGF0ZWRDYW52YXMyRENvbnRleHQgPSBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XG5leHBvcnQgdHlwZSBFbXVsYXRlZEltYWdlRGF0YSA9IEltYWdlRGF0YTtcbmV4cG9ydCB0eXBlIEVtdWxhdGVkUGF0aDJEID0gUGF0aDJEO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZvbnRTdHlsZSB7XG4gIHdlaWdodD86IEZvbnRXZWlnaHQ7XG4gIHdpZHRoPzogRm9udFdpZHRoO1xuICBzbGFudD86IEZvbnRTbGFudDtcbn1cblxuLyoqXG4gKiBTZWUgR3JEaXJlY3RDb250ZXh0LmggZm9yIG1vcmUgb24gdGhpcyBjbGFzcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBHckRpcmVjdENvbnRleHQgZXh0ZW5kcyBFbWJpbmRPYmplY3Q8R3JEaXJlY3RDb250ZXh0PiB7XG4gIGdldFJlc291cmNlQ2FjaGVMaW1pdEJ5dGVzKCk6IG51bWJlcjtcbiAgZ2V0UmVzb3VyY2VDYWNoZVVzYWdlQnl0ZXMoKTogbnVtYmVyO1xuICByZWxlYXNlUmVzb3VyY2VzQW5kQWJhbmRvbkNvbnRleHQoKTogdm9pZDtcbiAgc2V0UmVzb3VyY2VDYWNoZUxpbWl0Qnl0ZXMoYnl0ZXM6IG51bWJlcik6IHZvaWQ7XG59XG5cbi8qKlxuICogU2VlIE1ldHJpY3MuaCBmb3IgbW9yZSBvbiB0aGlzIHN0cnVjdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMaW5lTWV0cmljcyB7XG4gIC8qKiBUaGUgaW5kZXggaW4gdGhlIHRleHQgYnVmZmVyIHRoZSBsaW5lIGJlZ2lucy4gKi9cbiAgc3RhcnRJbmRleDogbnVtYmVyO1xuICAvKiogVGhlIGluZGV4IGluIHRoZSB0ZXh0IGJ1ZmZlciB0aGUgbGluZSBlbmRzLiAqL1xuICBlbmRJbmRleDogbnVtYmVyO1xuICBlbmRFeGNsdWRpbmdXaGl0ZXNwYWNlczogbnVtYmVyO1xuICBlbmRJbmNsdWRpbmdOZXdsaW5lOiBudW1iZXI7XG4gIC8qKiBUcnVlIGlmIHRoZSBsaW5lIGVuZHMgaW4gYSBoYXJkIGJyZWFrIChlLmcuIG5ld2xpbmUpICovXG4gIGlzSGFyZEJyZWFrOiBib29sZWFuO1xuICAvKipcbiAgICogVGhlIGZpbmFsIGNvbXB1dGVkIGFzY2VudCBmb3IgdGhlIGxpbmUuIFRoaXMgY2FuIGJlIGltcGFjdGVkIGJ5XG4gICAqIHRoZSBzdHJ1dCwgaGVpZ2h0LCBzY2FsaW5nLCBhcyB3ZWxsIGFzIG91dGx5aW5nIHJ1bnMgdGhhdCBhcmUgdmVyeSB0YWxsLlxuICAgKi9cbiAgYXNjZW50OiBudW1iZXI7XG4gIC8qKlxuICAgKiBUaGUgZmluYWwgY29tcHV0ZWQgZGVzY2VudCBmb3IgdGhlIGxpbmUuIFRoaXMgY2FuIGJlIGltcGFjdGVkIGJ5XG4gICAqIHRoZSBzdHJ1dCwgaGVpZ2h0LCBzY2FsaW5nLCBhcyB3ZWxsIGFzIG91dGx5aW5nIHJ1bnMgdGhhdCBhcmUgdmVyeSB0YWxsLlxuICAgKi9cbiAgZGVzY2VudDogbnVtYmVyO1xuICAvKiogcm91bmQoYXNjZW50ICsgZGVzY2VudCkgKi9cbiAgaGVpZ2h0OiBudW1iZXI7XG4gIC8qKiB3aWR0aCBvZiB0aGUgbGluZSAqL1xuICB3aWR0aDogbnVtYmVyO1xuICAvKiogVGhlIGxlZnQgZWRnZSBvZiB0aGUgbGluZS4gVGhlIHJpZ2h0IGVkZ2UgY2FuIGJlIG9idGFpbmVkIHdpdGggYGxlZnQgKyB3aWR0aGAgKi9cbiAgbGVmdDogbnVtYmVyO1xuICAvKiogVGhlIHkgcG9zaXRpb24gb2YgdGhlIGJhc2VsaW5lIGZvciB0aGlzIGxpbmUgZnJvbSB0aGUgdG9wIG9mIHRoZSBwYXJhZ3JhcGguICovXG4gIGJhc2VsaW5lOiBudW1iZXI7XG4gIC8qKiBaZXJvIGluZGV4ZWQgbGluZSBudW1iZXIuICovXG4gIGxpbmVOdW1iZXI6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSYW5nZSB7XG4gIGZpcnN0OiBudW1iZXI7XG4gIGxhc3Q6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBJbmZvcm1hdGlvbiBmb3IgYSBydW4gb2Ygc2hhcGVkIHRleHQuIFNlZSBQYXJhZ3JhcGguZ2V0U2hhcGVkTGluZXMoKVxuICpcbiAqIE5vdGVzOlxuICogcG9zaXRpb25zIGlzIGRvY3VtZW50ZWQgYXMgRmxvYXQzMiwgYnV0IGl0IGhvbGRzIHR3aWNlIGFzIG1hbnkgYXMgeW91IGV4cGVjdCwgYW5kIHRoZXlcbiAqIGFyZSB0cmVhdGVkIGxvZ2ljYWxseSBhcyBwYWlycyBvZiBmbG9hdHM6IHt4MCwgeTB9LCB7eDEsIHkxfSwgLi4uIGZvciBlYWNoIGdseXBoLlxuICpcbiAqIHBvc2l0aW9ucyBhbmQgb2Zmc2V0cyBhcnJheXMgaGF2ZSAxIGV4dHJhIHNsb3QgKGFjdHVhbGx5IDIgZm9yIHBvc2l0aW9ucylcbiAqIHRvIGRlc2NyaWJlIHRoZSBsb2NhdGlvbiBcImFmdGVyXCIgdGhlIGxhc3QgZ2x5cGggaW4gdGhlIGdseXBocyBhcnJheS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBHbHlwaFJ1biB7XG4gIHR5cGVmYWNlOiBUeXBlZmFjZTsgLy8gY3VycmVudGx5IHNldCB0byBudWxsICh0ZW1wb3JhcnkpXG4gIHNpemU6IG51bWJlcjtcbiAgZmFrZUJvbGQ6IGJvb2xlYW47XG4gIGZha2VJdGFsaWM6IGJvb2xlYW47XG5cbiAgZ2x5cGhzOiBVaW50MTZBcnJheTtcbiAgcG9zaXRpb25zOiBGbG9hdDMyQXJyYXk7IC8vIGFsdGVybmF0aW5nIHgwLCB5MCwgeDEsIHkxLCAuLi5cbiAgb2Zmc2V0czogVWludDMyQXJyYXk7XG4gIGZsYWdzOiBudW1iZXI7IC8vIHNlZSBHbHlwaFJ1bkZsYWdzXG59XG5cbi8qKlxuICogSW5mb3JtYXRpb24gZm9yIGEgcGFyYWdyYXBoIG9mIHRleHQuIFNlZSBQYXJhZ3JhcGguZ2V0U2hhcGVkTGluZXMoKVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNoYXBlZExpbmUge1xuICB0ZXh0UmFuZ2U6IFJhbmdlOyAvLyBmaXJzdCBhbmQgbGFzdCBjaGFyYWN0ZXIgb2Zmc2V0cyBmb3IgdGhlIGxpbmUgKGRlcml2ZWQgZnJvbSBydW5zW10pXG4gIHRvcDogbnVtYmVyOyAvLyB0b3AgeS1jb29yZGluYXRlIGZvciB0aGUgbGluZVxuICBib3R0b206IG51bWJlcjsgLy8gYm90dG9tIHktY29vcmRpbmF0ZSBmb3IgdGhlIGxpbmVcbiAgYmFzZWxpbmU6IG51bWJlcjsgLy8gYmFzZWxpbmUgeS1jb29yZGluYXRlIGZvciB0aGUgbGluZVxuICBydW5zOiBHbHlwaFJ1bltdOyAvLyBhcnJheSBvZiBHbHlwaFJ1biBvYmplY3RzIGZvciB0aGUgbGluZVxufVxuXG4vKipcbiAqIElucHV0IHRvIFNoYXBlVGV4dCguLi4sIEZvbnRCbG9ja1tdLCAuLi4pO1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEZvbnRCbG9jayB7XG4gIGxlbmd0aDogbnVtYmVyOyAvLyBudW1iZXIgb2YgdGV4dCBjb2RlcG9pbnRzIHRoaXMgYmxvY2sgaXMgYXBwbGllZCB0b1xuXG4gIHR5cGVmYWNlOiBUeXBlZmFjZTtcbiAgc2l6ZTogbnVtYmVyO1xuICBmYWtlQm9sZDogYm9vbGVhbjtcbiAgZmFrZUl0YWxpYzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBUaGlzIG9iamVjdCBpcyBhIHdyYXBwZXIgYXJvdW5kIGEgcG9pbnRlciB0byBzb21lIG1lbW9yeSBvbiB0aGUgV0FTTSBoZWFwLiBUaGUgdHlwZSBvZiB0aGVcbiAqIHBvaW50ZXIgd2FzIGRldGVybWluZWQgYXQgY3JlYXRpb24gdGltZS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBNYWxsb2NPYmoge1xuICAvKipcbiAgICogVGhlIG51bWJlciBvZiBvYmplY3RzIHRoaXMgcG9pbnRlciByZWZlcnMgdG8uXG4gICAqL1xuICByZWFkb25seSBsZW5ndGg6IG51bWJlcjtcbiAgLyoqXG4gICAqIFRoZSBcInBvaW50ZXJcIiBpbnRvIHRoZSBXQVNNIG1lbW9yeS4gU2hvdWxkIGJlIGZpeGVkIG92ZXIgdGhlIGxpZmV0aW1lIG9mIHRoZSBvYmplY3QuXG4gICAqL1xuICByZWFkb25seSBieXRlT2Zmc2V0OiBudW1iZXI7XG4gIC8qKlxuICAgKiBSZXR1cm4gYSByZWFkL3dyaXRlIHZpZXcgaW50byBhIHN1YnNldCBvZiB0aGUgbWVtb3J5LiBEbyBub3QgY2FjaGUgdGhlIFR5cGVkQXJyYXkgdGhpc1xuICAgKiByZXR1cm5zLCBpdCBtYXkgYmUgaW52YWxpZGF0ZWQgaWYgdGhlIFdBU00gaGVhcCBpcyByZXNpemVkLiBUaGlzIGlzIHRoZSBzYW1lIGFzIGNhbGxpbmdcbiAgICogLnRvVHlwZWRBcnJheSgpLnN1YmFycmF5KCkgZXhjZXB0IHRoZSByZXR1cm5lZCBUeXBlZEFycmF5IGNhbiBhbHNvIGJlIHBhc3NlZCBpbnRvIGFuIEFQSVxuICAgKiBhbmQgbm90IGNhdXNlIGFuIGFkZGl0aW9uYWwgY29weS5cbiAgICovXG4gIHN1YmFycmF5KHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogVHlwZWRBcnJheTtcbiAgLyoqXG4gICAqIFJldHVybiBhIHJlYWQvd3JpdGUgdmlldyBvZiB0aGUgbWVtb3J5LiBEbyBub3QgY2FjaGUgdGhlIFR5cGVkQXJyYXkgdGhpcyByZXR1cm5zLCBpdCBtYXkgYmVcbiAgICogaW52YWxpZGF0ZWQgaWYgdGhlIFdBU00gaGVhcCBpcyByZXNpemVkLiBJZiB0aGlzIFR5cGVkQXJyYXkgaXMgcGFzc2VkIGludG8gYSBDYW52YXNLaXQgQVBJLFxuICAgKiBpdCB3aWxsIG5vdCBiZSBjb3BpZWQgYWdhaW4sIG9ubHkgdGhlIHBvaW50ZXIgd2lsbCBiZSByZS11c2VkLlxuICAgKi9cbiAgdG9UeXBlZEFycmF5KCk6IFR5cGVkQXJyYXk7XG59XG5cbi8qKlxuICogVGhpcyByZXByZXNlbnRzIGEgc3Vic2V0IG9mIGFuIGFuaW1hdGlvbidzIGR1cmF0aW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFuaW1hdGlvbk1hcmtlciB7XG4gIG5hbWU6IHN0cmluZztcbiAgdDA6IG51bWJlcjsgLy8gMC4wIHRvIDEuMFxuICB0MTogbnVtYmVyOyAvLyAwLjAgdG8gMS4wXG59XG5cbi8qKlxuICogVGhpcyBvYmplY3QgbWFpbnRhaW5zIGEgc2luZ2xlIGF1ZGlvIGxheWVyIGR1cmluZyBza290dGllIHBsYXliYWNrXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQXVkaW9QbGF5ZXIge1xuICAvKipcbiAgICogUGxheWJhY2sgY29udHJvbCBjYWxsYmFjaywgZW1pdHRlZCBmb3IgZWFjaCBjb3JyZXNwb25kaW5nIEFuaW1hdGlvbjo6c2VlaygpLlxuICAgKlxuICAgKiBXaWxsIHNlZWsgdG8gdGltZSB0IChzZWNvbmRzKSByZWxhdGl2ZSB0byB0aGUgbGF5ZXIncyB0aW1lbGluZSBvcmlnaW4uXG4gICAqIE5lZ2F0aXZlIHQgdmFsdWVzIGFyZSB1c2VkIHRvIHNpZ25hbCBvZmYgc3RhdGUgKHN0b3AgcGxheWJhY2sgb3V0c2lkZSBsYXllciBzcGFuKS5cbiAgICovXG4gIHNlZWsodDogbnVtYmVyKTogdm9pZDtcbn1cblxuLyoqXG4gKiBNYXBwaW5nIG9mIHNvdW5kIG5hbWVzIChzdHJpbmdzKSB0byBBdWRpb1BsYXllcnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTb3VuZE1hcCB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIEF1ZGlvUGxheWVyIGZvciBhIGNlcnRhaW4gYXVkaW8gbGF5ZXJcbiAgICogQHBhcmFtIGtleSBzdHJpbmcgaWRlbnRpZmllciwgbmFtZSBvZiBhdWRpbyBmaWxlIHRoZSBkZXNpcmVkIEF1ZGlvUGxheWVyIG1hbmFnZXNcbiAgICovXG4gIGdldFBsYXllcihrZXk6IHN0cmluZyk6IEF1ZGlvUGxheWVyO1xufVxuXG4vKipcbiAqIE5hbWVkIGNvbG9yIHByb3BlcnR5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbG9yUHJvcGVydHkge1xuICAvKipcbiAgICogUHJvcGVydHkgaWRlbnRpZmllciwgdXN1YWxseSB0aGUgbm9kZSBuYW1lLlxuICAgKi9cbiAga2V5OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBQcm9wZXJ0eSB2YWx1ZSAoUkdCQSwgMjU1LWJhc2VkKS5cbiAgICovXG4gIHZhbHVlOiBDb2xvckludDtcbn1cblxuLyoqXG4gKiBOYW1lZCBvcGFjaXR5IHByb3BlcnR5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE9wYWNpdHlQcm9wZXJ0eSB7XG4gIC8qKlxuICAgKiBQcm9wZXJ0eSBpZGVudGlmaWVyLCB1c3VhbGx5IHRoZSBub2RlIG5hbWUuXG4gICAqL1xuICBrZXk6IHN0cmluZztcbiAgLyoqXG4gICAqIFByb3BlcnR5IHZhbHVlICgwLi4xMDApLlxuICAgKi9cbiAgdmFsdWU6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBUZXh0IHByb3BlcnR5IHZhbHVlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRleHRWYWx1ZSB7XG4gIC8qKlxuICAgKiBUaGUgdGV4dCBzdHJpbmcgcGF5bG9hZC5cbiAgICovXG4gIHRleHQ6IHN0cmluZztcbiAgLyoqXG4gICAqIEZvbnQgc2l6ZS5cbiAgICovXG4gIHNpemU6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBOYW1lZCB0ZXh0IHByb3BlcnR5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRleHRQcm9wZXJ0eSB7XG4gIC8qKlxuICAgKiBQcm9wZXJ0eSBpZGVudGlmaWVyLCB1c3VhbGx5IHRoZSBub2RlIG5hbWUuXG4gICAqL1xuICBrZXk6IHN0cmluZztcbiAgLyoqXG4gICAqIFByb3BlcnR5IHZhbHVlLlxuICAgKi9cbiAgdmFsdWU6IFRleHRWYWx1ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBNYW5hZ2VkU2tvdHRpZUFuaW1hdGlvbiBleHRlbmRzIFNrb3R0aWVBbmltYXRpb24ge1xuICBzZXRDb2xvcihrZXk6IHN0cmluZywgY29sb3I6IElucHV0Q29sb3IpOiBib29sZWFuO1xuICBzZXRPcGFjaXR5KGtleTogc3RyaW5nLCBvcGFjaXR5OiBudW1iZXIpOiBib29sZWFuO1xuICBzZXRUZXh0KGtleTogc3RyaW5nLCB0ZXh0OiBzdHJpbmcsIHNpemU6IG51bWJlcik6IGJvb2xlYW47XG4gIGdldE1hcmtlcnMoKTogQW5pbWF0aW9uTWFya2VyW107XG4gIGdldENvbG9yUHJvcHMoKTogQ29sb3JQcm9wZXJ0eVtdO1xuICBnZXRPcGFjaXR5UHJvcHMoKTogT3BhY2l0eVByb3BlcnR5W107XG4gIGdldFRleHRQcm9wcygpOiBUZXh0UHJvcGVydHlbXTtcbn1cblxuLyoqXG4gKiBTZWUgUGFyYWdyYXBoLmggZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhpcyBjbGFzcy4gVGhpcyBpcyBvbmx5IGF2YWlsYWJsZSBpZiBQYXJhZ3JhcGggaGFzXG4gKiBiZWVuIGNvbXBpbGVkIGluLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBhcmFncmFwaCBleHRlbmRzIEVtYmluZE9iamVjdDxQYXJhZ3JhcGg+IHtcbiAgZGlkRXhjZWVkTWF4TGluZXMoKTogYm9vbGVhbjtcbiAgZ2V0QWxwaGFiZXRpY0Jhc2VsaW5lKCk6IG51bWJlcjtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGdseXBoIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIHByb3ZpZGVkIGNvb3JkaW5hdGUsXG4gICAqIHdpdGggdGhlIHRvcCBsZWZ0IGNvcm5lciBhcyB0aGUgb3JpZ2luLCBhbmQgK3kgZGlyZWN0aW9uIGFzIGRvd24uXG4gICAqL1xuICBnZXRHbHlwaFBvc2l0aW9uQXRDb29yZGluYXRlKGR4OiBudW1iZXIsIGR5OiBudW1iZXIpOiBQb3NpdGlvbldpdGhBZmZpbml0eTtcblxuICBnZXRIZWlnaHQoKTogbnVtYmVyO1xuICBnZXRJZGVvZ3JhcGhpY0Jhc2VsaW5lKCk6IG51bWJlcjtcbiAgZ2V0TGluZU1ldHJpY3MoKTogTGluZU1ldHJpY3NbXTtcbiAgZ2V0TG9uZ2VzdExpbmUoKTogbnVtYmVyO1xuICBnZXRNYXhJbnRyaW5zaWNXaWR0aCgpOiBudW1iZXI7XG4gIGdldE1heFdpZHRoKCk6IG51bWJlcjtcbiAgZ2V0TWluSW50cmluc2ljV2lkdGgoKTogbnVtYmVyO1xuICBnZXRSZWN0c0ZvclBsYWNlaG9sZGVycygpOiBGbGF0dGVuZWRSZWN0YW5nbGVBcnJheTtcblxuICAvKipcbiAgICogUmV0dXJucyBib3VuZGluZyBib3hlcyB0aGF0IGVuY2xvc2UgYWxsIHRleHQgaW4gdGhlIHJhbmdlIG9mIGdscHloIGluZGV4ZXMgW3N0YXJ0LCBlbmQpLlxuICAgKiBAcGFyYW0gc3RhcnRcbiAgICogQHBhcmFtIGVuZFxuICAgKiBAcGFyYW0gaFN0eWxlXG4gICAqIEBwYXJhbSB3U3R5bGVcbiAgICovXG4gIGdldFJlY3RzRm9yUmFuZ2UoXG4gICAgc3RhcnQ6IG51bWJlcixcbiAgICBlbmQ6IG51bWJlcixcbiAgICBoU3R5bGU6IFJlY3RIZWlnaHRTdHlsZSxcbiAgICB3U3R5bGU6IFJlY3RXaWR0aFN0eWxlLFxuICApOiBGbGF0dGVuZWRSZWN0YW5nbGVBcnJheTtcblxuICAvKipcbiAgICogRmluZHMgdGhlIGZpcnN0IGFuZCBsYXN0IGdseXBocyB0aGF0IGRlZmluZSBhIHdvcmQgY29udGFpbmluZyB0aGUgZ2x5cGggYXQgaW5kZXggb2Zmc2V0LlxuICAgKiBAcGFyYW0gb2Zmc2V0XG4gICAqL1xuICBnZXRXb3JkQm91bmRhcnkob2Zmc2V0OiBudW1iZXIpOiBVUmFuZ2U7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gYXJyYXkgb2YgU2hhcGVkTGluZSBvYmplY3RzLCBkZXNjcmliaW5nIHRoZSBwYXJhZ3JhcGguXG4gICAqL1xuICBnZXRTaGFwZWRMaW5lcygpOiBTaGFwZWRMaW5lW107XG5cbiAgLyoqXG4gICAqIExheXMgb3V0IHRoZSB0ZXh0IGluIHRoZSBwYXJhZ3JhcGggc28gaXQgaXMgd3JhcHBlZCB0byB0aGUgZ2l2ZW4gd2lkdGguXG4gICAqIEBwYXJhbSB3aWR0aFxuICAgKi9cbiAgbGF5b3V0KHdpZHRoOiBudW1iZXIpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhcmFncmFwaEJ1aWxkZXIgZXh0ZW5kcyBFbWJpbmRPYmplY3Q8UGFyYWdyYXBoQnVpbGRlcj4ge1xuICAvKipcbiAgICogUHVzaGVzIHRoZSBpbmZvcm1hdGlvbiByZXF1aXJlZCB0byBsZWF2ZSBhbiBvcGVuIHNwYWNlLlxuICAgKiBAcGFyYW0gd2lkdGhcbiAgICogQHBhcmFtIGhlaWdodFxuICAgKiBAcGFyYW0gYWxpZ25tZW50XG4gICAqIEBwYXJhbSBiYXNlbGluZVxuICAgKiBAcGFyYW0gb2Zmc2V0XG4gICAqL1xuICBhZGRQbGFjZWhvbGRlcihcbiAgICB3aWR0aD86IG51bWJlcixcbiAgICBoZWlnaHQ/OiBudW1iZXIsXG4gICAgYWxpZ25tZW50PzogUGxhY2Vob2xkZXJBbGlnbm1lbnQsXG4gICAgYmFzZWxpbmU/OiBUZXh0QmFzZWxpbmUsXG4gICAgb2Zmc2V0PzogbnVtYmVyLFxuICApOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBBZGRzIHRleHQgdG8gdGhlIGJ1aWxkZXIuIEZvcm1zIHRoZSBwcm9wZXIgcnVucyB0byB1c2UgdGhlIHVwcGVyLW1vc3Qgc3R5bGVcbiAgICogb24gdGhlIHN0eWxlX3N0YWNrLlxuICAgKiBAcGFyYW0gc3RyXG4gICAqL1xuICBhZGRUZXh0KHN0cjogc3RyaW5nKTogdm9pZDtcblxuICAvKipcbiAgICogUmV0dXJucyBhIFBhcmFncmFwaCBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byBiZSBsYXlvdXQgYW5kIHBhaW50IHRoZSB0ZXh0IHRvIGFuXG4gICAqIENhbnZhcy5cbiAgICovXG4gIGJ1aWxkKCk6IFBhcmFncmFwaDtcblxuICAvKipcbiAgICogUmVtb3ZlIGEgc3R5bGUgZnJvbSB0aGUgc3RhY2suIFVzZWZ1bCB0byBhcHBseSBkaWZmZXJlbnQgc3R5bGVzIHRvIGNodW5rc1xuICAgKiBvZiB0ZXh0IHN1Y2ggYXMgYm9sZGluZy5cbiAgICovXG4gIHBvcCgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBQdXNoIGEgc3R5bGUgdG8gdGhlIHN0YWNrLiBUaGUgY29ycmVzcG9uZGluZyB0ZXh0IGFkZGVkIHdpdGggYWRkVGV4dCB3aWxsXG4gICAqIHVzZSB0aGUgdG9wLW1vc3Qgc3R5bGUuXG4gICAqIEBwYXJhbSB0ZXh0XG4gICAqL1xuICBwdXNoU3R5bGUodGV4dDogVGV4dFN0eWxlKTogdm9pZDtcblxuICAvKipcbiAgICogUHVzaGVzIGEgVGV4dFN0eWxlIHVzaW5nIHBhaW50cyBpbnN0ZWFkIG9mIGNvbG9ycyBmb3IgZm9yZWdyb3VuZCBhbmQgYmFja2dyb3VuZC5cbiAgICogQHBhcmFtIHRleHRTdHlsZVxuICAgKiBAcGFyYW0gZmdcbiAgICogQHBhcmFtIGJnXG4gICAqL1xuICBwdXNoUGFpbnRTdHlsZSh0ZXh0U3R5bGU6IFRleHRTdHlsZSwgZmc6IFBhaW50LCBiZzogUGFpbnQpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhcmFncmFwaFN0eWxlIHtcbiAgZGlzYWJsZUhpbnRpbmc/OiBib29sZWFuO1xuICBlbGxpcHNpcz86IHN0cmluZztcbiAgaGVpZ2h0TXVsdGlwbGllcj86IG51bWJlcjtcbiAgbWF4TGluZXM/OiBudW1iZXI7XG4gIHN0cnV0U3R5bGU/OiBTdHJ1dFN0eWxlO1xuICB0ZXh0QWxpZ24/OiBUZXh0QWxpZ247XG4gIHRleHREaXJlY3Rpb24/OiBUZXh0RGlyZWN0aW9uO1xuICB0ZXh0SGVpZ2h0QmVoYXZpb3I/OiBUZXh0SGVpZ2h0QmVoYXZpb3I7XG4gIHRleHRTdHlsZT86IFRleHRTdHlsZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQb3NpdGlvbldpdGhBZmZpbml0eSB7XG4gIHBvczogbnVtYmVyO1xuICBhZmZpbml0eTogQWZmaW5pdHk7XG59XG5cbi8qKlxuICogU2VlIFNrUGFydGljbGVFZmZlY3QuaCBmb3IgbW9yZSBkZXRhaWxzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBhcnRpY2xlcyBleHRlbmRzIEVtYmluZE9iamVjdDxQYXJ0aWNsZXM+IHtcbiAgLyoqXG4gICAqIERyYXdzIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBwYXJ0aWNsZXMgb24gdGhlIGdpdmVuIGNhbnZhcy5cbiAgICogQHBhcmFtIGNhbnZhc1xuICAgKi9cbiAgZHJhdyhjYW52YXM6IENhbnZhcyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBGbG9hdDMyQXJyYXkgYm91bmQgdG8gdGhlIFdBU00gbWVtb3J5IG9mIHRoZXNlIHVuaWZvcm1zLiBDaGFuZ2luZyB0aGVzZVxuICAgKiBmbG9hdHMgd2lsbCBjaGFuZ2UgdGhlIGNvcnJlc3BvbmRpbmcgdW5pZm9ybXMgaW5zdGFudGx5LlxuICAgKi9cbiAgdW5pZm9ybXMoKTogRmxvYXQzMkFycmF5O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudGggdW5pZm9ybSBmcm9tIHRoZSBlZmZlY3QuXG4gICAqIEBwYXJhbSBpbmRleFxuICAgKi9cbiAgZ2V0VW5pZm9ybShpbmRleDogbnVtYmVyKTogU2tTTFVuaWZvcm07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG51bWJlciBvZiB1bmlmb3JtcyBvbiB0aGUgZWZmZWN0LlxuICAgKi9cbiAgZ2V0VW5pZm9ybUNvdW50KCk6IG51bWJlcjtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdG90YWwgbnVtYmVyIG9mIGZsb2F0cyBhY3Jvc3MgYWxsIHVuaWZvcm1zIG9uIHRoZSBlZmZlY3QuIFRoaXMgaXMgdGhlIGxlbmd0aFxuICAgKiBvZiB0aGUgYXJyYXkgcmV0dXJuZWQgYnkgYHVuaWZvcm1zKClgLiBGb3IgZXhhbXBsZSwgYW4gZWZmZWN0IHdpdGggYSBzaW5nbGUgZmxvYXQzIHVuaWZvcm0sXG4gICAqIHdvdWxkIHJldHVybiAxIGZyb20gYGdldFVuaWZvcm1Db3VudCgpYCwgYnV0IDMgZnJvbSBgZ2V0VW5pZm9ybUZsb2F0Q291bnQoKWAuXG4gICAqL1xuICBnZXRVbmlmb3JtRmxvYXRDb3VudCgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG5hbWUgb2YgdGhlIG50aCBlZmZlY3QgdW5pZm9ybS5cbiAgICogQHBhcmFtIGluZGV4XG4gICAqL1xuICBnZXRVbmlmb3JtTmFtZShpbmRleDogbnVtYmVyKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBiYXNlIHBvc2l0aW9uIG9mIHRoZSBlZmZlY3QuXG4gICAqIEBwYXJhbSBwb2ludFxuICAgKi9cbiAgc2V0UG9zaXRpb24ocG9pbnQ6IElucHV0UG9pbnQpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBiYXNlIHJhdGUgb2YgdGhlIGVmZmVjdC5cbiAgICogQHBhcmFtIHJhdGVcbiAgICovXG4gIHNldFJhdGUocmF0ZTogbnVtYmVyKTogdm9pZDtcblxuICAvKipcbiAgICogU3RhcnRzIHBsYXlpbmcgdGhlIGVmZmVjdC5cbiAgICogQHBhcmFtIG5vd1xuICAgKiBAcGFyYW0gbG9vcGluZ1xuICAgKi9cbiAgc3RhcnQobm93OiBudW1iZXIsIGxvb3Bpbmc6IGJvb2xlYW4pOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoZSBlZmZlY3QgdXNpbmcgdGhlIG5ldyB0aW1lLlxuICAgKiBAcGFyYW0gbm93XG4gICAqL1xuICB1cGRhdGUobm93OiBudW1iZXIpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNrU0xVbmlmb3JtIHtcbiAgY29sdW1uczogbnVtYmVyO1xuICByb3dzOiBudW1iZXI7XG4gIC8qKiBUaGUgaW5kZXggaW50byB0aGUgdW5pZm9ybXMgYXJyYXkgdGhhdCB0aGlzIHVuaWZvcm0gYmVnaW5zLiAqL1xuICBzbG90OiBudW1iZXI7XG59XG5cbi8qKlxuICogU2VlIFNrQW5pbWF0ZWRJbWFnZS5oIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoaXMgY2xhc3MuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQW5pbWF0ZWRJbWFnZSBleHRlbmRzIEVtYmluZE9iamVjdDxBbmltYXRlZEltYWdlPiB7XG4gIC8qKlxuICAgKiBEZWNvZGVzIHRoZSBuZXh0IGZyYW1lLiBSZXR1cm5zIC0xIHdoZW4gdGhlIGFuaW1hdGlvbiBpcyBvbiB0aGUgbGFzdCBmcmFtZS5cbiAgICovXG4gIGRlY29kZU5leHRGcmFtZSgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgdG90YWwgbnVtYmVyIG9mIGZyYW1lcyBpbiB0aGUgYW5pbWF0aW9uLlxuICAgKi9cbiAgZ2V0RnJhbWVDb3VudCgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgcmVwZXRpdGlvbiBjb3VudCBmb3IgdGhpcyBhbmltYXRpb24uXG4gICAqL1xuICBnZXRSZXBldGl0aW9uQ291bnQoKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwb3NzaWJseSBzY2FsZWQgaGVpZ2h0IG9mIHRoZSBpbWFnZS5cbiAgICovXG4gIGhlaWdodCgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdGlsbCBpbWFnZSBvZiB0aGUgY3VycmVudCBmcmFtZSBvciBudWxsIGlmIHRoZXJlIGlzIG5vIGN1cnJlbnQgZnJhbWUuXG4gICAqL1xuICBtYWtlSW1hZ2VBdEN1cnJlbnRGcmFtZSgpOiBJbWFnZSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSBhbmltYXRpb24gdG8gdGhlIGJlZ2lubmluZy5cbiAgICovXG4gIHJlc2V0KCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHBvc3NpYmx5IHNjYWxlZCB3aWR0aCBvZiB0aGUgaW1hZ2UuXG4gICAqL1xuICB3aWR0aCgpOiBudW1iZXI7XG59XG5cbi8qKlxuICogU2VlIFNrQ2FudmFzLmggZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhpcyBjbGFzcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDYW52YXMgZXh0ZW5kcyBFbWJpbmRPYmplY3Q8Q2FudmFzPiB7XG4gIC8qKlxuICAgKiBGaWxscyB0aGUgY3VycmVudCBjbGlwIHdpdGggdGhlIGdpdmVuIGNvbG9yIHVzaW5nIFNyYyBCbGVuZE1vZGUuXG4gICAqIFRoaXMgaGFzIHRoZSBlZmZlY3Qgb2YgcmVwbGFjaW5nIGFsbCBwaXhlbHMgY29udGFpbmVkIGJ5IGNsaXAgd2l0aCBjb2xvci5cbiAgICogQHBhcmFtIGNvbG9yXG4gICAqL1xuICBjbGVhcihjb2xvcjogSW5wdXRDb2xvcik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGNsaXAgd2l0aCB0aGUgaW50ZXJzZWN0aW9uIG9yIGRpZmZlcmVuY2Ugb2YgdGhlIGN1cnJlbnQgY2xpcCBhbmQgcGF0aCxcbiAgICogd2l0aCBhbiBhbGlhc2VkIG9yIGFudGktYWxpYXNlZCBjbGlwIGVkZ2UuXG4gICAqIEBwYXJhbSBwYXRoXG4gICAqIEBwYXJhbSBvcFxuICAgKiBAcGFyYW0gZG9BbnRpQWxpYXNcbiAgICovXG4gIGNsaXBQYXRoKHBhdGg6IFBhdGgsIG9wOiBDbGlwT3AsIGRvQW50aUFsaWFzOiBib29sZWFuKTogdm9pZDtcblxuICAvKipcbiAgICogUmVwbGFjZXMgY2xpcCB3aXRoIHRoZSBpbnRlcnNlY3Rpb24gb3IgZGlmZmVyZW5jZSBvZiB0aGUgY3VycmVudCBjbGlwIGFuZCByZWN0LFxuICAgKiB3aXRoIGFuIGFsaWFzZWQgb3IgYW50aS1hbGlhc2VkIGNsaXAgZWRnZS5cbiAgICogQHBhcmFtIHJlY3RcbiAgICogQHBhcmFtIG9wXG4gICAqIEBwYXJhbSBkb0FudGlBbGlhc1xuICAgKi9cbiAgY2xpcFJlY3QocmVjdDogSW5wdXRSZWN0LCBvcDogQ2xpcE9wLCBkb0FudGlBbGlhczogYm9vbGVhbik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGNsaXAgd2l0aCB0aGUgaW50ZXJzZWN0aW9uIG9yIGRpZmZlcmVuY2Ugb2YgdGhlIGN1cnJlbnQgY2xpcCBhbmQgcnJlY3QsXG4gICAqIHdpdGggYW4gYWxpYXNlZCBvciBhbnRpLWFsaWFzZWQgY2xpcCBlZGdlLlxuICAgKiBAcGFyYW0gcnJlY3RcbiAgICogQHBhcmFtIG9wXG4gICAqIEBwYXJhbSBkb0FudGlBbGlhc1xuICAgKi9cbiAgY2xpcFJSZWN0KHJyZWN0OiBJbnB1dFJSZWN0LCBvcDogQ2xpcE9wLCBkb0FudGlBbGlhczogYm9vbGVhbik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGN1cnJlbnQgbWF0cml4IHdpdGggbSBwcmVtdWx0aXBsaWVkIHdpdGggdGhlIGV4aXN0aW5nIG1hdHJpeC5cbiAgICogQHBhcmFtIG1cbiAgICovXG4gIGNvbmNhdChtOiBJbnB1dE1hdHJpeCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIERyYXdzIGFyYyB1c2luZyBjbGlwLCBNYXRyaXgsIGFuZCBQYWludCBwYWludC5cbiAgICpcbiAgICogQXJjIGlzIHBhcnQgb2Ygb3ZhbCBib3VuZGVkIGJ5IG92YWwsIHN3ZWVwaW5nIGZyb20gc3RhcnRBbmdsZSB0byBzdGFydEFuZ2xlIHBsdXNcbiAgICogc3dlZXBBbmdsZS4gc3RhcnRBbmdsZSBhbmQgc3dlZXBBbmdsZSBhcmUgaW4gZGVncmVlcy5cbiAgICogQHBhcmFtIG92YWwgLSBib3VuZHMgb2Ygb3ZhbCBjb250YWluaW5nIGFyYyB0byBkcmF3XG4gICAqIEBwYXJhbSBzdGFydEFuZ2xlIC0gYW5nbGUgaW4gZGVncmVlcyB3aGVyZSBhcmMgYmVnaW5zXG4gICAqIEBwYXJhbSBzd2VlcEFuZ2xlIC0gc3dlZXAgYW5nbGUgaW4gZGVncmVlczsgcG9zaXRpdmUgaXMgY2xvY2t3aXNlXG4gICAqIEBwYXJhbSB1c2VDZW50ZXIgLSBpZiB0cnVlLCBpbmNsdWRlIHRoZSBjZW50ZXIgb2YgdGhlIG92YWxcbiAgICogQHBhcmFtIHBhaW50XG4gICAqL1xuICBkcmF3QXJjKFxuICAgIG92YWw6IElucHV0UmVjdCxcbiAgICBzdGFydEFuZ2xlOiBBbmdsZUluRGVncmVlcyxcbiAgICBzd2VlcEFuZ2xlOiBBbmdsZUluRGVncmVlcyxcbiAgICB1c2VDZW50ZXI6IGJvb2xlYW4sXG4gICAgcGFpbnQ6IFBhaW50LFxuICApOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBEcmF3cyBhIHNldCBvZiBzcHJpdGVzIGZyb20gYXRsYXMsIHVzaW5nIGNsaXAsIE1hdHJpeCwgYW5kIG9wdGlvbmFsIFBhaW50IHBhaW50LlxuICAgKiBAcGFyYW0gYXRsYXMgLSBJbWFnZSBjb250YWluaW5nIHNwcml0ZXNcbiAgICogQHBhcmFtIHNyY1JlY3RzIC0gUmVjdCBsb2NhdGlvbnMgb2Ygc3ByaXRlcyBpbiBhdGxhc1xuICAgKiBAcGFyYW0gZHN0WGZvcm1zIC0gUlNYZm9ybSBtYXBwaW5ncyBmb3Igc3ByaXRlcyBpbiBhdGxhc1xuICAgKiBAcGFyYW0gcGFpbnRcbiAgICogQHBhcmFtIGJsZW5kTW9kZSAtIEJsZW5kTW9kZSBjb21iaW5pbmcgY29sb3JzIGFuZCBzcHJpdGVzXG4gICAqIEBwYXJhbSBjb2xvcnMgLSBJZiBwcm92aWRlZCwgd2lsbCBiZSBibGVuZGVkIHdpdGggc3ByaXRlIHVzaW5nIGJsZW5kTW9kZS5cbiAgICogQHBhcmFtIHNhbXBsaW5nIC0gU3BlY2lmaWVzIHNhbXBsaW5nIG9wdGlvbnMuIElmIG51bGwsIGJpbGluZWFyIGlzIHVzZWQuXG4gICAqL1xuICBkcmF3QXRsYXMoXG4gICAgYXRsYXM6IEltYWdlLFxuICAgIHNyY1JlY3RzOiBJbnB1dEZsYXR0ZW5lZFJlY3RhbmdsZUFycmF5LFxuICAgIGRzdFhmb3JtczogSW5wdXRGbGF0dGVuZWRSU1hGb3JtQXJyYXksXG4gICAgcGFpbnQ6IFBhaW50LFxuICAgIGJsZW5kTW9kZT86IEJsZW5kTW9kZSB8IG51bGwsXG4gICAgY29sb3JzPzogQ29sb3JJbnRBcnJheSB8IG51bGwsXG4gICAgc2FtcGxpbmc/OiBDdWJpY1Jlc2FtcGxlciB8IEZpbHRlck9wdGlvbnMsXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIERyYXdzIGEgY2lyY2xlIGF0IChjeCwgY3kpIHdpdGggdGhlIGdpdmVuIHJhZGl1cy5cbiAgICogQHBhcmFtIGN4XG4gICAqIEBwYXJhbSBjeVxuICAgKiBAcGFyYW0gcmFkaXVzXG4gICAqIEBwYXJhbSBwYWludFxuICAgKi9cbiAgZHJhd0NpcmNsZShjeDogbnVtYmVyLCBjeTogbnVtYmVyLCByYWRpdXM6IG51bWJlciwgcGFpbnQ6IFBhaW50KTogdm9pZDtcblxuICAvKipcbiAgICogRmlsbHMgY2xpcCB3aXRoIHRoZSBnaXZlbiBjb2xvci5cbiAgICogQHBhcmFtIGNvbG9yXG4gICAqIEBwYXJhbSBibGVuZE1vZGUgLSBkZWZhdWx0cyB0byBTcmNPdmVyLlxuICAgKi9cbiAgZHJhd0NvbG9yKGNvbG9yOiBJbnB1dENvbG9yLCBibGVuZE1vZGU/OiBCbGVuZE1vZGUpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBGaWxscyBjbGlwIHdpdGggdGhlIGdpdmVuIGNvbG9yLlxuICAgKiBAcGFyYW0gciAtIHJlZCB2YWx1ZSAodHlwaWNhbGx5IGZyb20gMCB0byAxLjApLlxuICAgKiBAcGFyYW0gZyAtIGdyZWVuIHZhbHVlICh0eXBpY2FsbHkgZnJvbSAwIHRvIDEuMCkuXG4gICAqIEBwYXJhbSBiIC0gYmx1ZSB2YWx1ZSAodHlwaWNhbGx5IGZyb20gMCB0byAxLjApLlxuICAgKiBAcGFyYW0gYSAtIGFscGhhIHZhbHVlLCByYW5nZSAwIHRvIDEuMCAoMS4wIGlzIG9wYXF1ZSkuXG4gICAqIEBwYXJhbSBibGVuZE1vZGUgLSBkZWZhdWx0cyB0byBTcmNPdmVyLlxuICAgKi9cbiAgZHJhd0NvbG9yQ29tcG9uZW50cyhcbiAgICByOiBudW1iZXIsXG4gICAgZzogbnVtYmVyLFxuICAgIGI6IG51bWJlcixcbiAgICBhOiBudW1iZXIsXG4gICAgYmxlbmRNb2RlPzogQmxlbmRNb2RlLFxuICApOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBGaWxscyBjbGlwIHdpdGggdGhlIGdpdmVuIGNvbG9yLlxuICAgKiBAcGFyYW0gY29sb3JcbiAgICogQHBhcmFtIGJsZW5kTW9kZSAtIGRlZmF1bHRzIHRvIFNyY092ZXIuXG4gICAqL1xuICBkcmF3Q29sb3JJbnQoY29sb3I6IENvbG9ySW50LCBibGVuZE1vZGU/OiBCbGVuZE1vZGUpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBEcmF3cyBSUmVjdCBvdXRlciBhbmQgaW5uZXIgdXNpbmcgY2xpcCwgTWF0cml4LCBhbmQgUGFpbnQgcGFpbnQuXG4gICAqIG91dGVyIG11c3QgY29udGFpbiBpbm5lciBvciB0aGUgZHJhd2luZyBpcyB1bmRlZmluZWQuXG4gICAqIEBwYXJhbSBvdXRlclxuICAgKiBAcGFyYW0gaW5uZXJcbiAgICogQHBhcmFtIHBhaW50XG4gICAqL1xuICBkcmF3RFJSZWN0KG91dGVyOiBJbnB1dFJSZWN0LCBpbm5lcjogSW5wdXRSUmVjdCwgcGFpbnQ6IFBhaW50KTogdm9pZDtcblxuICAvKipcbiAgICogRHJhd3MgYSBydW4gb2YgZ2x5cGhzLCBhdCBjb3JyZXNwb25kaW5nIHBvc2l0aW9ucywgaW4gYSBnaXZlbiBmb250LlxuICAgKiBAcGFyYW0gZ2x5cGhzIHRoZSBhcnJheSBvZiBnbHlwaCBJRHMgKFVpbnQxNlR5cGVkQXJyYXkpXG4gICAqIEBwYXJhbSBwb3NpdGlvbnMgdGhlIGFycmF5IG9mIHgseSBmbG9hdHMgdG8gcG9zaXRpb24gZWFjaCBnbHlwaFxuICAgKiBAcGFyYW0geCB4LWNvb3JkaW5hdGUgb2YgdGhlIG9yaWdpbiBvZiB0aGUgZW50aXJlIHJ1blxuICAgKiBAcGFyYW0geSB5LWNvb3JkaW5hdGUgb2YgdGhlIG9yaWdpbiBvZiB0aGUgZW50aXJlIHJ1blxuICAgKiBAcGFyYW0gZm9udCB0aGUgZm9udCB0aGF0IGNvbnRhaW5zIHRoZSBnbHlwaHNcbiAgICogQHBhcmFtIHBhaW50XG4gICAqL1xuICBkcmF3R2x5cGhzKFxuICAgIGdseXBoczogSW5wdXRHbHlwaElEQXJyYXksXG4gICAgcG9zaXRpb25zOiBJbnB1dEZsYXR0ZW5lZFBvaW50QXJyYXksXG4gICAgeDogbnVtYmVyLFxuICAgIHk6IG51bWJlcixcbiAgICBmb250OiBGb250LFxuICAgIHBhaW50OiBQYWludCxcbiAgKTogdm9pZDtcblxuICAvKipcbiAgICogRHJhd3MgdGhlIGdpdmVuIGltYWdlIHdpdGggaXRzIHRvcC1sZWZ0IGNvcm5lciBhdCAobGVmdCwgdG9wKSB1c2luZyB0aGUgY3VycmVudCBjbGlwLFxuICAgKiB0aGUgY3VycmVudCBtYXRyaXgsIGFuZCBvcHRpb25hbGx5LXByb3ZpZGVkIHBhaW50LlxuICAgKiBAcGFyYW0gaW1nXG4gICAqIEBwYXJhbSBsZWZ0XG4gICAqIEBwYXJhbSB0b3BcbiAgICogQHBhcmFtIHBhaW50XG4gICAqL1xuICBkcmF3SW1hZ2UoaW1nOiBJbWFnZSwgbGVmdDogbnVtYmVyLCB0b3A6IG51bWJlciwgcGFpbnQ/OiBQYWludCB8IG51bGwpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgZ2l2ZW4gaW1hZ2Ugd2l0aCBpdHMgdG9wLWxlZnQgY29ybmVyIGF0IChsZWZ0LCB0b3ApIHVzaW5nIHRoZSBjdXJyZW50IGNsaXAsXG4gICAqIHRoZSBjdXJyZW50IG1hdHJpeC4gSXQgd2lsbCB1c2UgdGhlIGN1YmljIHNhbXBsaW5nIG9wdGlvbnMgQiBhbmQgQyBpZiBuZWNlc3NhcnkuXG4gICAqIEBwYXJhbSBpbWdcbiAgICogQHBhcmFtIGxlZnRcbiAgICogQHBhcmFtIHRvcFxuICAgKiBAcGFyYW0gQiAtIFNlZSBDdWJpY1Jlc2FtcGxlciBpbiBTa1NhbXBsaW5nT3B0aW9ucy5oIGZvciBtb3JlIGluZm9ybWF0aW9uXG4gICAqIEBwYXJhbSBDIC0gU2VlIEN1YmljUmVzYW1wbGVyIGluIFNrU2FtcGxpbmdPcHRpb25zLmggZm9yIG1vcmUgaW5mb3JtYXRpb25cbiAgICogQHBhcmFtIHBhaW50XG4gICAqL1xuICBkcmF3SW1hZ2VDdWJpYyhcbiAgICBpbWc6IEltYWdlLFxuICAgIGxlZnQ6IG51bWJlcixcbiAgICB0b3A6IG51bWJlcixcbiAgICBCOiBudW1iZXIsXG4gICAgQzogbnVtYmVyLFxuICAgIHBhaW50PzogUGFpbnQgfCBudWxsLFxuICApOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgZ2l2ZW4gaW1hZ2Ugd2l0aCBpdHMgdG9wLWxlZnQgY29ybmVyIGF0IChsZWZ0LCB0b3ApIHVzaW5nIHRoZSBjdXJyZW50IGNsaXAsXG4gICAqIHRoZSBjdXJyZW50IG1hdHJpeC4gSXQgd2lsbCB1c2UgdGhlIHByb3ZpZGVkIHNhbXBsaW5nIG9wdGlvbnMgaWYgbmVjZXNzYXJ5LlxuICAgKiBAcGFyYW0gaW1nXG4gICAqIEBwYXJhbSBsZWZ0XG4gICAqIEBwYXJhbSB0b3BcbiAgICogQHBhcmFtIGZtIC0gVGhlIGZpbHRlciBtb2RlLlxuICAgKiBAcGFyYW0gbW0gLSBUaGUgbWlwbWFwIG1vZGUuIE5vdGU6IGZvciBzZXR0aW5ncyBvdGhlciB0aGFuIE5vbmUsIHRoZSBpbWFnZSBtdXN0IGhhdmUgbWlwbWFwc1xuICAgKiAgICAgICAgICAgICBjYWxjdWxhdGVkIHdpdGggbWFrZUNvcHlXaXRoRGVmYXVsdE1pcG1hcHM7XG4gICAqIEBwYXJhbSBwYWludFxuICAgKi9cbiAgZHJhd0ltYWdlT3B0aW9ucyhcbiAgICBpbWc6IEltYWdlLFxuICAgIGxlZnQ6IG51bWJlcixcbiAgICB0b3A6IG51bWJlcixcbiAgICBmbTogRmlsdGVyTW9kZSxcbiAgICBtbTogTWlwbWFwTW9kZSxcbiAgICBwYWludD86IFBhaW50IHwgbnVsbCxcbiAgKTogdm9pZDtcblxuICAvKipcbiAgICogIERyYXdzIHRoZSBwcm92aWRlZCBpbWFnZSBzdHJldGNoZWQgcHJvcG9ydGlvbmFsbHkgdG8gZml0IGludG8gZHN0IHJlY3RhbmdsZS5cbiAgICogIFRoZSBjZW50ZXIgcmVjdGFuZ2xlIGRpdmlkZXMgdGhlIGltYWdlIGludG8gbmluZSBzZWN0aW9uczogZm91ciBzaWRlcywgZm91ciBjb3JuZXJzLCBhbmRcbiAgICogIHRoZSBjZW50ZXIuXG4gICAqIEBwYXJhbSBpbWdcbiAgICogQHBhcmFtIGNlbnRlclxuICAgKiBAcGFyYW0gZGVzdFxuICAgKiBAcGFyYW0gZmlsdGVyIC0gd2hhdCB0ZWNobmlxdWUgdG8gdXNlIHdoZW4gc2FtcGxpbmcgdGhlIGltYWdlXG4gICAqIEBwYXJhbSBwYWludFxuICAgKi9cbiAgZHJhd0ltYWdlTmluZShcbiAgICBpbWc6IEltYWdlLFxuICAgIGNlbnRlcjogSW5wdXRJUmVjdCxcbiAgICBkZXN0OiBJbnB1dFJlY3QsXG4gICAgZmlsdGVyOiBGaWx0ZXJNb2RlLFxuICAgIHBhaW50PzogUGFpbnQgfCBudWxsLFxuICApOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBEcmF3cyBzdWItcmVjdGFuZ2xlIHNyYyBmcm9tIHByb3ZpZGVkIGltYWdlLCBzY2FsZWQgYW5kIHRyYW5zbGF0ZWQgdG8gZmlsbCBkc3QgcmVjdGFuZ2xlLlxuICAgKiBAcGFyYW0gaW1nXG4gICAqIEBwYXJhbSBzcmNcbiAgICogQHBhcmFtIGRlc3RcbiAgICogQHBhcmFtIHBhaW50XG4gICAqIEBwYXJhbSBmYXN0U2FtcGxlIC0gaWYgZmFsc2UsIHdpbGwgZmlsdGVyIHN0cmljdGx5IHdpdGhpbiBzcmMuXG4gICAqL1xuICBkcmF3SW1hZ2VSZWN0KFxuICAgIGltZzogSW1hZ2UsXG4gICAgc3JjOiBJbnB1dFJlY3QsXG4gICAgZGVzdDogSW5wdXRSZWN0LFxuICAgIHBhaW50OiBQYWludCxcbiAgICBmYXN0U2FtcGxlPzogYm9vbGVhbixcbiAgKTogdm9pZDtcblxuICAvKipcbiAgICogRHJhd3Mgc3ViLXJlY3RhbmdsZSBzcmMgZnJvbSBwcm92aWRlZCBpbWFnZSwgc2NhbGVkIGFuZCB0cmFuc2xhdGVkIHRvIGZpbGwgZHN0IHJlY3RhbmdsZS5cbiAgICogSXQgd2lsbCB1c2UgdGhlIGN1YmljIHNhbXBsaW5nIG9wdGlvbnMgQiBhbmQgQyBpZiBuZWNlc3NhcnkuXG4gICAqIEBwYXJhbSBpbWdcbiAgICogQHBhcmFtIHNyY1xuICAgKiBAcGFyYW0gZGVzdFxuICAgKiBAcGFyYW0gQiAtIFNlZSBDdWJpY1Jlc2FtcGxlciBpbiBTa1NhbXBsaW5nT3B0aW9ucy5oIGZvciBtb3JlIGluZm9ybWF0aW9uXG4gICAqIEBwYXJhbSBDIC0gU2VlIEN1YmljUmVzYW1wbGVyIGluIFNrU2FtcGxpbmdPcHRpb25zLmggZm9yIG1vcmUgaW5mb3JtYXRpb25cbiAgICogQHBhcmFtIHBhaW50XG4gICAqL1xuICBkcmF3SW1hZ2VSZWN0Q3ViaWMoXG4gICAgaW1nOiBJbWFnZSxcbiAgICBzcmM6IElucHV0UmVjdCxcbiAgICBkZXN0OiBJbnB1dFJlY3QsXG4gICAgQjogbnVtYmVyLFxuICAgIEM6IG51bWJlcixcbiAgICBwYWludD86IFBhaW50IHwgbnVsbCxcbiAgKTogdm9pZDtcblxuICAvKipcbiAgICogRHJhd3Mgc3ViLXJlY3RhbmdsZSBzcmMgZnJvbSBwcm92aWRlZCBpbWFnZSwgc2NhbGVkIGFuZCB0cmFuc2xhdGVkIHRvIGZpbGwgZHN0IHJlY3RhbmdsZS5cbiAgICogSXQgd2lsbCB1c2UgdGhlIHByb3ZpZGVkIHNhbXBsaW5nIG9wdGlvbnMgaWYgbmVjZXNzYXJ5LlxuICAgKiBAcGFyYW0gaW1nXG4gICAqIEBwYXJhbSBzcmNcbiAgICogQHBhcmFtIGRlc3RcbiAgICogQHBhcmFtIGZtIC0gVGhlIGZpbHRlciBtb2RlLlxuICAgKiBAcGFyYW0gbW0gLSBUaGUgbWlwbWFwIG1vZGUuIE5vdGU6IGZvciBzZXR0aW5ncyBvdGhlciB0aGFuIE5vbmUsIHRoZSBpbWFnZSBtdXN0IGhhdmUgbWlwbWFwc1xuICAgKiAgICAgICAgICAgICBjYWxjdWxhdGVkIHdpdGggbWFrZUNvcHlXaXRoRGVmYXVsdE1pcG1hcHM7XG4gICAqIEBwYXJhbSBwYWludFxuICAgKi9cbiAgZHJhd0ltYWdlUmVjdE9wdGlvbnMoXG4gICAgaW1nOiBJbWFnZSxcbiAgICBzcmM6IElucHV0UmVjdCxcbiAgICBkZXN0OiBJbnB1dFJlY3QsXG4gICAgZm06IEZpbHRlck1vZGUsXG4gICAgbW06IE1pcG1hcE1vZGUsXG4gICAgcGFpbnQ/OiBQYWludCB8IG51bGwsXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIERyYXdzIGxpbmUgc2VnbWVudCBmcm9tICh4MCwgeTApIHRvICh4MSwgeTEpIHVzaW5nIHRoZSBjdXJyZW50IGNsaXAsIGN1cnJlbnQgbWF0cml4LFxuICAgKiBhbmQgdGhlIHByb3ZpZGVkIHBhaW50LlxuICAgKiBAcGFyYW0geDBcbiAgICogQHBhcmFtIHkwXG4gICAqIEBwYXJhbSB4MVxuICAgKiBAcGFyYW0geTFcbiAgICogQHBhcmFtIHBhaW50XG4gICAqL1xuICBkcmF3TGluZSh4MDogbnVtYmVyLCB5MDogbnVtYmVyLCB4MTogbnVtYmVyLCB5MTogbnVtYmVyLCBwYWludDogUGFpbnQpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBEcmF3cyBhbiBvdmFsIGJvdW5kZWQgYnkgdGhlIGdpdmVuIHJlY3RhbmdsZSB1c2luZyB0aGUgY3VycmVudCBjbGlwLCBjdXJyZW50IG1hdHJpeCxcbiAgICogYW5kIHRoZSBwcm92aWRlZCBwYWludC5cbiAgICogQHBhcmFtIG92YWxcbiAgICogQHBhcmFtIHBhaW50XG4gICAqL1xuICBkcmF3T3ZhbChvdmFsOiBJbnB1dFJlY3QsIHBhaW50OiBQYWludCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEZpbGxzIGNsaXAgd2l0aCB0aGUgZ2l2ZW4gcGFpbnQuXG4gICAqIEBwYXJhbSBwYWludFxuICAgKi9cbiAgZHJhd1BhaW50KHBhaW50OiBQYWludCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBnaXZlbiBQYXJhZ3JhcGggYXQgdGhlIHByb3ZpZGVkIGNvb3JkaW5hdGVzLlxuICAgKiBSZXF1aXJlcyB0aGUgUGFyYWdyYXBoIGNvZGUgdG8gYmUgY29tcGlsZWQgaW4uXG4gICAqIEBwYXJhbSBwXG4gICAqIEBwYXJhbSB4XG4gICAqIEBwYXJhbSB5XG4gICAqL1xuICBkcmF3UGFyYWdyYXBoKHA6IFBhcmFncmFwaCwgeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgZ2l2ZW4gcGF0aCB1c2luZyB0aGUgY3VycmVudCBjbGlwLCBjdXJyZW50IG1hdHJpeCwgYW5kIHRoZSBwcm92aWRlZCBwYWludC5cbiAgICogQHBhcmFtIHBhdGhcbiAgICogQHBhcmFtIHBhaW50XG4gICAqL1xuICBkcmF3UGF0aChwYXRoOiBQYXRoLCBwYWludDogUGFpbnQpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBEcmF3cyBhIGN1YmljIHBhdGNoIGRlZmluZWQgYnkgMTIgY29udHJvbCBwb2ludHMgW3RvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdF0gd2l0aCBvcHRpb25hbFxuICAgKiBjb2xvcnMgYW5kIHNoYWRlci1jb29yZGluYXRlcyBbNF0gc3BlY2lmZWQgZm9yIGVhY2ggY29ybmVyIFt0b3AtbGVmdCwgdG9wLXJpZ2h0LCBib3R0b20tcmlnaHQsIGJvdHRvbS1sZWZ0XVxuICAgKiBAcGFyYW0gY3ViaWNzIDEyIHBvaW50cyA6IDQgY29ubmVjdGVkIGN1YmljcyBzcGVjaWZ5aW5nIHRoZSBib3VuZGFyeSBvZiB0aGUgcGF0Y2hcbiAgICogQHBhcmFtIGNvbG9ycyBvcHRpb25hbCBjb2xvcnMgaW50ZXJwb2xhdGVkIGFjcm9zcyB0aGUgcGF0Y2hcbiAgICogQHBhcmFtIHRleHMgb3B0aW9uYWwgc2hhZGVyIGNvb3JkaW5hdGVzIGludGVycG9sYXRlZCBhY3Jvc3MgdGhlIHBhdGNoXG4gICAqIEBwYXJhbSBtb2RlIFNwZWNpZmllcyBob3cgc2hhZGVyIGFuZCBjb2xvcnMgYmxlbmQgKGlmIGJvdGggYXJlIHNwZWNpZmllZClcbiAgICogQHBhcmFtIHBhaW50XG4gICAqL1xuICBkcmF3UGF0Y2goXG4gICAgY3ViaWNzOiBJbnB1dEZsYXR0ZW5lZFBvaW50QXJyYXksXG4gICAgY29sb3JzPzogQ29sb3JJbnRBcnJheSB8IENvbG9yW10gfCBudWxsLFxuICAgIHRleHM/OiBJbnB1dEZsYXR0ZW5lZFBvaW50QXJyYXkgfCBudWxsLFxuICAgIG1vZGU/OiBCbGVuZE1vZGUgfCBudWxsLFxuICAgIHBhaW50PzogUGFpbnQsXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBnaXZlbiBwaWN0dXJlIHVzaW5nIHRoZSBjdXJyZW50IGNsaXAsIGN1cnJlbnQgbWF0cml4LCBhbmQgdGhlIHByb3ZpZGVkIHBhaW50LlxuICAgKiBAcGFyYW0gc2twXG4gICAqL1xuICBkcmF3UGljdHVyZShza3A6IFNrUGljdHVyZSk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBnaXZlbiBwb2ludHMgdXNpbmcgdGhlIGN1cnJlbnQgY2xpcCwgY3VycmVudCBtYXRyaXgsIGFuZCB0aGUgcHJvdmlkZWQgcGFpbnQuXG4gICAqXG4gICAqIFNlZSBDYW52YXMuaCBmb3IgbW9yZSBvbiB0aGUgbW9kZSBhbmQgaXRzIGludGVyYWN0aW9uIHdpdGggcGFpbnQuXG4gICAqIEBwYXJhbSBtb2RlXG4gICAqIEBwYXJhbSBwb2ludHNcbiAgICogQHBhcmFtIHBhaW50XG4gICAqL1xuICBkcmF3UG9pbnRzKFxuICAgIG1vZGU6IFBvaW50TW9kZSxcbiAgICBwb2ludHM6IElucHV0RmxhdHRlbmVkUG9pbnRBcnJheSxcbiAgICBwYWludDogUGFpbnQsXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBnaXZlbiByZWN0YW5nbGUgdXNpbmcgdGhlIGN1cnJlbnQgY2xpcCwgY3VycmVudCBtYXRyaXgsIGFuZCB0aGUgcHJvdmlkZWQgcGFpbnQuXG4gICAqIEBwYXJhbSByZWN0XG4gICAqIEBwYXJhbSBwYWludFxuICAgKi9cbiAgZHJhd1JlY3QocmVjdDogSW5wdXRSZWN0LCBwYWludDogUGFpbnQpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgZ2l2ZW4gcmVjdGFuZ2xlIHVzaW5nIHRoZSBjdXJyZW50IGNsaXAsIGN1cnJlbnQgbWF0cml4LCBhbmQgdGhlIHByb3ZpZGVkIHBhaW50LlxuICAgKiBAcGFyYW0gbGVmdFxuICAgKiBAcGFyYW0gdG9wXG4gICAqIEBwYXJhbSByaWdodFxuICAgKiBAcGFyYW0gYm90dG9tXG4gICAqIEBwYXJhbSBwYWludFxuICAgKi9cbiAgZHJhd1JlY3Q0ZihcbiAgICBsZWZ0OiBudW1iZXIsXG4gICAgdG9wOiBudW1iZXIsXG4gICAgcmlnaHQ6IG51bWJlcixcbiAgICBib3R0b206IG51bWJlcixcbiAgICBwYWludDogUGFpbnQsXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBnaXZlbiByZWN0YW5nbGUgd2l0aCByb3VuZGVkIGNvcm5lcnMgdXNpbmcgdGhlIGN1cnJlbnQgY2xpcCwgY3VycmVudCBtYXRyaXgsXG4gICAqIGFuZCB0aGUgcHJvdmlkZWQgcGFpbnQuXG4gICAqIEBwYXJhbSBycmVjdFxuICAgKiBAcGFyYW0gcGFpbnRcbiAgICovXG4gIGRyYXdSUmVjdChycmVjdDogSW5wdXRSUmVjdCwgcGFpbnQ6IFBhaW50KTogdm9pZDtcblxuICAvKipcbiAgICogRHJhdyBhbiBvZmZzZXQgc3BvdCBzaGFkb3cgYW5kIG91dGxpbmluZyBhbWJpZW50IHNoYWRvdyBmb3IgdGhlIGdpdmVuIHBhdGggdXNpbmcgYSBkaXNjXG4gICAqIGxpZ2h0LiBTZWUgU2tTaGFkb3dVdGlscy5oIGZvciBtb3JlIGRldGFpbHNcbiAgICogQHBhcmFtIHBhdGggLSBUaGUgb2NjbHVkZXIgdXNlZCB0byBnZW5lcmF0ZSB0aGUgc2hhZG93cy5cbiAgICogQHBhcmFtIHpQbGFuZVBhcmFtcyAtIFZhbHVlcyBmb3IgdGhlIHBsYW5lIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgdGhlIFogb2Zmc2V0IG9mIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgb2NjbHVkZXIgZnJvbSB0aGUgY2FudmFzIGJhc2VkIG9uIGxvY2FsIHggYW5kIHkgdmFsdWVzICh0aGUgY3VycmVudFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4IGlzIG5vdCBhcHBsaWVkKS5cbiAgICogQHBhcmFtIGxpZ2h0UG9zIC0gVGhlIDNEIHBvc2l0aW9uIG9mIHRoZSBsaWdodCByZWxhdGl2ZSB0byB0aGUgY2FudmFzIHBsYW5lLiBUaGlzIGlzXG4gICAqICAgICAgICAgICAgICAgICAgIGluZGVwZW5kZW50IG9mIHRoZSBjYW52YXMncyBjdXJyZW50IG1hdHJpeC5cbiAgICogQHBhcmFtIGxpZ2h0UmFkaXVzIC0gVGhlIHJhZGl1cyBvZiB0aGUgZGlzYyBsaWdodC5cbiAgICogQHBhcmFtIGFtYmllbnRDb2xvciAtIFRoZSBjb2xvciBvZiB0aGUgYW1iaWVudCBzaGFkb3cuXG4gICAqIEBwYXJhbSBzcG90Q29sb3IgLSAgVGhlIGNvbG9yIG9mIHRoZSBzcG90IHNoYWRvdy5cbiAgICogQHBhcmFtIGZsYWdzIC0gU2VlIFNrU2hhZG93RmxhZ3MuaDsgMCBtZWFucyB1c2UgZGVmYXVsdCBvcHRpb25zLlxuICAgKi9cbiAgZHJhd1NoYWRvdyhcbiAgICBwYXRoOiBQYXRoLFxuICAgIHpQbGFuZVBhcmFtczogSW5wdXRWZWN0b3IzLFxuICAgIGxpZ2h0UG9zOiBJbnB1dFZlY3RvcjMsXG4gICAgbGlnaHRSYWRpdXM6IG51bWJlcixcbiAgICBhbWJpZW50Q29sb3I6IElucHV0Q29sb3IsXG4gICAgc3BvdENvbG9yOiBJbnB1dENvbG9yLFxuICAgIGZsYWdzOiBudW1iZXIsXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIERyYXcgdGhlIGdpdmVuIHRleHQgYXQgdGhlIGxvY2F0aW9uICh4LCB5KSB1c2luZyB0aGUgcHJvdmlkZWQgcGFpbnQgYW5kIGZvbnQuIFRoZSB0ZXh0IHdpbGxcbiAgICogYmUgZHJhd24gYXMgaXM7IG5vIHNoYXBpbmcsIGxlZnQtdG8tcmlnaHQsIGV0Yy5cbiAgICogQHBhcmFtIHN0clxuICAgKiBAcGFyYW0geFxuICAgKiBAcGFyYW0geVxuICAgKiBAcGFyYW0gcGFpbnRcbiAgICogQHBhcmFtIGZvbnRcbiAgICovXG4gIGRyYXdUZXh0KHN0cjogc3RyaW5nLCB4OiBudW1iZXIsIHk6IG51bWJlciwgcGFpbnQ6IFBhaW50LCBmb250OiBGb250KTogdm9pZDtcblxuICAvKipcbiAgICogRHJhd3MgdGhlIGdpdmVuIFRleHRCbG9iIGF0ICh4LCB5KSB1c2luZyB0aGUgY3VycmVudCBjbGlwLCBjdXJyZW50IG1hdHJpeCwgYW5kIHRoZVxuICAgKiBwcm92aWRlZCBwYWludC4gUmVtaW5kZXIgdGhhdCB0aGUgZm9udHMgdXNlZCB0byBkcmF3IFRleHRCbG9iIGFyZSBwYXJ0IG9mIHRoZSBibG9iLlxuICAgKiBAcGFyYW0gYmxvYlxuICAgKiBAcGFyYW0geFxuICAgKiBAcGFyYW0geVxuICAgKiBAcGFyYW0gcGFpbnRcbiAgICovXG4gIGRyYXdUZXh0QmxvYihibG9iOiBUZXh0QmxvYiwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHBhaW50OiBQYWludCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBnaXZlbiB2ZXJ0aWNlcyAoYSB0cmlhbmdsZSBtZXNoKSB1c2luZyB0aGUgY3VycmVudCBjbGlwLCBjdXJyZW50IG1hdHJpeCwgYW5kIHRoZVxuICAgKiBwcm92aWRlZCBwYWludC5cbiAgICogIElmIHBhaW50IGNvbnRhaW5zIGFuIFNoYWRlciBhbmQgdmVydGljZXMgZG9lcyBub3QgY29udGFpbiB0ZXhDb29yZHMsIHRoZSBzaGFkZXJcbiAgICogIGlzIG1hcHBlZCB1c2luZyB0aGUgdmVydGljZXMnIHBvc2l0aW9ucy5cbiAgICogIElmIHZlcnRpY2VzIGNvbG9ycyBhcmUgZGVmaW5lZCBpbiB2ZXJ0aWNlcywgYW5kIFBhaW50IHBhaW50IGNvbnRhaW5zIFNoYWRlcixcbiAgICogIEJsZW5kTW9kZSBtb2RlIGNvbWJpbmVzIHZlcnRpY2VzIGNvbG9ycyB3aXRoIFNoYWRlci5cbiAgICogQHBhcmFtIHZlcnRzXG4gICAqIEBwYXJhbSBtb2RlXG4gICAqIEBwYXJhbSBwYWludFxuICAgKi9cbiAgZHJhd1ZlcnRpY2VzKHZlcnRzOiBWZXJ0aWNlcywgbW9kZTogQmxlbmRNb2RlLCBwYWludDogUGFpbnQpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSA0eDQgbWF0cml4IG1hdGNoaW5nIHRoZSBnaXZlbiBtYXJrZXIgb3IgbnVsbCBpZiB0aGVyZSB3YXMgbm9uZS5cbiAgICogU2VlIGFsc28gbWFya0NUTS5cbiAgICogQHBhcmFtIG1hcmtlclxuICAgKi9cbiAgZmluZE1hcmtlZENUTShtYXJrZXI6IHN0cmluZyk6IE1hdHJpeDR4NCB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdHJhbnNmb3JtIGZyb20gbG9jYWwgY29vcmRpbmF0ZXMgdG8gdGhlICdkZXZpY2UnLCB3aGljaCBmb3IgbW9zdFxuICAgKiBwdXJwb3NlcyBtZWFucyBwaXhlbHMuXG4gICAqL1xuICBnZXRMb2NhbFRvRGV2aWNlKCk6IE1hdHJpeDR4NDtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHNhdmVkIHN0YXRlcywgZWFjaCBjb250YWluaW5nOiBNYXRyaXggYW5kIGNsaXAuXG4gICAqIEVxdWFscyB0aGUgbnVtYmVyIG9mIHNhdmUoKSBjYWxscyBsZXNzIHRoZSBudW1iZXIgb2YgcmVzdG9yZSgpIGNhbGxzIHBsdXMgb25lLlxuICAgKiBUaGUgc2F2ZSBjb3VudCBvZiBhIG5ldyBjYW52YXMgaXMgb25lLlxuICAgKi9cbiAgZ2V0U2F2ZUNvdW50KCk6IG51bWJlcjtcblxuICAvKipcbiAgICogTGVnYWN5IHZlcnNpb24gb2YgZ2V0TG9jYWxUb0RldmljZSgpLCB3aGljaCBzdHJpcHMgYXdheSBhbnkgWiBpbmZvcm1hdGlvbiwgYW5kXG4gICAqIGp1c3QgcmV0dXJucyBhIDN4MyB2ZXJzaW9uLlxuICAgKi9cbiAgZ2V0VG90YWxNYXRyaXgoKTogbnVtYmVyW107XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgU3VyZmFjZSBtYXRjaGluZyBpbmZvIGFuZCBwcm9wcywgYW5kIGFzc29jaWF0ZXMgaXQgd2l0aCBDYW52YXMuXG4gICAqIFJldHVybnMgbnVsbCBpZiBubyBtYXRjaCBmb3VuZC5cbiAgICogQHBhcmFtIGluZm9cbiAgICovXG4gIG1ha2VTdXJmYWNlKGluZm86IEltYWdlSW5mbyk6IFN1cmZhY2UgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBSZWNvcmQgYSBtYXJrZXIgKHByb3ZpZGVkIGJ5IGNhbGxlcikgZm9yIHRoZSBjdXJyZW50IENUTS4gVGhpcyBkb2VzIG5vdCBjaGFuZ2UgYW55dGhpbmdcbiAgICogYWJvdXQgdGhlIGN0bSBvciBjbGlwLCBidXQgZG9lcyBcIm5hbWVcIiB0aGlzIG1hdHJpeCB2YWx1ZSwgc28gaXQgY2FuIGJlIHJlZmVyZW5jZWQgYnlcbiAgICogY3VzdG9tIGVmZmVjdHMgKHdobyBhY2Nlc3MgaXQgYnkgc3BlY2lmeWluZyB0aGUgc2FtZSBuYW1lKS5cbiAgICogU2VlIGFsc28gZmluZE1hcmtlZENUTS5cbiAgICogQHBhcmFtIG1hcmtlclxuICAgKi9cbiAgbWFya0NUTShtYXJrZXI6IHN0cmluZyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBUeXBlZEFycmF5IGNvbnRhaW5pbmcgdGhlIHBpeGVscyByZWFkaW5nIHN0YXJ0aW5nIGF0IChzcmNYLCBzcmNZKSBhbmQgZG9lcyBub3RcbiAgICogZXhjZWVkIHRoZSBzaXplIGluZGljYXRlZCBieSBpbWFnZUluZm8uIFNlZSBTa0NhbnZhcy5oIGZvciBtb3JlIG9uIHRoZSBjYXZlYXRzLlxuICAgKlxuICAgKiBJZiBkZXN0IGlzIG5vdCBwcm92aWRlZCwgd2UgYWxsb2NhdGUgbWVtb3J5IGVxdWFsIHRvIHRoZSBwcm92aWRlZCBoZWlnaHQgKiB0aGUgcHJvdmlkZWRcbiAgICogYnl0ZXNQZXJSb3cgdG8gZmlsbCB0aGUgZGF0YSB3aXRoLlxuICAgKlxuICAgKiBUaGlzIGlzIGdlbmVyYWxseSBhIHZlcnkgZXhwZW5zaXZlIGNhbGwgZm9yIHRoZSBHUFUgYmFja2VuZC5cbiAgICpcbiAgICogQHBhcmFtIHNyY1hcbiAgICogQHBhcmFtIHNyY1lcbiAgICogQHBhcmFtIGltYWdlSW5mbyAtIGRlc2NyaWJlcyB0aGUgZGVzdGluYXRpb24gZm9ybWF0IG9mIHRoZSBwaXhlbHMuXG4gICAqIEBwYXJhbSBkZXN0IC0gSWYgcHJvdmlkZWQsIHRoZSBwaXhlbHMgd2lsbCBiZSBjb3BpZWQgaW50byB0aGUgYWxsb2NhdGVkIGJ1ZmZlciBhbGxvd2luZ1xuICAgKiAgICAgICAgYWNjZXNzIHRvIHRoZSBwaXhlbHMgd2l0aG91dCBhbGxvY2F0aW5nIGEgbmV3IFR5cGVkQXJyYXkuXG4gICAqIEBwYXJhbSBieXRlc1BlclJvdyAtIG51bWJlciBvZiBieXRlcyBwZXIgcm93LiBNdXN0IGJlIHByb3ZpZGVkIGlmIGRlc3QgaXMgc2V0LiBUaGlzXG4gICAqICAgICAgICBkZXBlbmRzIG9uIGRlc3RpbmF0aW9uIENvbG9yVHlwZS4gRm9yIGV4YW1wbGUsIGl0IG11c3QgYmUgYXQgbGVhc3QgNCAqIHdpZHRoIGZvclxuICAgKiAgICAgICAgdGhlIDg4ODggY29sb3IgdHlwZS5cbiAgICogQHJldHVybnMgYSBUeXBlZEFycmF5IGFwcHJvcHJpYXRlIGZvciB0aGUgc3BlY2lmaWVkIENvbG9yVHlwZS4gTm90ZSB0aGF0IDE2IGJpdCBmbG9hdHMgYXJlXG4gICAqICAgICAgICAgIG5vdCBzdXBwb3J0ZWQgaW4gSlMsIHNvIHRoYXQgY29sb3JUeXBlIGNvcnJlc3BvbmRzIHRvIHJhdyBieXRlcyBVaW50OEFycmF5LlxuICAgKi9cbiAgcmVhZFBpeGVscyhcbiAgICBzcmNYOiBudW1iZXIsXG4gICAgc3JjWTogbnVtYmVyLFxuICAgIGltYWdlSW5mbzogSW1hZ2VJbmZvLFxuICAgIGRlc3Q/OiBNYWxsb2NPYmosXG4gICAgYnl0ZXNQZXJSb3c/OiBudW1iZXIsXG4gICk6IFVpbnQ4QXJyYXkgfCBGbG9hdDMyQXJyYXkgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGNoYW5nZXMgdG8gdGhlIGN1cnJlbnQgbWF0cml4IGFuZCBjbGlwIHNpbmNlIENhbnZhcyBzdGF0ZSB3YXNcbiAgICogbGFzdCBzYXZlZC4gVGhlIHN0YXRlIGlzIHJlbW92ZWQgZnJvbSB0aGUgc3RhY2suXG4gICAqIERvZXMgbm90aGluZyBpZiB0aGUgc3RhY2sgaXMgZW1wdHkuXG4gICAqL1xuICByZXN0b3JlKCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJlc3RvcmVzIHN0YXRlIHRvIGEgcHJldmlvdXMgc3RhY2sgdmFsdWUuXG4gICAqIEBwYXJhbSBzYXZlQ291bnRcbiAgICovXG4gIHJlc3RvcmVUb0NvdW50KHNhdmVDb3VudDogbnVtYmVyKTogdm9pZDtcblxuICAvKipcbiAgICogUm90YXRlcyB0aGUgY3VycmVudCBtYXRyaXggYnkgdGhlIG51bWJlciBvZiBkZWdyZWVzLlxuICAgKiBAcGFyYW0gcm90IC0gYW5nbGUgb2Ygcm90YXRpb24gaW4gZGVncmVlcy5cbiAgICogQHBhcmFtIHJ4XG4gICAqIEBwYXJhbSByeVxuICAgKi9cbiAgcm90YXRlKHJvdDogQW5nbGVJbkRlZ3JlZXMsIHJ4OiBudW1iZXIsIHJ5OiBudW1iZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTYXZlcyB0aGUgY3VycmVudCBtYXRyaXggYW5kIGNsaXAgYW5kIHJldHVybnMgY3VycmVudCBoZWlnaHQgb2YgdGhlIHN0YWNrLlxuICAgKi9cbiAgc2F2ZSgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFNhdmVzIE1hdHJpeCBhbmQgY2xpcCwgYW5kIGFsbG9jYXRlcyBhIFNrQml0bWFwIGZvciBzdWJzZXF1ZW50IGRyYXdpbmcuXG4gICAqIENhbGxpbmcgcmVzdG9yZSgpIGRpc2NhcmRzIGNoYW5nZXMgdG8gTWF0cml4IGFuZCBjbGlwLCBhbmQgZHJhd3MgdGhlIFNrQml0bWFwLlxuICAgKiBJdCByZXR1cm5zIHRoZSBoZWlnaHQgb2YgdGhlIHN0YWNrLlxuICAgKiBTZWUgQ2FudmFzLmggZm9yIG1vcmUuXG4gICAqIEBwYXJhbSBwYWludFxuICAgKiBAcGFyYW0gYm91bmRzXG4gICAqIEBwYXJhbSBiYWNrZHJvcFxuICAgKiBAcGFyYW0gZmxhZ3NcbiAgICovXG4gIHNhdmVMYXllcihcbiAgICBwYWludD86IFBhaW50LFxuICAgIGJvdW5kcz86IElucHV0UmVjdCB8IG51bGwsXG4gICAgYmFja2Ryb3A/OiBJbWFnZUZpbHRlciB8IG51bGwsXG4gICAgZmxhZ3M/OiBTYXZlTGF5ZXJGbGFnLFxuICApOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFNjYWxlcyB0aGUgY3VycmVudCBtYXRyaXggYnkgc3ggb24gdGhlIHgtYXhpcyBhbmQgc3kgb24gdGhlIHktYXhpcy5cbiAgICogQHBhcmFtIHN4XG4gICAqIEBwYXJhbSBzeVxuICAgKi9cbiAgc2NhbGUoc3g6IG51bWJlciwgc3k6IG51bWJlcik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqICBTa2V3cyBNYXRyaXggYnkgc3ggb24gdGhlIHgtYXhpcyBhbmQgc3kgb24gdGhlIHktYXhpcy4gQSBwb3NpdGl2ZSB2YWx1ZSBvZiBzeFxuICAgKiAgc2tld3MgdGhlIGRyYXdpbmcgcmlnaHQgYXMgeS1heGlzIHZhbHVlcyBpbmNyZWFzZTsgYSBwb3NpdGl2ZSB2YWx1ZSBvZiBzeSBza2V3c1xuICAgKiAgdGhlIGRyYXdpbmcgZG93biBhcyB4LWF4aXMgdmFsdWVzIGluY3JlYXNlLlxuICAgKiBAcGFyYW0gc3hcbiAgICogQHBhcmFtIHN5XG4gICAqL1xuICBza2V3KHN4OiBudW1iZXIsIHN5OiBudW1iZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGVzIE1hdHJpeCBieSBkeCBhbG9uZyB0aGUgeC1heGlzIGFuZCBkeSBhbG9uZyB0aGUgeS1heGlzLlxuICAgKiBAcGFyYW0gZHhcbiAgICogQHBhcmFtIGR5XG4gICAqL1xuICB0cmFuc2xhdGUoZHg6IG51bWJlciwgZHk6IG51bWJlcik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFdyaXRlcyB0aGUgZ2l2ZW4gcmVjdGFuZ2xlIG9mIHBpeGVscyB0byB0aGUgcHJvdmlkZWQgY29vcmRpbmF0ZXMuIFRoZSBzb3VyY2UgcGl4ZWxzXG4gICAqIHdpbGwgYmUgY29udmVydGVkIHRvIHRoZSBjYW52YXMncyBhbHBoYVR5cGUgYW5kIGNvbG9yVHlwZSBpZiB0aGV5IGRvIG5vdCBtYXRjaC5cbiAgICogQHBhcmFtIHBpeGVsc1xuICAgKiBAcGFyYW0gc3JjV2lkdGhcbiAgICogQHBhcmFtIHNyY0hlaWdodFxuICAgKiBAcGFyYW0gZGVzdFhcbiAgICogQHBhcmFtIGRlc3RZXG4gICAqIEBwYXJhbSBhbHBoYVR5cGUgLSBkZWZhdWx0cyB0byBVbnByZW11bFxuICAgKiBAcGFyYW0gY29sb3JUeXBlIC0gZGVmYXVsdHMgdG8gUkdCQV84ODg4XG4gICAqIEBwYXJhbSBjb2xvclNwYWNlIC0gZGVmYXVsdHMgdG8gU1JHQlxuICAgKi9cbiAgd3JpdGVQaXhlbHMoXG4gICAgcGl4ZWxzOiBVaW50OEFycmF5IHwgbnVtYmVyW10sXG4gICAgc3JjV2lkdGg6IG51bWJlcixcbiAgICBzcmNIZWlnaHQ6IG51bWJlcixcbiAgICBkZXN0WDogbnVtYmVyLFxuICAgIGRlc3RZOiBudW1iZXIsXG4gICAgYWxwaGFUeXBlPzogQWxwaGFUeXBlLFxuICAgIGNvbG9yVHlwZT86IENvbG9yVHlwZSxcbiAgICBjb2xvclNwYWNlPzogQ29sb3JTcGFjZSxcbiAgKTogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBTZWUgU2tDb2xvckZpbHRlci5oIGZvciBtb3JlIG9uIHRoaXMgY2xhc3MuIFRoZSBvYmplY3RzIGFyZSBvcGFxdWUuXG4gKi9cbmV4cG9ydCB0eXBlIENvbG9yRmlsdGVyID0gRW1iaW5kT2JqZWN0PENvbG9yRmlsdGVyPjtcblxuZXhwb3J0IGludGVyZmFjZSBDb250b3VyTWVhc3VyZUl0ZXIgZXh0ZW5kcyBFbWJpbmRPYmplY3Q8Q29udG91ck1lYXN1cmVJdGVyPiB7XG4gIC8qKlxuICAgKiAgSXRlcmF0ZXMgdGhyb3VnaCBjb250b3VycyBpbiBwYXRoLCByZXR1cm5pbmcgYSBjb250b3VyLW1lYXN1cmUgb2JqZWN0IGZvciBlYWNoIGNvbnRvdXJcbiAgICogIGluIHRoZSBwYXRoLiBSZXR1cm5zIG51bGwgd2hlbiBpdCBpcyBkb25lLlxuICAgKlxuICAgKiAgU2VlIFNrQ29udG91ck1lYXN1cmUuaCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgbmV4dCgpOiBDb250b3VyTWVhc3VyZSB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29udG91ck1lYXN1cmUgZXh0ZW5kcyBFbWJpbmRPYmplY3Q8Q29udG91ck1lYXN1cmU+IHtcbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGdpdmVuIHBvc2l0aW9uIGFuZCB0YW5nZW50IGxpbmUgZm9yIHRoZSBkaXN0YW5jZSBvbiB0aGUgZ2l2ZW4gY29udG91ci5cbiAgICogVGhlIHJldHVybiB2YWx1ZSBpcyA0IGZsb2F0cyBpbiB0aGlzIG9yZGVyOiBwb3NYLCBwb3NZLCB2ZWNYLCB2ZWNZLlxuICAgKiBAcGFyYW0gZGlzdGFuY2UgLSB3aWxsIGJlIHBpbm5lZCBiZXR3ZWVuIDAgYW5kIGxlbmd0aCgpLlxuICAgKiBAcGFyYW0gb3V0cHV0IC0gaWYgcHJvdmlkZWQsIHRoZSBmb3VyIGZsb2F0cyBvZiB0aGUgUG9zVGFuIHdpbGwgYmUgY29waWVkIGludG8gdGhpcyBhcnJheVxuICAgKiAgICAgICAgICAgICAgICAgaW5zdGVhZCBvZiBhbGxvY2F0aW5nIGEgbmV3IG9uZS5cbiAgICovXG4gIGdldFBvc1RhbihkaXN0YW5jZTogbnVtYmVyLCBvdXRwdXQ/OiBQb3NUYW4pOiBQb3NUYW47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gUGF0aCByZXByZXNlbnRpbmcgdGhlIHNlZ2VtZW50IG9mIHRoaXMgY29udG91ci5cbiAgICogQHBhcmFtIHN0YXJ0RCAtIHdpbGwgYmUgcGlubmVkIGJldHdlZW4gMCBhbmQgbGVuZ3RoKClcbiAgICogQHBhcmFtIHN0b3BEIC0gd2lsbCBiZSBwaW5uZWQgYmV0d2VlbiAwIGFuZCBsZW5ndGgoKVxuICAgKiBAcGFyYW0gc3RhcnRXaXRoTW92ZVRvXG4gICAqL1xuICBnZXRTZWdtZW50KHN0YXJ0RDogbnVtYmVyLCBzdG9wRDogbnVtYmVyLCBzdGFydFdpdGhNb3ZlVG86IGJvb2xlYW4pOiBQYXRoO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGNvbnRvdXIgaXMgY2xvc2VkLlxuICAgKi9cbiAgaXNDbG9zZWQoKTogYm9vbGVhbjtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoaXMgY29udG91ci5cbiAgICovXG4gIGxlbmd0aCgpOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRm9udE1ldHJpY3Mge1xuICBhc2NlbnQ6IG51bWJlcjsgLy8gc3VnZ2VzdGVkIHNwYWNlIGFib3ZlIHRoZSBiYXNlbGluZS4gPCAwXG4gIGRlc2NlbnQ6IG51bWJlcjsgLy8gc3VnZ2VzdGVkIHNwYWNlIGJlbG93IHRoZSBiYXNlbGluZS4gPiAwXG4gIGxlYWRpbmc6IG51bWJlcjsgLy8gc3VnZ2VzdGVkIHNwYWNpbmcgYmV0d2VlbiBkZXNjZW50IG9mIHByZXZpb3VzIGxpbmUgYW5kIGFzY2VudCBvZiBuZXh0IGxpbmUuXG4gIGJvdW5kcz86IFJlY3Q7IC8vIHNtYWxsZXN0IHJlY3QgY29udGFpbmluZyBhbGwgZ2x5cGhzIChyZWxhdGl2ZSB0byAwLDApXG59XG5cbi8qKlxuICogU2VlIFNrRm9udC5oIGZvciBtb3JlIG9uIHRoaXMgY2xhc3MuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRm9udCBleHRlbmRzIEVtYmluZE9iamVjdDxGb250PiB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBGb250TWV0cmljcyBmb3IgdGhpcyBmb250LlxuICAgKi9cbiAgZ2V0TWV0cmljcygpOiBGb250TWV0cmljcztcblxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSBib3VuZHMgZm9yIGVhY2ggZ2x5cGggaW4gZ2x5cGhzLlxuICAgKiBJZiBwYWludCBpcyBub3QgbnVsbCwgaXRzIHN0cm9raW5nLCBQYXRoRWZmZWN0LCBhbmQgTWFza0ZpbHRlciBmaWVsZHMgYXJlIHJlc3BlY3RlZC5cbiAgICogVGhlc2UgYXJlIHJldHVybmVkIGFzIGZsYXR0ZW5lZCByZWN0YW5nbGVzLiAgRm9yIGVhY2ggZ2x5cGgsIHRoZXJlIHdpbGwgYmUgNCBmbG9hdHMgZm9yXG4gICAqIGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbSAocmVsYXRpdmUgdG8gMCwgMCkgZm9yIHRoYXQgZ2x5cGguXG4gICAqIEBwYXJhbSBnbHlwaHNcbiAgICogQHBhcmFtIHBhaW50XG4gICAqIEBwYXJhbSBvdXRwdXQgLSBpZiBwcm92aWRlZCwgdGhlIHJlc3VsdHMgd2lsbCBiZSBjb3BpZWQgaW50byB0aGlzIGFycmF5LlxuICAgKi9cbiAgZ2V0R2x5cGhCb3VuZHMoXG4gICAgZ2x5cGhzOiBJbnB1dEdseXBoSURBcnJheSxcbiAgICBwYWludD86IFBhaW50IHwgbnVsbCxcbiAgICBvdXRwdXQ/OiBGbG9hdDMyQXJyYXksXG4gICk6IEZsb2F0MzJBcnJheTtcblxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSBnbHlwaCBpZHMgZm9yIGVhY2ggY29kZSBwb2ludCBpbiB0aGUgcHJvdmlkZWQgc3RyaW5nLiBUaGlzIGNhbGwgaXMgcGFzc2VkIHRvXG4gICAqIHRoZSB0eXBlZmFjZSBvZiB0aGlzIGZvbnQuIE5vdGUgdGhhdCBnbHlwaCBJRHMgYXJlIHR5cGVmYWNlLWRlcGVuZGVudDsgZGlmZmVyZW50IGZhY2VzXG4gICAqIG1heSBoYXZlIGRpZmZlcmVudCBpZHMgZm9yIHRoZSBzYW1lIGNvZGUgcG9pbnQuXG4gICAqIEBwYXJhbSBzdHJcbiAgICogQHBhcmFtIG51bUNvZGVQb2ludHMgLSB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIGluIHRoZSBzdHJpbmcuIERlZmF1bHRzIHRvIHN0ci5sZW5ndGguXG4gICAqIEBwYXJhbSBvdXRwdXQgLSBpZiBwcm92aWRlZCwgdGhlIHJlc3VsdHMgd2lsbCBiZSBjb3BpZWQgaW50byB0aGlzIGFycmF5LlxuICAgKi9cbiAgZ2V0R2x5cGhJRHMoXG4gICAgc3RyOiBzdHJpbmcsXG4gICAgbnVtQ29kZVBvaW50cz86IG51bWJlcixcbiAgICBvdXRwdXQ/OiBHbHlwaElEQXJyYXksXG4gICk6IEdseXBoSURBcnJheTtcblxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSBhZHZhbmNlWCBtZWFzdXJlbWVudHMgZm9yIGVhY2ggZ2x5cGguXG4gICAqIElmIHBhaW50IGlzIG5vdCBudWxsLCBpdHMgc3Ryb2tpbmcsIFBhdGhFZmZlY3QsIGFuZCBNYXNrRmlsdGVyIGZpZWxkcyBhcmUgcmVzcGVjdGVkLlxuICAgKiBPbmUgd2lkdGggcGVyIGdseXBoIGlzIHJldHVybmVkIGluIHRoZSByZXR1cm5lZCBhcnJheS5cbiAgICogQHBhcmFtIGdseXBoc1xuICAgKiBAcGFyYW0gcGFpbnRcbiAgICogQHBhcmFtIG91dHB1dCAtIGlmIHByb3ZpZGVkLCB0aGUgcmVzdWx0cyB3aWxsIGJlIGNvcGllZCBpbnRvIHRoaXMgYXJyYXkuXG4gICAqL1xuICBnZXRHbHlwaFdpZHRocyhcbiAgICBnbHlwaHM6IElucHV0R2x5cGhJREFycmF5LFxuICAgIHBhaW50PzogUGFpbnQgfCBudWxsLFxuICAgIG91dHB1dD86IEZsb2F0MzJBcnJheSxcbiAgKTogRmxvYXQzMkFycmF5O1xuXG4gIC8qKlxuICAgKiBDb21wdXRlcyBhbnkgaW50ZXJzZWN0aW9ucyBvZiBhIHRoaWNrIFwibGluZVwiIGFuZCBhIHJ1biBvZiBwb3NpdGlvbnNlZCBnbHlwaHMuXG4gICAqIFRoZSB0aGljayBsaW5lIGlzIHJlcHJlc2VudGVkIGFzIGEgdG9wIGFuZCBib3R0b20gY29vcmRpbmF0ZSAocG9zaXRpdmUgZm9yXG4gICAqIGJlbG93IHRoZSBiYXNlbGluZSwgbmVnYXRpdmUgZm9yIGFib3ZlKS4gSWYgdGhlcmUgYXJlIG5vIGludGVyc2VjdGlvbnNcbiAgICogKGUuZy4gaWYgdGhpcyBpcyBpbnRlbmRlZCBhcyBhbiB1bmRlcmxpbmUsIGFuZCB0aGVyZSBhcmUgbm8gXCJjb2xsaXNpb25zXCIpXG4gICAqIHRoZW4gdGhlIHJldHVybmVkIGFycmF5IHdpbGwgYmUgZW1wdHkuIElmIHRoZXJlIGFyZSBpbnRlcnNlY3Rpb25zLCB0aGUgYXJyYXlcbiAgICogd2lsbCBjb250YWluIHBhaXJzIG9mIFggY29vcmRpbmF0ZXMgW3N0YXJ0LCBlbmRdIGZvciBlYWNoIHNlZ21lbnQgdGhhdFxuICAgKiBpbnRlcnNlY3RlZCB3aXRoIGEgZ2x5cGguXG4gICAqXG4gICAqIEBwYXJhbSBnbHlwaHMgICAgICAgIHRoZSBnbHlwaHMgdG8gaW50ZXJzZWN0IHdpdGhcbiAgICogQHBhcmFtIHBvc2l0aW9ucyAgICAgeCx5IGNvb3JkaW5hdGVzICgyIHBlciBnbHlwaCkgZm9yIGVhY2ggZ2x5cGhcbiAgICogQHBhcmFtIHRvcCAgICAgICAgICAgdG9wIG9mIHRoZSB0aGljayBcImxpbmVcIiB0byB1c2UgZm9yIGludGVyc2VjdGlvbiB0ZXN0aW5nXG4gICAqIEBwYXJhbSBib3R0b20gICAgICAgIGJvdHRvbSBvZiB0aGUgdGhpY2sgXCJsaW5lXCIgdG8gdXNlIGZvciBpbnRlcnNlY3Rpb24gdGVzdGluZ1xuICAgKiBAcmV0dXJuICAgICAgICAgICAgICBhcnJheSBvZiBbc3RhcnQsIGVuZF0geC1jb29yZGluYXRlIHBhaXJzLiBNYXliZSBiZSBlbXB0eS5cbiAgICovXG4gIGdldEdseXBoSW50ZXJjZXB0cyhcbiAgICBnbHlwaHM6IElucHV0R2x5cGhJREFycmF5LFxuICAgIHBvc2l0aW9uczogRmxvYXQzMkFycmF5IHwgbnVtYmVyW10sXG4gICAgdG9wOiBudW1iZXIsXG4gICAgYm90dG9tOiBudW1iZXIsXG4gICk6IEZsb2F0MzJBcnJheTtcblxuICAvKipcbiAgICogUmV0dXJucyB0ZXh0IHNjYWxlIG9uIHgtYXhpcy4gRGVmYXVsdCB2YWx1ZSBpcyAxLlxuICAgKi9cbiAgZ2V0U2NhbGVYKCk6IG51bWJlcjtcblxuICAvKipcbiAgICogUmV0dXJucyB0ZXh0IHNpemUgaW4gcG9pbnRzLlxuICAgKi9cbiAgZ2V0U2l6ZSgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGV4dCBza2V3IG9uIHgtYXhpcy4gRGVmYXVsdCB2YWx1ZSBpcyB6ZXJvLlxuICAgKi9cbiAgZ2V0U2tld1goKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGVtYm9sZGVuIGVmZmVjdCBmb3IgdGhpcyBmb250LiBEZWZhdWx0IHZhbHVlIGlzIGZhbHNlLlxuICAgKi9cbiAgaXNFbWJvbGRlbigpOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBUeXBlZmFjZSBzZXQgZm9yIHRoaXMgZm9udC5cbiAgICovXG4gIGdldFR5cGVmYWNlKCk6IFR5cGVmYWNlIHwgbnVsbDtcblxuICAvKipcbiAgICogUmVxdWVzdHMsIGJ1dCBkb2VzIG5vdCByZXF1aXJlLCB0aGF0IGVkZ2UgcGl4ZWxzIGRyYXcgb3BhcXVlIG9yIHdpdGggcGFydGlhbCB0cmFuc3BhcmVuY3kuXG4gICAqIEBwYXJhbSBlZGdpbmdcbiAgICovXG4gIHNldEVkZ2luZyhlZGdpbmc6IEZvbnRFZGdpbmcpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXF1ZXN0cywgYnV0IGRvZXMgbm90IHJlcXVpcmUsIHRvIHVzZSBiaXRtYXBzIGluIGZvbnRzIGluc3RlYWQgb2Ygb3V0bGluZXMuXG4gICAqIEBwYXJhbSBlbWJlZGRlZEJpdG1hcHNcbiAgICovXG4gIHNldEVtYmVkZGVkQml0bWFwcyhlbWJlZGRlZEJpdG1hcHM6IGJvb2xlYW4pOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTZXRzIGxldmVsIG9mIGdseXBoIG91dGxpbmUgYWRqdXN0bWVudC5cbiAgICogQHBhcmFtIGhpbnRpbmdcbiAgICovXG4gIHNldEhpbnRpbmcoaGludGluZzogRm9udEhpbnRpbmcpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXF1ZXN0cywgYnV0IGRvZXMgbm90IHJlcXVpcmUsIGxpbmVhcmx5IHNjYWxhYmxlIGZvbnQgYW5kIGdseXBoIG1ldHJpY3MuXG4gICAqXG4gICAqIEZvciBvdXRsaW5lIGZvbnRzICd0cnVlJyBtZWFucyBmb250IGFuZCBnbHlwaCBtZXRyaWNzIHNob3VsZCBpZ25vcmUgaGludGluZyBhbmQgcm91bmRpbmcuXG4gICAqIE5vdGUgdGhhdCBzb21lIGJpdG1hcCBmb3JtYXRzIG1heSBub3QgYmUgYWJsZSB0byBzY2FsZSBsaW5lYXJseSBhbmQgd2lsbCBpZ25vcmUgdGhpcyBmbGFnLlxuICAgKiBAcGFyYW0gbGluZWFyTWV0cmljc1xuICAgKi9cbiAgc2V0TGluZWFyTWV0cmljcyhsaW5lYXJNZXRyaWNzOiBib29sZWFuKTogdm9pZDtcblxuICAvKipcbiAgICogU2V0cyB0aGUgdGV4dCBzY2FsZSBvbiB0aGUgeC1heGlzLlxuICAgKiBAcGFyYW0gc3hcbiAgICovXG4gIHNldFNjYWxlWChzeDogbnVtYmVyKTogdm9pZDtcblxuICAvKipcbiAgICogU2V0cyB0aGUgdGV4dCBzaXplIGluIHBvaW50cyBvbiB0aGlzIGZvbnQuXG4gICAqIEBwYXJhbSBwb2ludHNcbiAgICovXG4gIHNldFNpemUocG9pbnRzOiBudW1iZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB0ZXh0LXNrZXcgb24gdGhlIHggYXhpcyBmb3IgdGhpcyBmb250LlxuICAgKiBAcGFyYW0gc3hcbiAgICovXG4gIHNldFNrZXdYKHN4OiBudW1iZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTZXQgZW1ib2xkZW4gZWZmZWN0IGZvciB0aGlzIGZvbnQuXG4gICAqIEBwYXJhbSBlbWJvbGRlblxuICAgKi9cbiAgc2V0RW1ib2xkZW4oZW1ib2xkZW46IGJvb2xlYW4pOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXF1ZXN0cywgYnV0IGRvZXMgbm90IHJlcXVpcmUsIHRoYXQgZ2x5cGhzIHJlc3BlY3Qgc3ViLXBpeGVsIHBvc2l0aW9uaW5nLlxuICAgKiBAcGFyYW0gc3VicGl4ZWxcbiAgICovXG4gIHNldFN1YnBpeGVsKHN1YnBpeGVsOiBib29sZWFuKTogdm9pZDtcblxuICAvKipcbiAgICogU2V0cyB0aGUgdHlwZWZhY2UgdG8gdXNlIHdpdGggdGhpcyBmb250LiBudWxsIG1lYW5zIHRvIGNsZWFyIHRoZSB0eXBlZmFjZSBhbmQgdXNlIHRoZVxuICAgKiBkZWZhdWx0IG9uZS5cbiAgICogQHBhcmFtIGZhY2VcbiAgICovXG4gIHNldFR5cGVmYWNlKGZhY2U6IFR5cGVmYWNlIHwgbnVsbCk6IHZvaWQ7XG59XG5cbi8qKlxuICogU2VlIFNrRm9udE1nci5oIGZvciBtb3JlIGRldGFpbHNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBGb250TWdyIGV4dGVuZHMgRW1iaW5kT2JqZWN0PEZvbnRNZ3I+IHtcbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbnVtYmVyIG9mIGZvbnQgZmFtaWxpZXMgbG9hZGVkIGluIHRoaXMgbWFuYWdlci4gVXNlZnVsIGZvciBkZWJ1Z2dpbmcuXG4gICAqL1xuICBjb3VudEZhbWlsaWVzKCk6IG51bWJlcjtcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBudGggZmFtaWx5IG5hbWUuIFVzZWZ1bCBmb3IgZGVidWdnaW5nLlxuICAgKiBAcGFyYW0gaW5kZXhcbiAgICovXG4gIGdldEZhbWlseU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZztcblxuICAvKipcbiAgICogQ3JlYXRlIGEgdHlwZWZhY2UgZm9yIHRoZSBzcGVjaWZpZWQgYnl0ZXMgYW5kIHJldHVybiBpdC5cbiAgICogQHBhcmFtIGZvbnREYXRhXG4gICAqL1xuICBNYWtlVHlwZWZhY2VGcm9tRGF0YShmb250RGF0YTogQXJyYXlCdWZmZXIpOiBUeXBlZmFjZTtcbn1cblxuLyoqXG4gKiBTZWUgU2tJbWFnZS5oIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoaXMgY2xhc3MuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW1hZ2UgZXh0ZW5kcyBFbWJpbmRPYmplY3Q8SW1hZ2U+IHtcbiAgLyoqXG4gICAqIEVuY29kZXMgdGhpcyBpbWFnZSdzIHBpeGVscyB0byB0aGUgc3BlY2lmaWVkIGZvcm1hdCBhbmQgcmV0dXJucyB0aGVtLiBNdXN0IGJlIGJ1aWx0IHdpdGhcbiAgICogdGhlIHNwZWNpZmllZCBjb2RlYy4gSWYgdGhlIG9wdGlvbnMgYXJlIHVuc3BlY2lmaWVkLCBzZW5zaWJsZSBkZWZhdWx0cyB3aWxsIGJlXG4gICAqIGNob3Nlbi5cbiAgICogQHBhcmFtIGZtdCAtIFBORyBpcyB0aGUgZGVmYXVsdCB2YWx1ZS5cbiAgICogQHBhcmFtIHF1YWxpdHkgLSBhIHZhbHVlIGZyb20gMCB0byAxMDA7IDEwMCBpcyB0aGUgbGVhc3QgbG9zc3kuIE1heSBiZSBpZ25vcmVkLlxuICAgKi9cbiAgZW5jb2RlVG9CeXRlcyhmbXQ/OiBFbmNvZGVkSW1hZ2VGb3JtYXQsIHF1YWxpdHk/OiBudW1iZXIpOiBVaW50OEFycmF5IHwgbnVsbDtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY29sb3Igc3BhY2UgYXNzb2NpYXRlZCB3aXRoIHRoaXMgb2JqZWN0LlxuICAgKiBJdCBpcyB0aGUgdXNlcidzIHJlc3BvbnNpYmlsaXR5IHRvIGNhbGwgZGVsZXRlKCkgb24gdGhpcyBhZnRlciBpdCBoYXMgYmVlbiB1c2VkLlxuICAgKi9cbiAgZ2V0Q29sb3JTcGFjZSgpOiBDb2xvclNwYWNlO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB3aWR0aCwgaGVpZ2h0LCBjb2xvclR5cGUgYW5kIGFscGhhVHlwZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBpbWFnZS5cbiAgICogQ29sb3JzcGFjZSBpcyBzZXBhcmF0ZSBzbyBhcyB0byBub3QgYWNjaWRlbnRhbGx5IGxlYWsgdGhhdCBtZW1vcnkuXG4gICAqL1xuICBnZXRJbWFnZUluZm8oKTogUGFydGlhbEltYWdlSW5mbztcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBoZWlnaHQgaW4gcGl4ZWxzIG9mIHRoZSBpbWFnZS5cbiAgICovXG4gIGhlaWdodCgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSW1hZ2Ugd2l0aCB0aGUgc2FtZSBcImJhc2VcIiBwaXhlbHMgYXMgdGhlIHRoaXMgaW1hZ2UsIGJ1dCB3aXRoIG1pcG1hcCBsZXZlbHNcbiAgICogYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYW5kIGF0dGFjaGVkLlxuICAgKi9cbiAgbWFrZUNvcHlXaXRoRGVmYXVsdE1pcG1hcHMoKTogSW1hZ2U7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhpcyBpbWFnZSBhcyBhIHNoYWRlciB3aXRoIHRoZSBzcGVjaWZpZWQgdGlsaW5nLiBJdCB3aWxsIHVzZSBjdWJpYyBzYW1wbGluZy5cbiAgICogQHBhcmFtIHR4IC0gdGlsZSBtb2RlIGluIHRoZSB4IGRpcmVjdGlvbi5cbiAgICogQHBhcmFtIHR5IC0gdGlsZSBtb2RlIGluIHRoZSB5IGRpcmVjdGlvbi5cbiAgICogQHBhcmFtIEIgLSBTZWUgQ3ViaWNSZXNhbXBsZXIgaW4gU2tTYW1wbGluZ09wdGlvbnMuaCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuICAgKiBAcGFyYW0gQyAtIFNlZSBDdWJpY1Jlc2FtcGxlciBpbiBTa1NhbXBsaW5nT3B0aW9ucy5oIGZvciBtb3JlIGluZm9ybWF0aW9uXG4gICAqIEBwYXJhbSBsb2NhbE1hdHJpeFxuICAgKi9cbiAgbWFrZVNoYWRlckN1YmljKFxuICAgIHR4OiBUaWxlTW9kZSxcbiAgICB0eTogVGlsZU1vZGUsXG4gICAgQjogbnVtYmVyLFxuICAgIEM6IG51bWJlcixcbiAgICBsb2NhbE1hdHJpeD86IElucHV0TWF0cml4LFxuICApOiBTaGFkZXI7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhpcyBpbWFnZSBhcyBhIHNoYWRlciB3aXRoIHRoZSBzcGVjaWZpZWQgdGlsaW5nLiBJdCB3aWxsIHVzZSBjdWJpYyBzYW1wbGluZy5cbiAgICogQHBhcmFtIHR4IC0gdGlsZSBtb2RlIGluIHRoZSB4IGRpcmVjdGlvbi5cbiAgICogQHBhcmFtIHR5IC0gdGlsZSBtb2RlIGluIHRoZSB5IGRpcmVjdGlvbi5cbiAgICogQHBhcmFtIGZtIC0gVGhlIGZpbHRlciBtb2RlLlxuICAgKiBAcGFyYW0gbW0gLSBUaGUgbWlwbWFwIG1vZGUuIE5vdGU6IGZvciBzZXR0aW5ncyBvdGhlciB0aGFuIE5vbmUsIHRoZSBpbWFnZSBtdXN0IGhhdmUgbWlwbWFwc1xuICAgKiAgICAgICAgICAgICBjYWxjdWxhdGVkIHdpdGggbWFrZUNvcHlXaXRoRGVmYXVsdE1pcG1hcHM7XG4gICAqIEBwYXJhbSBsb2NhbE1hdHJpeFxuICAgKi9cbiAgbWFrZVNoYWRlck9wdGlvbnMoXG4gICAgdHg6IFRpbGVNb2RlLFxuICAgIHR5OiBUaWxlTW9kZSxcbiAgICBmbTogRmlsdGVyTW9kZSxcbiAgICBtbTogTWlwbWFwTW9kZSxcbiAgICBsb2NhbE1hdHJpeD86IElucHV0TWF0cml4LFxuICApOiBTaGFkZXI7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBUeXBlZEFycmF5IGNvbnRhaW5pbmcgdGhlIHBpeGVscyByZWFkaW5nIHN0YXJ0aW5nIGF0IChzcmNYLCBzcmNZKSBhbmQgZG9lcyBub3RcbiAgICogZXhjZWVkIHRoZSBzaXplIGluZGljYXRlZCBieSBpbWFnZUluZm8uIFNlZSBTa0ltYWdlLmggZm9yIG1vcmUgb24gdGhlIGNhdmVhdHMuXG4gICAqXG4gICAqIElmIGRlc3QgaXMgbm90IHByb3ZpZGVkLCB3ZSBhbGxvY2F0ZSBtZW1vcnkgZXF1YWwgdG8gdGhlIHByb3ZpZGVkIGhlaWdodCAqIHRoZSBwcm92aWRlZFxuICAgKiBieXRlc1BlclJvdyB0byBmaWxsIHRoZSBkYXRhIHdpdGguXG4gICAqXG4gICAqIEBwYXJhbSBzcmNYXG4gICAqIEBwYXJhbSBzcmNZXG4gICAqIEBwYXJhbSBpbWFnZUluZm8gLSBkZXNjcmliZXMgdGhlIGRlc3RpbmF0aW9uIGZvcm1hdCBvZiB0aGUgcGl4ZWxzLlxuICAgKiBAcGFyYW0gZGVzdCAtIElmIHByb3ZpZGVkLCB0aGUgcGl4ZWxzIHdpbGwgYmUgY29waWVkIGludG8gdGhlIGFsbG9jYXRlZCBidWZmZXIgYWxsb3dpbmdcbiAgICogICAgICAgIGFjY2VzcyB0byB0aGUgcGl4ZWxzIHdpdGhvdXQgYWxsb2NhdGluZyBhIG5ldyBUeXBlZEFycmF5LlxuICAgKiBAcGFyYW0gYnl0ZXNQZXJSb3cgLSBudW1iZXIgb2YgYnl0ZXMgcGVyIHJvdy4gTXVzdCBiZSBwcm92aWRlZCBpZiBkZXN0IGlzIHNldC4gVGhpc1xuICAgKiAgICAgICAgZGVwZW5kcyBvbiBkZXN0aW5hdGlvbiBDb2xvclR5cGUuIEZvciBleGFtcGxlLCBpdCBtdXN0IGJlIGF0IGxlYXN0IDQgKiB3aWR0aCBmb3JcbiAgICogICAgICAgIHRoZSA4ODg4IGNvbG9yIHR5cGUuXG4gICAqIEByZXR1cm5zIGEgVHlwZWRBcnJheSBhcHByb3ByaWF0ZSBmb3IgdGhlIHNwZWNpZmllZCBDb2xvclR5cGUuIE5vdGUgdGhhdCAxNiBiaXQgZmxvYXRzIGFyZVxuICAgKiAgICAgICAgICBub3Qgc3VwcG9ydGVkIGluIEpTLCBzbyB0aGF0IGNvbG9yVHlwZSBjb3JyZXNwb25kcyB0byByYXcgYnl0ZXMgVWludDhBcnJheS5cbiAgICovXG4gIHJlYWRQaXhlbHMoXG4gICAgc3JjWDogbnVtYmVyLFxuICAgIHNyY1k6IG51bWJlcixcbiAgICBpbWFnZUluZm86IEltYWdlSW5mbyxcbiAgICBkZXN0PzogTWFsbG9jT2JqLFxuICAgIGJ5dGVzUGVyUm93PzogbnVtYmVyLFxuICApOiBVaW50OEFycmF5IHwgRmxvYXQzMkFycmF5IHwgbnVsbDtcblxuICAvKipcbiAgICogUmV0dXJuIHRoZSB3aWR0aCBpbiBwaXhlbHMgb2YgdGhlIGltYWdlLlxuICAgKi9cbiAgd2lkdGgoKTogbnVtYmVyO1xufVxuXG4vKipcbiAqIFNlZSBJbWFnZUZpbHRlci5oIGZvciBtb3JlIG9uIHRoaXMgY2xhc3MuIFRoZSBvYmplY3RzIGFyZSBvcGFxdWUuXG4gKi9cbmV4cG9ydCB0eXBlIEltYWdlRmlsdGVyID0gRW1iaW5kT2JqZWN0PEltYWdlRmlsdGVyPjtcblxuZXhwb3J0IGludGVyZmFjZSBJbWFnZUluZm8ge1xuICBhbHBoYVR5cGU6IEFscGhhVHlwZTtcbiAgY29sb3JTcGFjZTogQ29sb3JTcGFjZTtcbiAgY29sb3JUeXBlOiBDb2xvclR5cGU7XG4gIGhlaWdodDogbnVtYmVyO1xuICB3aWR0aDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhcnRpYWxJbWFnZUluZm8ge1xuICBhbHBoYVR5cGU6IEFscGhhVHlwZTtcbiAgY29sb3JUeXBlOiBDb2xvclR5cGU7XG4gIGhlaWdodDogbnVtYmVyO1xuICB3aWR0aDogbnVtYmVyO1xufVxuXG4vKlxuICogIFNwZWNpZmllcyBzYW1wbGluZyB3aXRoIGJpY3ViaWMgY29lZmZpY2llbnRzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ3ViaWNSZXNhbXBsZXIge1xuICBCOiBudW1iZXI7IC8vIDAuLjFcbiAgQzogbnVtYmVyOyAvLyAwLi4xXG59XG5cbi8qKlxuICogU3BlY2lmaWVzIHNhbXBsaW5nIHVzaW5nIGZpbHRlciBhbmQgbWlwbWFwIG9wdGlvbnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBGaWx0ZXJPcHRpb25zIHtcbiAgZmlsdGVyOiBGaWx0ZXJNb2RlO1xuICBtaXBtYXA/OiBNaXBtYXBNb2RlOyAvLyBkZWZhdWx0cyB0byBOb25lIGlmIG5vdCBzcGVjaWZpZWRcbn1cblxuLyoqXG4gKiBTZWUgU2tNYXNrRmlsdGVyLmggZm9yIG1vcmUgb24gdGhpcyBjbGFzcy4gVGhlIG9iamVjdHMgYXJlIG9wYXF1ZS5cbiAqL1xuZXhwb3J0IHR5cGUgTWFza0ZpbHRlciA9IEVtYmluZE9iamVjdDxNYXNrRmlsdGVyPjtcblxuLyoqXG4gKiBTZWUgU2tQYWludC5oIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoaXMgY2xhc3MuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGFpbnQgZXh0ZW5kcyBFbWJpbmRPYmplY3Q8UGFpbnQ+IHtcbiAgLyoqXG4gICAqIFJldHVybnMgYSBjb3B5IG9mIHRoaXMgcGFpbnQuXG4gICAqL1xuICBjb3B5KCk6IFBhaW50O1xuXG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIGFscGhhIGFuZCBSR0IgdW5wcmVtdWx0aXBsaWVkLiBSR0IgYXJlIGV4dGVuZGVkIHNSR0IgdmFsdWVzXG4gICAqIChzUkdCIGdhbXV0LCBhbmQgZW5jb2RlZCB3aXRoIHRoZSBzUkdCIHRyYW5zZmVyIGZ1bmN0aW9uKS5cbiAgICovXG4gIGdldENvbG9yKCk6IENvbG9yO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBnZW9tZXRyeSBkcmF3biBhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2Ygc3Ryb2tlcy5cbiAgICovXG4gIGdldFN0cm9rZUNhcCgpOiBTdHJva2VDYXA7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGdlb21ldHJ5IGRyYXduIGF0IHRoZSBjb3JuZXJzIG9mIHN0cm9rZXMuXG4gICAqL1xuICBnZXRTdHJva2VKb2luKCk6IFN0cm9rZUpvaW47XG5cbiAgLyoqXG4gICAqICBSZXR1cm5zIHRoZSBsaW1pdCBhdCB3aGljaCBhIHNoYXJwIGNvcm5lciBpcyBkcmF3biBiZXZlbGVkLlxuICAgKi9cbiAgZ2V0U3Ryb2tlTWl0ZXIoKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB0aGlja25lc3Mgb2YgdGhlIHBlbiB1c2VkIHRvIG91dGxpbmUgdGhlIHNoYXBlLlxuICAgKi9cbiAgZ2V0U3Ryb2tlV2lkdGgoKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyBhbHBoYSwgbGVhdmluZyBSR0JBIHVuY2hhbmdlZC4gMCBtZWFucyBmdWxseSB0cmFuc3BhcmVudCwgMS4wIG1lYW5zIG9wYXF1ZS5cbiAgICogQHBhcmFtIGFscGhhXG4gICAqL1xuICBzZXRBbHBoYWYoYWxwaGE6IG51bWJlcik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJlcXVlc3RzLCBidXQgZG9lcyBub3QgcmVxdWlyZSwgdGhhdCBlZGdlIHBpeGVscyBkcmF3IG9wYXF1ZSBvciB3aXRoXG4gICAqIHBhcnRpYWwgdHJhbnNwYXJlbmN5LlxuICAgKiBAcGFyYW0gYWFcbiAgICovXG4gIHNldEFudGlBbGlhcyhhYTogYm9vbGVhbik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGJsZW5kIG1vZGUgdGhhdCBpcywgdGhlIG1vZGUgdXNlZCB0byBjb21iaW5lIHNvdXJjZSBjb2xvclxuICAgKiB3aXRoIGRlc3RpbmF0aW9uIGNvbG9yLlxuICAgKiBAcGFyYW0gbW9kZVxuICAgKi9cbiAgc2V0QmxlbmRNb2RlKG1vZGU6IEJsZW5kTW9kZSk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNldHMgYWxwaGEgYW5kIFJHQiB1c2VkIHdoZW4gc3Ryb2tpbmcgYW5kIGZpbGxpbmcuIFRoZSBjb2xvciBpcyBmb3VyIGZsb2F0aW5nXG4gICAqIHBvaW50IHZhbHVlcywgdW5wcmVtdWx0aXBsaWVkLiBUaGUgY29sb3IgdmFsdWVzIGFyZSBpbnRlcnByZXRlZCBhcyBiZWluZyBpblxuICAgKiB0aGUgcHJvdmlkZWQgY29sb3JTcGFjZS5cbiAgICogQHBhcmFtIGNvbG9yXG4gICAqIEBwYXJhbSBjb2xvclNwYWNlIC0gZGVmYXVsdHMgdG8gc1JHQlxuICAgKi9cbiAgc2V0Q29sb3IoY29sb3I6IElucHV0Q29sb3IsIGNvbG9yU3BhY2U/OiBDb2xvclNwYWNlKTogdm9pZDtcblxuICAvKipcbiAgICogU2V0cyBhbHBoYSBhbmQgUkdCIHVzZWQgd2hlbiBzdHJva2luZyBhbmQgZmlsbGluZy4gVGhlIGNvbG9yIGlzIGZvdXIgZmxvYXRpbmdcbiAgICogcG9pbnQgdmFsdWVzLCB1bnByZW11bHRpcGxpZWQuIFRoZSBjb2xvciB2YWx1ZXMgYXJlIGludGVycHJldGVkIGFzIGJlaW5nIGluXG4gICAqIHRoZSBwcm92aWRlZCBjb2xvclNwYWNlLlxuICAgKiBAcGFyYW0gclxuICAgKiBAcGFyYW0gZ1xuICAgKiBAcGFyYW0gYlxuICAgKiBAcGFyYW0gYVxuICAgKiBAcGFyYW0gY29sb3JTcGFjZSAtIGRlZmF1bHRzIHRvIHNSR0JcbiAgICovXG4gIHNldENvbG9yQ29tcG9uZW50cyhcbiAgICByOiBudW1iZXIsXG4gICAgZzogbnVtYmVyLFxuICAgIGI6IG51bWJlcixcbiAgICBhOiBudW1iZXIsXG4gICAgY29sb3JTcGFjZT86IENvbG9yU3BhY2UsXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgY29sb3IgZmlsdGVyLCByZXBsYWNpbmcgdGhlIGV4aXN0aW5nIG9uZSBpZiB0aGVyZSB3YXMgb25lLlxuICAgKiBAcGFyYW0gZmlsdGVyXG4gICAqL1xuICBzZXRDb2xvckZpbHRlcihmaWx0ZXI6IENvbG9yRmlsdGVyKTogdm9pZDtcblxuICAvKipcbiAgICogU2V0cyB0aGUgY29sb3IgdXNlZCB3aGVuIHN0cm9raW5nIGFuZCBmaWxsaW5nLiBUaGUgY29sb3IgdmFsdWVzIGFyZSBpbnRlcnByZXRlZCBhcyBiZWluZyBpblxuICAgKiB0aGUgcHJvdmlkZWQgY29sb3JTcGFjZS5cbiAgICogQHBhcmFtIGNvbG9yXG4gICAqIEBwYXJhbSBjb2xvclNwYWNlIC0gZGVmYXVsdHMgdG8gc1JHQi5cbiAgICovXG4gIHNldENvbG9ySW50KGNvbG9yOiBDb2xvckludCwgY29sb3JTcGFjZT86IENvbG9yU3BhY2UpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjdXJyZW50IGltYWdlIGZpbHRlciwgcmVwbGFjaW5nIHRoZSBleGlzdGluZyBvbmUgaWYgdGhlcmUgd2FzIG9uZS5cbiAgICogQHBhcmFtIGZpbHRlclxuICAgKi9cbiAgc2V0SW1hZ2VGaWx0ZXIoZmlsdGVyOiBJbWFnZUZpbHRlcik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgbWFzayBmaWx0ZXIsIHJlcGxhY2luZyB0aGUgZXhpc3Rpbmcgb25lIGlmIHRoZXJlIHdhcyBvbmUuXG4gICAqIEBwYXJhbSBmaWx0ZXJcbiAgICovXG4gIHNldE1hc2tGaWx0ZXIoZmlsdGVyOiBNYXNrRmlsdGVyKTogdm9pZDtcblxuICAvKipcbiAgICogU2V0cyB0aGUgY3VycmVudCBwYXRoIGVmZmVjdCwgcmVwbGFjaW5nIHRoZSBleGlzdGluZyBvbmUgaWYgdGhlcmUgd2FzIG9uZS5cbiAgICogQHBhcmFtIGVmZmVjdFxuICAgKi9cbiAgc2V0UGF0aEVmZmVjdChlZmZlY3Q6IFBhdGhFZmZlY3QpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBjdXJyZW50IHNoYWRlciwgcmVwbGFjaW5nIHRoZSBleGlzdGluZyBvbmUgaWYgdGhlcmUgd2FzIG9uZS5cbiAgICogQHBhcmFtIHNoYWRlclxuICAgKi9cbiAgc2V0U2hhZGVyKHNoYWRlcjogU2hhZGVyKTogdm9pZDtcblxuICAvKipcbiAgICogU2V0cyB0aGUgZ2VvbWV0cnkgZHJhd24gYXQgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIHN0cm9rZXMuXG4gICAqIEBwYXJhbSBjYXBcbiAgICovXG4gIHNldFN0cm9rZUNhcChjYXA6IFN0cm9rZUNhcCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGdlb21ldHJ5IGRyYXduIGF0IHRoZSBjb3JuZXJzIG9mIHN0cm9rZXMuXG4gICAqIEBwYXJhbSBqb2luXG4gICAqL1xuICBzZXRTdHJva2VKb2luKGpvaW46IFN0cm9rZUpvaW4pOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBsaW1pdCBhdCB3aGljaCBhIHNoYXJwIGNvcm5lciBpcyBkcmF3biBiZXZlbGVkLlxuICAgKiBAcGFyYW0gbGltaXRcbiAgICovXG4gIHNldFN0cm9rZU1pdGVyKGxpbWl0OiBudW1iZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB0aGlja25lc3Mgb2YgdGhlIHBlbiB1c2VkIHRvIG91dGxpbmUgdGhlIHNoYXBlLlxuICAgKiBAcGFyYW0gd2lkdGhcbiAgICovXG4gIHNldFN0cm9rZVdpZHRoKHdpZHRoOiBudW1iZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBTZXRzIHdoZXRoZXIgdGhlIGdlb21ldHJ5IGlzIGZpbGxlZCBvciBzdHJva2VkLlxuICAgKiBAcGFyYW0gc3R5bGVcbiAgICovXG4gIHNldFN0eWxlKHN0eWxlOiBQYWludFN0eWxlKTogdm9pZDtcbn1cblxuLyoqXG4gKiBTZWUgU2tQYXRoLmggZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gdGhpcyBjbGFzcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXRoIGV4dGVuZHMgRW1iaW5kT2JqZWN0PFBhdGg+IHtcbiAgLyoqXG4gICAqIEFwcGVuZHMgYXJjIHRvIFBhdGgsIGFzIHRoZSBzdGFydCBvZiBuZXcgY29udG91ci4gQXJjIGFkZGVkIGlzIHBhcnQgb2YgZWxsaXBzZVxuICAgKiBib3VuZGVkIGJ5IG92YWwsIGZyb20gc3RhcnRBbmdsZSB0aHJvdWdoIHN3ZWVwQW5nbGUuIEJvdGggc3RhcnRBbmdsZSBhbmRcbiAgICogc3dlZXBBbmdsZSBhcmUgbWVhc3VyZWQgaW4gZGVncmVlcywgd2hlcmUgemVybyBkZWdyZWVzIGlzIGFsaWduZWQgd2l0aCB0aGVcbiAgICogcG9zaXRpdmUgeC1heGlzLCBhbmQgcG9zaXRpdmUgc3dlZXBzIGV4dGVuZHMgYXJjIGNsb2Nrd2lzZS5cbiAgICogUmV0dXJucyB0aGUgbW9kaWZpZWQgcGF0aCBmb3IgZWFzaWVyIGNoYWluaW5nLlxuICAgKiBAcGFyYW0gb3ZhbFxuICAgKiBAcGFyYW0gc3RhcnRBbmdsZVxuICAgKiBAcGFyYW0gc3dlZXBBbmdsZVxuICAgKi9cbiAgYWRkQXJjKFxuICAgIG92YWw6IElucHV0UmVjdCxcbiAgICBzdGFydEFuZ2xlOiBBbmdsZUluRGVncmVlcyxcbiAgICBzd2VlcEFuZ2xlOiBBbmdsZUluRGVncmVlcyxcbiAgKTogUGF0aDtcblxuICAvKipcbiAgICogQWRkcyBvdmFsIHRvIFBhdGgsIGFwcGVuZGluZyBrTW92ZV9WZXJiLCBmb3VyIGtDb25pY19WZXJiLCBhbmQga0Nsb3NlX1ZlcmIuXG4gICAqIE92YWwgaXMgdXByaWdodCBlbGxpcHNlIGJvdW5kZWQgYnkgUmVjdCBvdmFsIHdpdGggcmFkaWkgZXF1YWwgdG8gaGFsZiBvdmFsIHdpZHRoXG4gICAqIGFuZCBoYWxmIG92YWwgaGVpZ2h0LiBPdmFsIGJlZ2lucyBhdCBzdGFydCBhbmQgY29udGludWVzIGNsb2Nrd2lzZSBieSBkZWZhdWx0LlxuICAgKiBSZXR1cm5zIHRoZSBtb2RpZmllZCBwYXRoIGZvciBlYXNpZXIgY2hhaW5pbmcuXG4gICAqIEBwYXJhbSBvdmFsXG4gICAqIEBwYXJhbSBpc0NDVyAtIGlmIHRoZSBwYXRoIHNob3VsZCBiZSBkcmF3biBjb3VudGVyLWNsb2Nrd2lzZSBvciBub3RcbiAgICogQHBhcmFtIHN0YXJ0SW5kZXggLSBpbmRleCBvZiBpbml0aWFsIHBvaW50IG9mIGVsbGlwc2VcbiAgICovXG4gIGFkZE92YWwob3ZhbDogSW5wdXRSZWN0LCBpc0NDVz86IGJvb2xlYW4sIHN0YXJ0SW5kZXg/OiBudW1iZXIpOiBQYXRoO1xuXG4gIC8qKlxuICAgKiBUYWtlcyAxLCAyLCA3LCBvciAxMCByZXF1aXJlZCBhcmdzLCB3aGVyZSB0aGUgZmlyc3QgYXJnIGlzIGFsd2F5cyB0aGUgcGF0aC5cbiAgICogVGhlIGxhc3QgYXJnIGlzIGFuIG9wdGlvbmFsIGJvb2xlYW4gYW5kIGNob29zZXMgYmV0d2VlbiBhZGQgb3IgZXh0ZW5kIG1vZGUuXG4gICAqIFRoZSBvcHRpb25zIGZvciB0aGUgcmVtYWluaW5nIGFyZ3MgYXJlOlxuICAgKiAgIC0gYW4gYXJyYXkgb2YgNiBvciA5IHBhcmFtZXRlcnMgKHBlcnNwZWN0aXZlIGlzIG9wdGlvbmFsKVxuICAgKiAgIC0gdGhlIDkgcGFyYW1ldGVycyBvZiBhIGZ1bGwgbWF0cml4IG9yXG4gICAqICAgICB0aGUgNiBub24tcGVyc3BlY3RpdmUgcGFyYW1zIG9mIGEgbWF0cml4LlxuICAgKiBSZXR1cm5zIHRoZSBtb2RpZmllZCBwYXRoIGZvciBlYXNpZXIgY2hhaW5pbmcgKG9yIG51bGwgaWYgcGFyYW1zIHdlcmUgaW5jb3JyZWN0KS5cbiAgICogQHBhcmFtIGFyZ3NcbiAgICovXG4gIGFkZFBhdGgoLi4uYXJnczogYW55W10pOiBQYXRoIHwgbnVsbDtcblxuICAvKipcbiAgICogQWRkcyBjb250b3VyIGNyZWF0ZWQgZnJvbSBhcnJheSBvZiBuIHBvaW50cywgYWRkaW5nIChjb3VudCAtIDEpIGxpbmUgc2VnbWVudHMuXG4gICAqIENvbnRvdXIgYWRkZWQgc3RhcnRzIGF0IHB0c1swXSwgdGhlbiBhZGRzIGEgbGluZSBmb3IgZXZlcnkgYWRkaXRpb25hbCBwb2ludFxuICAgKiBpbiBwdHMgYXJyYXkuIElmIGNsb3NlIGlzIHRydWUsIGFwcGVuZHMga0Nsb3NlX1ZlcmIgdG8gUGF0aCwgY29ubmVjdGluZ1xuICAgKiBwdHNbY291bnQgLSAxXSBhbmQgcHRzWzBdLlxuICAgKiBSZXR1cm5zIHRoZSBtb2RpZmllZCBwYXRoIGZvciBlYXNpZXIgY2hhaW5pbmcuXG4gICAqIEBwYXJhbSBwb2ludHNcbiAgICogQHBhcmFtIGNsb3NlIC0gaWYgdHJ1ZSwgd2lsbCBhZGQgYSBsaW5lIGNvbm5lY3RpbmcgbGFzdCBwb2ludCB0byB0aGUgZmlyc3QgcG9pbnQuXG4gICAqL1xuICBhZGRQb2x5KHBvaW50czogSW5wdXRGbGF0dGVuZWRQb2ludEFycmF5LCBjbG9zZTogYm9vbGVhbik6IFBhdGg7XG5cbiAgLyoqXG4gICAqIEFkZHMgUmVjdCB0byBQYXRoLCBhcHBlbmRpbmcga01vdmVfVmVyYiwgdGhyZWUga0xpbmVfVmVyYiwgYW5kIGtDbG9zZV9WZXJiLFxuICAgKiBzdGFydGluZyB3aXRoIHRvcC1sZWZ0IGNvcm5lciBvZiBSZWN0OyBmb2xsb3dlZCBieSB0b3AtcmlnaHQsIGJvdHRvbS1yaWdodCxcbiAgICogYW5kIGJvdHRvbS1sZWZ0IGlmIGlzQ0NXIGlzIGZhbHNlOyBvciBmb2xsb3dlZCBieSBib3R0b20tbGVmdCxcbiAgICogYm90dG9tLXJpZ2h0LCBhbmQgdG9wLXJpZ2h0IGlmIGlzQ0NXIGlzIHRydWUuXG4gICAqIFJldHVybnMgdGhlIG1vZGlmaWVkIHBhdGggZm9yIGVhc2llciBjaGFpbmluZy5cbiAgICogQHBhcmFtIHJlY3RcbiAgICogQHBhcmFtIGlzQ0NXXG4gICAqL1xuICBhZGRSZWN0KHJlY3Q6IElucHV0UmVjdCwgaXNDQ1c/OiBib29sZWFuKTogUGF0aDtcblxuICAvKipcbiAgICogQWRkcyBycmVjdCB0byBQYXRoLCBjcmVhdGluZyBhIG5ldyBjbG9zZWQgY29udG91ci5cbiAgICogUmV0dXJucyB0aGUgbW9kaWZpZWQgcGF0aCBmb3IgZWFzaWVyIGNoYWluaW5nLlxuICAgKiBAcGFyYW0gcnJlY3RcbiAgICogQHBhcmFtIGlzQ0NXXG4gICAqL1xuICBhZGRSUmVjdChycmVjdDogSW5wdXRSUmVjdCwgaXNDQ1c/OiBib29sZWFuKTogUGF0aDtcblxuICAvKipcbiAgICogQWRkcyB0aGUgZ2l2ZW4gdmVyYnMgYW5kIGFzc29jaWF0ZWQgcG9pbnRzL3dlaWdodHMgdG8gdGhlIHBhdGguIFRoZSBwcm9jZXNzXG4gICAqIHJlYWRzIHRoZSBmaXJzdCB2ZXJiIGZyb20gdmVyYnMgYW5kIHRoZW4gdGhlIGFwcHJvcHJpYXRlIG51bWJlciBvZiBwb2ludHMgZnJvbSB0aGVcbiAgICogRmxhdHRlbmVkUG9pbnRBcnJheSAoZS5nLiAyIHBvaW50cyBmb3IgbW92ZVRvLCA0IHBvaW50cyBmb3IgcXVhZFRvLCBldGMpLiBJZiB0aGUgdmVyYiBpc1xuICAgKiBhIGNvbmljLCBhIHdlaWdodCB3aWxsIGJlIHJlYWQgZnJvbSB0aGUgV2VpZ2h0TGlzdC5cbiAgICogUmV0dXJucyB0aGUgbW9kaWZpZWQgcGF0aCBmb3IgZWFzaWVyIGNoYWluaW5nXG4gICAqIEBwYXJhbSB2ZXJicyAtIHRoZSB2ZXJicyB0aGF0IGNyZWF0ZSB0aGlzIHBhdGgsIGluIHRoZSBvcmRlciBvZiBiZWluZyBkcmF3bi5cbiAgICogQHBhcmFtIHBvaW50cyAtIHJlcHJlc2VudHMgbiBwb2ludHMgd2l0aCAybiBmbG9hdHMuXG4gICAqIEBwYXJhbSB3ZWlnaHRzIC0gdXNlZCBpZiBhbnkgb2YgdGhlIHZlcmJzIGFyZSBjb25pY3MsIGNhbiBiZSBvbWl0dGVkIG90aGVyd2lzZS5cbiAgICovXG4gIGFkZFZlcmJzUG9pbnRzV2VpZ2h0cyhcbiAgICB2ZXJiczogVmVyYkxpc3QsXG4gICAgcG9pbnRzOiBJbnB1dEZsYXR0ZW5lZFBvaW50QXJyYXksXG4gICAgd2VpZ2h0cz86IFdlaWdodExpc3QsXG4gICk6IFBhdGg7XG5cbiAgLyoqXG4gICAqIEFkZHMgYW4gYXJjIHRvIHRoaXMgcGF0aCwgZW11bGF0aW5nIHRoZSBDYW52YXMyRCBiZWhhdmlvci5cbiAgICogUmV0dXJucyB0aGUgbW9kaWZpZWQgcGF0aCBmb3IgZWFzaWVyIGNoYWluaW5nLlxuICAgKiBAcGFyYW0geFxuICAgKiBAcGFyYW0geVxuICAgKiBAcGFyYW0gcmFkaXVzXG4gICAqIEBwYXJhbSBzdGFydEFuZ2xlXG4gICAqIEBwYXJhbSBlbmRBbmdsZVxuICAgKiBAcGFyYW0gaXNDQ1dcbiAgICovXG4gIGFyYyhcbiAgICB4OiBudW1iZXIsXG4gICAgeTogbnVtYmVyLFxuICAgIHJhZGl1czogbnVtYmVyLFxuICAgIHN0YXJ0QW5nbGU6IEFuZ2xlSW5SYWRpYW5zLFxuICAgIGVuZEFuZ2xlOiBBbmdsZUluUmFkaWFucyxcbiAgICBpc0NDVz86IGJvb2xlYW4sXG4gICk6IFBhdGg7XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgYXJjIHRvIFBhdGguIEFyYyBhZGRlZCBpcyBwYXJ0IG9mIGVsbGlwc2VcbiAgICogYm91bmRlZCBieSBvdmFsLCBmcm9tIHN0YXJ0QW5nbGUgdGhyb3VnaCBzd2VlcEFuZ2xlLiBCb3RoIHN0YXJ0QW5nbGUgYW5kXG4gICAqIHN3ZWVwQW5nbGUgYXJlIG1lYXN1cmVkIGluIGRlZ3JlZXMsIHdoZXJlIHplcm8gZGVncmVlcyBpcyBhbGlnbmVkIHdpdGggdGhlXG4gICAqIHBvc2l0aXZlIHgtYXhpcywgYW5kIHBvc2l0aXZlIHN3ZWVwcyBleHRlbmRzIGFyYyBjbG9ja3dpc2UuXG4gICAqIFJldHVybnMgdGhlIG1vZGlmaWVkIHBhdGggZm9yIGVhc2llciBjaGFpbmluZy5cbiAgICogQHBhcmFtIG92YWxcbiAgICogQHBhcmFtIHN0YXJ0QW5nbGVcbiAgICogQHBhcmFtIGVuZEFuZ2xlXG4gICAqIEBwYXJhbSBmb3JjZU1vdmVUb1xuICAgKi9cbiAgYXJjVG9PdmFsKFxuICAgIG92YWw6IElucHV0UmVjdCxcbiAgICBzdGFydEFuZ2xlOiBBbmdsZUluRGVncmVlcyxcbiAgICBlbmRBbmdsZTogQW5nbGVJbkRlZ3JlZXMsXG4gICAgZm9yY2VNb3ZlVG86IGJvb2xlYW4sXG4gICk6IFBhdGg7XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgYXJjIHRvIFBhdGguIEFyYyBpcyBpbXBsZW1lbnRlZCBieSBvbmUgb3IgbW9yZSBjb25pY3Mgd2VpZ2h0ZWQgdG9cbiAgICogZGVzY3JpYmUgcGFydCBvZiBvdmFsIHdpdGggcmFkaWkgKHJ4LCByeSkgcm90YXRlZCBieSB4QXhpc1JvdGF0ZSBkZWdyZWVzLiBBcmNcbiAgICogY3VydmVzIGZyb20gbGFzdCBQYXRoIFBvaW50IHRvICh4LCB5KSwgY2hvb3Npbmcgb25lIG9mIGZvdXIgcG9zc2libGUgcm91dGVzOlxuICAgKiBjbG9ja3dpc2Ugb3IgY291bnRlcmNsb2Nrd2lzZSwgYW5kIHNtYWxsZXIgb3IgbGFyZ2VyLiBTZWUgU2tQYXRoLmggZm9yIG1vcmUgZGV0YWlscy5cbiAgICogUmV0dXJucyB0aGUgbW9kaWZpZWQgcGF0aCBmb3IgZWFzaWVyIGNoYWluaW5nLlxuICAgKiBAcGFyYW0gcnhcbiAgICogQHBhcmFtIHJ5XG4gICAqIEBwYXJhbSB4QXhpc1JvdGF0ZVxuICAgKiBAcGFyYW0gdXNlU21hbGxBcmNcbiAgICogQHBhcmFtIGlzQ0NXXG4gICAqIEBwYXJhbSB4XG4gICAqIEBwYXJhbSB5XG4gICAqL1xuICBhcmNUb1JvdGF0ZWQoXG4gICAgcng6IG51bWJlcixcbiAgICByeTogbnVtYmVyLFxuICAgIHhBeGlzUm90YXRlOiBBbmdsZUluRGVncmVlcyxcbiAgICB1c2VTbWFsbEFyYzogYm9vbGVhbixcbiAgICBpc0NDVzogYm9vbGVhbixcbiAgICB4OiBudW1iZXIsXG4gICAgeTogbnVtYmVyLFxuICApOiBQYXRoO1xuXG4gIC8qKlxuICAgKiBBcHBlbmRzIGFyYyB0byBQYXRoLCBhZnRlciBhcHBlbmRpbmcgbGluZSBpZiBuZWVkZWQuIEFyYyBpcyBpbXBsZW1lbnRlZCBieSBjb25pY1xuICAgKiB3ZWlnaHRlZCB0byBkZXNjcmliZSBwYXJ0IG9mIGNpcmNsZS4gQXJjIGlzIGNvbnRhaW5lZCBieSB0YW5nZW50IGZyb21cbiAgICogbGFzdCBQYXRoIHBvaW50IHRvICh4MSwgeTEpLCBhbmQgdGFuZ2VudCBmcm9tICh4MSwgeTEpIHRvICh4MiwgeTIpLiBBcmNcbiAgICogaXMgcGFydCBvZiBjaXJjbGUgc2l6ZWQgdG8gcmFkaXVzLCBwb3NpdGlvbmVkIHNvIGl0IHRvdWNoZXMgYm90aCB0YW5nZW50IGxpbmVzLlxuICAgKiBSZXR1cm5zIHRoZSBtb2RpZmllZCBwYXRoIGZvciBlYXNpZXIgY2hhaW5pbmcuXG4gICAqIEBwYXJhbSB4MVxuICAgKiBAcGFyYW0geTFcbiAgICogQHBhcmFtIHgyXG4gICAqIEBwYXJhbSB5MlxuICAgKiBAcGFyYW0gcmFkaXVzXG4gICAqL1xuICBhcmNUb1RhbmdlbnQoXG4gICAgeDE6IG51bWJlcixcbiAgICB5MTogbnVtYmVyLFxuICAgIHgyOiBudW1iZXIsXG4gICAgeTI6IG51bWJlcixcbiAgICByYWRpdXM6IG51bWJlcixcbiAgKTogUGF0aDtcblxuICAvKipcbiAgICogQXBwZW5kcyBDTE9TRV9WRVJCIHRvIFBhdGguIEEgY2xvc2VkIGNvbnRvdXIgY29ubmVjdHMgdGhlIGZpcnN0IGFuZCBsYXN0IHBvaW50XG4gICAqIHdpdGggYSBsaW5lLCBmb3JtaW5nIGEgY29udGludW91cyBsb29wLlxuICAgKiBSZXR1cm5zIHRoZSBtb2RpZmllZCBwYXRoIGZvciBlYXNpZXIgY2hhaW5pbmcuXG4gICAqL1xuICBjbG9zZSgpOiBQYXRoO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG1pbmltdW0gYW5kIG1heGltdW0gYXhlcyB2YWx1ZXMgb2YgdGhlIGxpbmVzIGFuZCBjdXJ2ZXMgaW4gUGF0aC5cbiAgICogUmV0dXJucyAoMCwgMCwgMCwgMCkgaWYgUGF0aCBjb250YWlucyBubyBwb2ludHMuXG4gICAqIFJldHVybmVkIGJvdW5kcyB3aWR0aCBhbmQgaGVpZ2h0IG1heSBiZSBsYXJnZXIgb3Igc21hbGxlciB0aGFuIGFyZWEgYWZmZWN0ZWRcbiAgICogd2hlbiBQYXRoIGlzIGRyYXduLlxuICAgKlxuICAgKiBCZWhhdmVzIGlkZW50aWNhbGx5IHRvIGdldEJvdW5kcygpIHdoZW4gUGF0aCBjb250YWluc1xuICAgKiBvbmx5IGxpbmVzLiBJZiBQYXRoIGNvbnRhaW5zIGN1cnZlcywgY29tcHV0ZWQgYm91bmRzIGluY2x1ZGVzXG4gICAqIHRoZSBtYXhpbXVtIGV4dGVudCBvZiB0aGUgcXVhZCwgY29uaWMsIG9yIGN1YmljOyBpcyBzbG93ZXIgdGhhbiBnZXRCb3VuZHMoKTtcbiAgICogYW5kIHVubGlrZSBnZXRCb3VuZHMoKSwgZG9lcyBub3QgY2FjaGUgdGhlIHJlc3VsdC5cbiAgICogQHBhcmFtIG91dHB1dEFycmF5IC0gaWYgcHJvdmlkZWQsIHRoZSBib3VuZGluZyBib3ggd2lsbCBiZSBjb3BpZWQgaW50byB0aGlzIGFycmF5IGluc3RlYWQgb2ZcbiAgICogICAgICAgICAgICAgICAgICAgICAgYWxsb2NhdGluZyBhIG5ldyBvbmUuXG4gICAqL1xuICBjb21wdXRlVGlnaHRCb3VuZHMob3V0cHV0QXJyYXk/OiBSZWN0KTogUmVjdDtcblxuICAvKipcbiAgICogQWRkcyBjb25pYyBmcm9tIGxhc3QgcG9pbnQgdG93YXJkcyAoeDEsIHkxKSwgdG8gKHgyLCB5MiksIHdlaWdodGVkIGJ5IHcuXG4gICAqIElmIFBhdGggaXMgZW1wdHksIG9yIHBhdGggaXMgY2xvc2VkLCB0aGUgbGFzdCBwb2ludCBpcyBzZXQgdG8gKDAsIDApXG4gICAqIGJlZm9yZSBhZGRpbmcgY29uaWMuXG4gICAqIFJldHVybnMgdGhlIG1vZGlmaWVkIHBhdGggZm9yIGVhc2llciBjaGFpbmluZy5cbiAgICogQHBhcmFtIHgxXG4gICAqIEBwYXJhbSB5MVxuICAgKiBAcGFyYW0geDJcbiAgICogQHBhcmFtIHkyXG4gICAqIEBwYXJhbSB3XG4gICAqL1xuICBjb25pY1RvKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIsIHc6IG51bWJlcik6IFBhdGg7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcG9pbnQgKHgsIHkpIGlzIGNvbnRhaW5lZCBieSBQYXRoLCB0YWtpbmcgaW50b1xuICAgKiBhY2NvdW50IEZpbGxUeXBlLlxuICAgKiBAcGFyYW0geFxuICAgKiBAcGFyYW0geVxuICAgKi9cbiAgY29udGFpbnMoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgY29weSBvZiB0aGlzIFBhdGguXG4gICAqL1xuICBjb3B5KCk6IFBhdGg7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBwb2ludHMgaW4gdGhpcyBwYXRoLiBJbml0aWFsbHkgemVyby5cbiAgICovXG4gIGNvdW50UG9pbnRzKCk6IG51bWJlcjtcblxuICAvKipcbiAgICogIEFkZHMgY3ViaWMgZnJvbSBsYXN0IHBvaW50IHRvd2FyZHMgKHgxLCB5MSksIHRoZW4gdG93YXJkcyAoeDIsIHkyKSwgZW5kaW5nIGF0XG4gICAqICh4MywgeTMpLiBJZiBQYXRoIGlzIGVtcHR5LCBvciBwYXRoIGlzIGNsb3NlZCwgdGhlIGxhc3QgcG9pbnQgaXMgc2V0IHRvXG4gICAqICgwLCAwKSBiZWZvcmUgYWRkaW5nIGN1YmljLlxuICAgKiBAcGFyYW0gY3B4MVxuICAgKiBAcGFyYW0gY3B5MVxuICAgKiBAcGFyYW0gY3B4MlxuICAgKiBAcGFyYW0gY3B5MlxuICAgKiBAcGFyYW0geFxuICAgKiBAcGFyYW0geVxuICAgKi9cbiAgY3ViaWNUbyhcbiAgICBjcHgxOiBudW1iZXIsXG4gICAgY3B5MTogbnVtYmVyLFxuICAgIGNweDI6IG51bWJlcixcbiAgICBjcHkyOiBudW1iZXIsXG4gICAgeDogbnVtYmVyLFxuICAgIHk6IG51bWJlcixcbiAgKTogUGF0aDtcblxuICAvKipcbiAgICogQ2hhbmdlcyB0aGlzIHBhdGggdG8gYmUgdGhlIGRhc2hlZCB2ZXJzaW9uIG9mIGl0c2VsZi4gVGhpcyBpcyB0aGUgc2FtZSBlZmZlY3QgYXMgY3JlYXRpbmdcbiAgICogYSBEYXNoUGF0aEVmZmVjdCBhbmQgY2FsbGluZyBmaWx0ZXJQYXRoIG9uIHRoaXMgcGF0aC5cbiAgICogQHBhcmFtIG9uXG4gICAqIEBwYXJhbSBvZmZcbiAgICogQHBhcmFtIHBoYXNlXG4gICAqL1xuICBkYXNoKG9uOiBudW1iZXIsIG9mZjogbnVtYmVyLCBwaGFzZTogbnVtYmVyKTogYm9vbGVhbjtcblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIG90aGVyIHBhdGggaXMgZXF1YWwgdG8gdGhpcyBwYXRoLlxuICAgKiBAcGFyYW0gb3RoZXJcbiAgICovXG4gIGVxdWFscyhvdGhlcjogUGF0aCk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbWluaW11bSBhbmQgbWF4aW11bSBheGVzIHZhbHVlcyBvZiBQb2ludCBhcnJheS5cbiAgICogUmV0dXJucyAoMCwgMCwgMCwgMCkgaWYgUGF0aCBjb250YWlucyBubyBwb2ludHMuIFJldHVybmVkIGJvdW5kcyB3aWR0aCBhbmQgaGVpZ2h0IG1heVxuICAgKiBiZSBsYXJnZXIgb3Igc21hbGxlciB0aGFuIGFyZWEgYWZmZWN0ZWQgd2hlbiBQYXRoIGlzIGRyYXduLlxuICAgKiBAcGFyYW0gb3V0cHV0QXJyYXkgLSBpZiBwcm92aWRlZCwgdGhlIGJvdW5kaW5nIGJveCB3aWxsIGJlIGNvcGllZCBpbnRvIHRoaXMgYXJyYXkgaW5zdGVhZCBvZlxuICAgKiAgICAgICAgICAgICAgICAgICAgICBhbGxvY2F0aW5nIGEgbmV3IG9uZS5cbiAgICovXG4gIGdldEJvdW5kcyhvdXRwdXRBcnJheT86IFJlY3QpOiBSZWN0O1xuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIEZpbGxUeXBlIGZvciB0aGlzIHBhdGguXG4gICAqL1xuICBnZXRGaWxsVHlwZSgpOiBGaWxsVHlwZTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgUG9pbnQgYXQgaW5kZXggaW4gUG9pbnQgYXJyYXkuIFZhbGlkIHJhbmdlIGZvciBpbmRleCBpc1xuICAgKiAwIHRvIGNvdW50UG9pbnRzKCkgLSAxLlxuICAgKiBAcGFyYW0gaW5kZXhcbiAgICogQHBhcmFtIG91dHB1dEFycmF5IC0gaWYgcHJvdmlkZWQsIHRoZSBwb2ludCB3aWxsIGJlIGNvcGllZCBpbnRvIHRoaXMgYXJyYXkgaW5zdGVhZCBvZlxuICAgKiAgICAgICAgICAgICAgICAgICAgICBhbGxvY2F0aW5nIGEgbmV3IG9uZS5cbiAgICovXG4gIGdldFBvaW50KGluZGV4OiBudW1iZXIsIG91dHB1dEFycmF5PzogUG9pbnQpOiBQb2ludDtcblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZXJlIGFyZSBubyB2ZXJicyBpbiB0aGUgcGF0aC5cbiAgICovXG4gIGlzRW1wdHkoKTogYm9vbGVhbjtcblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBwYXRoIGlzIHZvbGF0aWxlOyBpdCB3aWxsIG5vdCBiZSBhbHRlcmVkIG9yIGRpc2NhcmRlZFxuICAgKiBieSB0aGUgY2FsbGVyIGFmdGVyIGl0IGlzIGRyYXduLiBQYXRoIGJ5IGRlZmF1bHQgaGF2ZSB2b2xhdGlsZSBzZXQgZmFsc2UsIGFsbG93aW5nXG4gICAqIFN1cmZhY2UgdG8gYXR0YWNoIGEgY2FjaGUgb2YgZGF0YSB3aGljaCBzcGVlZHMgcmVwZWF0ZWQgZHJhd2luZy4gSWYgdHJ1ZSwgU3VyZmFjZVxuICAgKiBtYXkgbm90IHNwZWVkIHJlcGVhdGVkIGRyYXdpbmcuXG4gICAqL1xuICBpc1ZvbGF0aWxlKCk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEFkZHMgbGluZSBmcm9tIGxhc3QgcG9pbnQgdG8gKHgsIHkpLiBJZiBQYXRoIGlzIGVtcHR5LCBvciBsYXN0IHBhdGggaXMgY2xvc2VkLFxuICAgKiBsYXN0IHBvaW50IGlzIHNldCB0byAoMCwgMCkgYmVmb3JlIGFkZGluZyBsaW5lLlxuICAgKiBSZXR1cm5zIHRoZSBtb2RpZmllZCBwYXRoIGZvciBlYXNpZXIgY2hhaW5pbmcuXG4gICAqIEBwYXJhbSB4XG4gICAqIEBwYXJhbSB5XG4gICAqL1xuICBsaW5lVG8oeDogbnVtYmVyLCB5OiBudW1iZXIpOiBQYXRoO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IHBhdGggdGhhdCBjb3ZlcnMgdGhlIHNhbWUgYXJlYSBhcyB0aGUgb3JpZ2luYWwgcGF0aCwgYnV0IHdpdGggdGhlXG4gICAqIFdpbmRpbmcgRmlsbFR5cGUuIFRoaXMgbWF5IHJlLWRyYXcgc29tZSBjb250b3VycyBpbiB0aGUgcGF0aCBhcyBjb3VudGVyLWNsb2Nrd2lzZVxuICAgKiBpbnN0ZWFkIG9mIGNsb2Nrd2lzZSB0byBhY2hpZXZlIHRoYXQgZWZmZWN0LiBJZiBzdWNoIGEgdHJhbnNmb3JtYXRpb24gY2Fubm90XG4gICAqIGJlIGRvbmUsIG51bGwgaXMgcmV0dXJuZWQuXG4gICAqL1xuICBtYWtlQXNXaW5kaW5nKCk6IFBhdGggfCBudWxsO1xuXG4gIC8qKlxuICAgKiBBZGRzIGJlZ2lubmluZyBvZiBjb250b3VyIGF0IHRoZSBnaXZlbiBwb2ludC5cbiAgICogUmV0dXJucyB0aGUgbW9kaWZpZWQgcGF0aCBmb3IgZWFzaWVyIGNoYWluaW5nLlxuICAgKiBAcGFyYW0geFxuICAgKiBAcGFyYW0geVxuICAgKi9cbiAgbW92ZVRvKHg6IG51bWJlciwgeTogbnVtYmVyKTogUGF0aDtcblxuICAvKipcbiAgICogVHJhbnNsYXRlcyBhbGwgdGhlIHBvaW50cyBpbiB0aGUgcGF0aCBieSBkeCwgZHkuXG4gICAqIFJldHVybnMgdGhlIG1vZGlmaWVkIHBhdGggZm9yIGVhc2llciBjaGFpbmluZy5cbiAgICogQHBhcmFtIGR4XG4gICAqIEBwYXJhbSBkeVxuICAgKi9cbiAgb2Zmc2V0KGR4OiBudW1iZXIsIGR5OiBudW1iZXIpOiBQYXRoO1xuXG4gIC8qKlxuICAgKiBDb21iaW5lcyB0aGlzIHBhdGggd2l0aCB0aGUgb3RoZXIgcGF0aCB1c2luZyB0aGUgZ2l2ZW4gUGF0aE9wLiBSZXR1cm5zIGZhbHNlIGlmIHRoZSBvcGVyYXRpb25cbiAgICogZmFpbHMuXG4gICAqIEBwYXJhbSBvdGhlclxuICAgKiBAcGFyYW0gb3BcbiAgICovXG4gIG9wKG90aGVyOiBQYXRoLCBvcDogUGF0aE9wKTogYm9vbGVhbjtcblxuICAvKipcbiAgICogQWRkcyBxdWFkIGZyb20gbGFzdCBwb2ludCB0b3dhcmRzICh4MSwgeTEpLCB0byAoeDIsIHkyKS5cbiAgICogSWYgUGF0aCBpcyBlbXB0eSwgb3IgcGF0aCBpcyBjbG9zZWQsIGxhc3QgcG9pbnQgaXMgc2V0IHRvICgwLCAwKSBiZWZvcmUgYWRkaW5nIHF1YWQuXG4gICAqIFJldHVybnMgdGhlIG1vZGlmaWVkIHBhdGggZm9yIGVhc2llciBjaGFpbmluZy5cbiAgICogQHBhcmFtIHgxXG4gICAqIEBwYXJhbSB5MVxuICAgKiBAcGFyYW0geDJcbiAgICogQHBhcmFtIHkyXG4gICAqL1xuICBxdWFkVG8oeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcik6IFBhdGg7XG5cbiAgLyoqXG4gICAqIFJlbGF0aXZlIHZlcnNpb24gb2YgYXJjVG9Sb3RhdGVkLlxuICAgKiBAcGFyYW0gcnhcbiAgICogQHBhcmFtIHJ5XG4gICAqIEBwYXJhbSB4QXhpc1JvdGF0ZVxuICAgKiBAcGFyYW0gdXNlU21hbGxBcmNcbiAgICogQHBhcmFtIGlzQ0NXXG4gICAqIEBwYXJhbSBkeFxuICAgKiBAcGFyYW0gZHlcbiAgICovXG4gIHJBcmNUbyhcbiAgICByeDogbnVtYmVyLFxuICAgIHJ5OiBudW1iZXIsXG4gICAgeEF4aXNSb3RhdGU6IEFuZ2xlSW5EZWdyZWVzLFxuICAgIHVzZVNtYWxsQXJjOiBib29sZWFuLFxuICAgIGlzQ0NXOiBib29sZWFuLFxuICAgIGR4OiBudW1iZXIsXG4gICAgZHk6IG51bWJlcixcbiAgKTogUGF0aDtcblxuICAvKipcbiAgICogUmVsYXRpdmUgdmVyc2lvbiBvZiBjb25pY1RvLlxuICAgKiBAcGFyYW0gZHgxXG4gICAqIEBwYXJhbSBkeTFcbiAgICogQHBhcmFtIGR4MlxuICAgKiBAcGFyYW0gZHkyXG4gICAqIEBwYXJhbSB3XG4gICAqL1xuICByQ29uaWNUbyhkeDE6IG51bWJlciwgZHkxOiBudW1iZXIsIGR4MjogbnVtYmVyLCBkeTI6IG51bWJlciwgdzogbnVtYmVyKTogUGF0aDtcblxuICAvKipcbiAgICogUmVsYXRpdmUgdmVyc2lvbiBvZiBjdWJpY1RvLlxuICAgKiBAcGFyYW0gY3B4MVxuICAgKiBAcGFyYW0gY3B5MVxuICAgKiBAcGFyYW0gY3B4MlxuICAgKiBAcGFyYW0gY3B5MlxuICAgKiBAcGFyYW0geFxuICAgKiBAcGFyYW0geVxuICAgKi9cbiAgckN1YmljVG8oXG4gICAgY3B4MTogbnVtYmVyLFxuICAgIGNweTE6IG51bWJlcixcbiAgICBjcHgyOiBudW1iZXIsXG4gICAgY3B5MjogbnVtYmVyLFxuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXIsXG4gICk6IFBhdGg7XG5cbiAgLyoqXG4gICAqIFNldHMgUGF0aCB0byBpdHMgaW5pdGlhbCBzdGF0ZS5cbiAgICogUmVtb3ZlcyB2ZXJiIGFycmF5LCBwb2ludCBhcnJheSwgYW5kIHdlaWdodHMsIGFuZCBzZXRzIEZpbGxUeXBlIHRvIFdpbmRpbmcuXG4gICAqIEludGVybmFsIHN0b3JhZ2UgYXNzb2NpYXRlZCB3aXRoIFBhdGggaXMgcmVsZWFzZWRcbiAgICovXG4gIHJlc2V0KCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNldHMgUGF0aCB0byBpdHMgaW5pdGlhbCBzdGF0ZS5cbiAgICogUmVtb3ZlcyB2ZXJiIGFycmF5LCBwb2ludCBhcnJheSwgYW5kIHdlaWdodHMsIGFuZCBzZXRzIEZpbGxUeXBlIHRvIFdpbmRpbmcuXG4gICAqIEludGVybmFsIHN0b3JhZ2UgYXNzb2NpYXRlZCB3aXRoIFBhdGggaXMgKm5vdCogcmVsZWFzZWQuXG4gICAqIFVzZSByZXdpbmQoKSBpbnN0ZWFkIG9mIHJlc2V0KCkgaWYgUGF0aCBzdG9yYWdlIHdpbGwgYmUgcmV1c2VkIGFuZCBwZXJmb3JtYW5jZVxuICAgKiBpcyBjcml0aWNhbC5cbiAgICovXG4gIHJld2luZCgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZWxhdGl2ZSB2ZXJzaW9uIG9mIGxpbmVUby5cbiAgICogQHBhcmFtIHhcbiAgICogQHBhcmFtIHlcbiAgICovXG4gIHJMaW5lVG8oeDogbnVtYmVyLCB5OiBudW1iZXIpOiBQYXRoO1xuXG4gIC8qKlxuICAgKiBSZWxhdGl2ZSB2ZXJzaW9uIG9mIG1vdmVUby5cbiAgICogQHBhcmFtIHhcbiAgICogQHBhcmFtIHlcbiAgICovXG4gIHJNb3ZlVG8oeDogbnVtYmVyLCB5OiBudW1iZXIpOiBQYXRoO1xuXG4gIC8qKlxuICAgKiBSZWxhdGl2ZSB2ZXJzaW9uIG9mIHF1YWRUby5cbiAgICogQHBhcmFtIHgxXG4gICAqIEBwYXJhbSB5MVxuICAgKiBAcGFyYW0geDJcbiAgICogQHBhcmFtIHkyXG4gICAqL1xuICByUXVhZFRvKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpOiBQYXRoO1xuXG4gIC8qKlxuICAgKiBTZXRzIEZpbGxUeXBlLCB0aGUgcnVsZSB1c2VkIHRvIGZpbGwgUGF0aC5cbiAgICogQHBhcmFtIGZpbGxcbiAgICovXG4gIHNldEZpbGxUeXBlKGZpbGw6IEZpbGxUeXBlKTogdm9pZDtcblxuICAvKipcbiAgICogU3BlY2lmaWVzIHdoZXRoZXIgUGF0aCBpcyB2b2xhdGlsZTsgd2hldGhlciBpdCB3aWxsIGJlIGFsdGVyZWQgb3IgZGlzY2FyZGVkXG4gICAqIGJ5IHRoZSBjYWxsZXIgYWZ0ZXIgaXQgaXMgZHJhd24uIFBhdGggYnkgZGVmYXVsdCBoYXZlIHZvbGF0aWxlIHNldCBmYWxzZS5cbiAgICpcbiAgICogTWFyayBhbmltYXRpbmcgb3IgdGVtcG9yYXJ5IHBhdGhzIGFzIHZvbGF0aWxlIHRvIGltcHJvdmUgcGVyZm9ybWFuY2UuXG4gICAqIE1hcmsgdW5jaGFuZ2luZyBQYXRoIG5vbi12b2xhdGlsZSB0byBpbXByb3ZlIHJlcGVhdGVkIHJlbmRlcmluZy5cbiAgICogQHBhcmFtIHZvbGF0aWxlXG4gICAqL1xuICBzZXRJc1ZvbGF0aWxlKHZvbGF0aWxlOiBib29sZWFuKTogdm9pZDtcblxuICAvKipcbiAgICogU2V0IHRoaXMgcGF0aCB0byBhIHNldCBvZiBub24tb3ZlcmxhcHBpbmcgY29udG91cnMgdGhhdCBkZXNjcmliZSB0aGVcbiAgICogc2FtZSBhcmVhIGFzIHRoZSBvcmlnaW5hbCBwYXRoLlxuICAgKiBUaGUgY3VydmUgb3JkZXIgaXMgcmVkdWNlZCB3aGVyZSBwb3NzaWJsZSBzbyB0aGF0IGN1YmljcyBtYXlcbiAgICogYmUgdHVybmVkIGludG8gcXVhZHJhdGljcywgYW5kIHF1YWRyYXRpY3MgbWF5YmUgdHVybmVkIGludG8gbGluZXMuXG4gICAqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBvcGVyYXRpb24gd2FzIGFibGUgdG8gcHJvZHVjZSBhIHJlc3VsdC5cbiAgICovXG4gIHNpbXBsaWZ5KCk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFR1cm5zIHRoaXMgcGF0aCBpbnRvIHRoZSBmaWxsZWQgZXF1aXZhbGVudCBvZiB0aGUgc3Ryb2tlZCBwYXRoLiBSZXR1cm5zIG51bGwgaWYgdGhlIG9wZXJhdGlvblxuICAgKiBmYWlscyAoZS5nLiB0aGUgcGF0aCBpcyBhIGhhaXJsaW5lKS5cbiAgICogQHBhcmFtIG9wdHMgLSBkZXNjcmliZSBob3cgc3Ryb2tlZCBwYXRoIHNob3VsZCBsb29rLlxuICAgKi9cbiAgc3Ryb2tlKG9wdHM/OiBTdHJva2VPcHRzKTogUGF0aCB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFNlcmlhbGl6ZXMgdGhlIGNvbnRlbnRzIG9mIHRoaXMgcGF0aCBhcyBhIHNlcmllcyBvZiBjb21tYW5kcy5cbiAgICogVGhlIGZpcnN0IGl0ZW0gd2lsbCBiZSBhIHZlcmIsIGZvbGxvd2VkIGJ5IGFueSBudW1iZXIgb2YgYXJndW1lbnRzIG5lZWRlZC4gVGhlbiBpdCB3aWxsXG4gICAqIGJlIGZvbGxvd2VkIGJ5IGFub3RoZXIgdmVyYiwgbW9yZSBhcmd1bWVudHMgYW5kIHNvIG9uLlxuICAgKi9cbiAgdG9DbWRzKCk6IEZsb2F0MzJBcnJheTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGlzIHBhdGggYXMgYW4gU1ZHIHN0cmluZy5cbiAgICovXG4gIHRvU1ZHU3RyaW5nKCk6IHN0cmluZztcblxuICAvKipcbiAgICogVGFrZXMgYSAzeDMgbWF0cml4IGFzIGVpdGhlciBhbiBhcnJheSBvciBhcyA5IGluZGl2aWR1YWwgcGFyYW1zLlxuICAgKiBAcGFyYW0gYXJnc1xuICAgKi9cbiAgdHJhbnNmb3JtKC4uLmFyZ3M6IGFueVtdKTogUGF0aDtcblxuICAvKipcbiAgICogVGFrZSBzdGFydCBhbmQgc3RvcCBcInRcIiB2YWx1ZXMgKHZhbHVlcyBiZXR3ZWVuIDAuLi4xKSwgYW5kIG1vZGlmeSB0aGlzIHBhdGggc3VjaCB0aGF0XG4gICAqIGl0IGlzIGEgc3Vic2V0IG9mIHRoZSBvcmlnaW5hbCBwYXRoLlxuICAgKiBUaGUgdHJpbSB2YWx1ZXMgYXBwbHkgdG8gdGhlIGVudGlyZSBwYXRoLCBzbyBpZiBpdCBjb250YWlucyBzZXZlcmFsIGNvbnRvdXJzLCBhbGwgb2YgdGhlbVxuICAgKiBhcmUgaW5jbHVkaW5nIGluIHRoZSBjYWxjdWxhdGlvbi5cbiAgICogTnVsbCBpcyByZXR1cm5lZCBpZiBlaXRoZXIgaW5wdXQgdmFsdWUgaXMgTmFOLlxuICAgKiBAcGFyYW0gc3RhcnRUIC0gYSB2YWx1ZSBpbiB0aGUgcmFuZ2UgWzAuMCwgMS4wXS4gMC4wIGlzIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHBhdGguXG4gICAqIEBwYXJhbSBzdG9wVCAgLSBhIHZhbHVlIGluIHRoZSByYW5nZSBbMC4wLCAxLjBdLiAxLjAgaXMgdGhlIGVuZCBvZiB0aGUgcGF0aC5cbiAgICogQHBhcmFtIGlzQ29tcGxlbWVudFxuICAgKi9cbiAgdHJpbShzdGFydFQ6IG51bWJlciwgc3RvcFQ6IG51bWJlciwgaXNDb21wbGVtZW50OiBib29sZWFuKTogUGF0aCB8IG51bGw7XG59XG5cbi8qKlxuICogU2VlIFNrUGF0aEVmZmVjdC5oIGZvciBtb3JlIG9uIHRoaXMgY2xhc3MuIFRoZSBvYmplY3RzIGFyZSBvcGFxdWUuXG4gKi9cbmV4cG9ydCB0eXBlIFBhdGhFZmZlY3QgPSBFbWJpbmRPYmplY3Q8UGF0aEVmZmVjdD47XG5cbi8qKlxuICogU2VlIFNrUGljdHVyZS5oIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoaXMgY2xhc3MuXG4gKlxuICogT2Ygbm90ZSwgU2tQaWN0dXJlIGlzICpub3QqIHdoYXQgaXMgY29sbG9xdWlhbGx5IHRob3VnaHQgb2YgYXMgYSBcInBpY3R1cmVcIiAod2hhdCB3ZVxuICogY2FsbCBhIGJpdG1hcCkuIEFuIFNrUGljdHVyZSBpcyBhIHNlcmllcyBvZiBkcmF3IGNvbW1hbmRzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNrUGljdHVyZSBleHRlbmRzIEVtYmluZE9iamVjdDxTa1BpY3R1cmU+IHtcbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHNlcmlhbGl6ZWQgZm9ybWF0IG9mIHRoaXMgU2tQaWN0dXJlLiBUaGUgZm9ybWF0IG1heSBjaGFuZ2UgYXQgYW55dGltZSBhbmRcbiAgICogbm8gcHJvbWlzZXMgYXJlIG1hZGUgZm9yIGJhY2t3YXJkcyBvciBmb3J3YXJkIGNvbXBhdGliaWxpdHkuXG4gICAqL1xuICBzZXJpYWxpemUoKTogVWludDhBcnJheSB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGljdHVyZVJlY29yZGVyIGV4dGVuZHMgRW1iaW5kT2JqZWN0PFBpY3R1cmVSZWNvcmRlcj4ge1xuICAvKipcbiAgICogUmV0dXJucyBhIGNhbnZhcyBvbiB3aGljaCB0byBkcmF3LiBXaGVuIGRvbmUgZHJhd2luZywgY2FsbCBmaW5pc2hSZWNvcmRpbmdBc1BpY3R1cmUoKVxuICAgKlxuICAgKiBAcGFyYW0gYm91bmRzIC0gYSByZWN0IHRvIGN1bGwgdGhlIHJlc3VsdHMuXG4gICAqL1xuICBiZWdpblJlY29yZGluZyhib3VuZHM6IElucHV0UmVjdCk6IENhbnZhcztcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY2FwdHVyZWQgZHJhdyBjb21tYW5kcyBhcyBhIHBpY3R1cmUgYW5kIGludmFsaWRhdGVzIHRoZSBjYW52YXMgcmV0dXJuZWQgZWFybGllci5cbiAgICovXG4gIGZpbmlzaFJlY29yZGluZ0FzUGljdHVyZSgpOiBTa1BpY3R1cmU7XG59XG5cbi8qKlxuICogU2VlIFNrUnVudGltZUVmZmVjdC5oIGZvciBtb3JlIGRldGFpbHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUnVudGltZUVmZmVjdCBleHRlbmRzIEVtYmluZE9iamVjdDxSdW50aW1lRWZmZWN0PiB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc2hhZGVyIGV4ZWN1dGVkIHVzaW5nIHRoZSBnaXZlbiB1bmlmb3JtIGRhdGEuXG4gICAqIEBwYXJhbSB1bmlmb3Jtc1xuICAgKiBAcGFyYW0gaXNPcGFxdWVcbiAgICogQHBhcmFtIGxvY2FsTWF0cml4XG4gICAqL1xuICBtYWtlU2hhZGVyKFxuICAgIHVuaWZvcm1zOiBGbG9hdDMyQXJyYXkgfCBudW1iZXJbXSxcbiAgICBpc09wYXF1ZT86IGJvb2xlYW4sXG4gICAgbG9jYWxNYXRyaXg/OiBJbnB1dE1hdHJpeCxcbiAgKTogU2hhZGVyO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc2hhZGVyIGV4ZWN1dGVkIHVzaW5nIHRoZSBnaXZlbiB1bmlmb3JtIGRhdGEgYW5kIHRoZSBjaGlsZHJlbiBhcyBpbnB1dHMuXG4gICAqIEBwYXJhbSB1bmlmb3Jtc1xuICAgKiBAcGFyYW0gaXNPcGFxdWVcbiAgICogQHBhcmFtIGNoaWxkcmVuXG4gICAqIEBwYXJhbSBsb2NhbE1hdHJpeFxuICAgKi9cbiAgbWFrZVNoYWRlcldpdGhDaGlsZHJlbihcbiAgICB1bmlmb3JtczogRmxvYXQzMkFycmF5IHwgbnVtYmVyW10sXG4gICAgaXNPcGFxdWU/OiBib29sZWFuLFxuICAgIGNoaWxkcmVuPzogU2hhZGVyW10sXG4gICAgbG9jYWxNYXRyaXg/OiBJbnB1dE1hdHJpeCxcbiAgKTogU2hhZGVyO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudGggdW5pZm9ybSBmcm9tIHRoZSBlZmZlY3QuXG4gICAqIEBwYXJhbSBpbmRleFxuICAgKi9cbiAgZ2V0VW5pZm9ybShpbmRleDogbnVtYmVyKTogU2tTTFVuaWZvcm07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG51bWJlciBvZiB1bmlmb3JtcyBvbiB0aGUgZWZmZWN0LlxuICAgKi9cbiAgZ2V0VW5pZm9ybUNvdW50KCk6IG51bWJlcjtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdG90YWwgbnVtYmVyIG9mIGZsb2F0cyBhY3Jvc3MgYWxsIHVuaWZvcm1zIG9uIHRoZSBlZmZlY3QuIFRoaXMgaXMgdGhlIGxlbmd0aFxuICAgKiBvZiB0aGUgdW5pZm9ybXMgYXJyYXkgZXhwZWN0ZWQgYnkgbWFrZVNoYWRlci4gRm9yIGV4YW1wbGUsIGFuIGVmZmVjdCB3aXRoIGEgc2luZ2xlIGZsb2F0M1xuICAgKiB1bmlmb3JtLCB3b3VsZCByZXR1cm4gMSBmcm9tIGBnZXRVbmlmb3JtQ291bnQoKWAsIGJ1dCAzIGZyb20gYGdldFVuaWZvcm1GbG9hdENvdW50KClgLlxuICAgKi9cbiAgZ2V0VW5pZm9ybUZsb2F0Q291bnQoKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBuYW1lIG9mIHRoZSBudGggZWZmZWN0IHVuaWZvcm0uXG4gICAqIEBwYXJhbSBpbmRleFxuICAgKi9cbiAgZ2V0VW5pZm9ybU5hbWUoaW5kZXg6IG51bWJlcik6IHN0cmluZztcbn1cblxuLyoqXG4gKiBTZWUgU2tTaGFkZXIuaCBmb3IgbW9yZSBvbiB0aGlzIGNsYXNzLiBUaGUgb2JqZWN0cyBhcmUgb3BhcXVlLlxuICovXG5leHBvcnQgdHlwZSBTaGFkZXIgPSBFbWJpbmRPYmplY3Q8U2hhZGVyPjtcblxuZXhwb3J0IGludGVyZmFjZSBTdXJmYWNlIGV4dGVuZHMgRW1iaW5kT2JqZWN0PFN1cmZhY2U+IHtcbiAgLyoqXG4gICAqIENsZWFuIHVwIHRoZSBzdXJmYWNlIGFuZCBhbnkgZXh0cmEgbWVtb3J5LlxuICAgKiBbRGVwcmVjYXRlZF06IEluIHRoZSBmdXR1cmUsIGNhbGxzIHRvIGRlbGV0ZSgpIHdpbGwgYmUgc3VmZmljaWVudCB0byBjbGVhbiB1cCB0aGUgbWVtb3J5LlxuICAgKi9cbiAgZGlzcG9zZSgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBNYWtlIHN1cmUgYW55IHF1ZXVlZCBkcmF3cyBhcmUgc2VudCB0byB0aGUgc2NyZWVuIG9yIHRoZSBHUFUuXG4gICAqL1xuICBmbHVzaCgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXR1cm4gYSBjYW52YXMgdGhhdCBpcyBiYWNrZWQgYnkgdGhpcyBzdXJmYWNlLiBBbnkgZHJhd3MgdG8gdGhlIGNhbnZhcyB3aWxsIChldmVudHVhbGx5KVxuICAgKiBzaG93IHVwIG9uIHRoZSBzdXJmYWNlLiBUaGUgcmV0dXJuZWQgY2FudmFzIGlzIG93bmVkIGJ5IHRoZSBzdXJmYWNlIGFuZCBkb2VzIE5PVCBuZWVkIHRvXG4gICAqIGJlIGNsZWFuZWQgdXAgYnkgdGhlIGNsaWVudC5cbiAgICovXG4gIGdldENhbnZhcygpOiBDYW52YXM7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGhlaWdodCBvZiB0aGlzIHN1cmZhY2UgaW4gcGl4ZWxzLlxuICAgKi9cbiAgaGVpZ2h0KCk6IG51bWJlcjtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgSW1hZ2VJbmZvIGFzc29jaWF0ZWQgd2l0aCB0aGlzIHN1cmZhY2UuXG4gICAqL1xuICBpbWFnZUluZm8oKTogSW1hZ2VJbmZvO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIEltYWdlIGZyb20gdGhlIHByb3ZpZGVkIHRleHR1cmUgYW5kIGluZm8uIFRoZSBJbWFnZSB3aWxsIG93biB0aGUgdGV4dHVyZTtcbiAgICogd2hlbiB0aGUgaW1hZ2UgaXMgZGVsZXRlZCwgdGhlIHRleHR1cmUgd2lsbCBiZSBjbGVhbmVkIHVwLlxuICAgKiBAcGFyYW0gdGV4XG4gICAqIEBwYXJhbSBpbmZvIC0gZGVzY3JpYmVzIHRoZSBjb250ZW50IG9mIHRoZSB0ZXh0dXJlLlxuICAgKi9cbiAgbWFrZUltYWdlRnJvbVRleHR1cmUodGV4OiBhbnksIGluZm86IEltYWdlSW5mbyk6IEltYWdlIHwgbnVsbDtcblxuICAvKipcbiAgICogUmV0dXJucyBhIHRleHR1cmUtYmFja2VkIGltYWdlIGJhc2VkIG9uIHRoZSBjb250ZW50IGluIHNyYy4gSXQgdXNlcyBSR0JBXzg4ODgsIHVucHJlbXVsXG4gICAqIGFuZCBTUkdCIC0gZm9yIG1vcmUgY29udHJvbCwgdXNlIG1ha2VJbWFnZUZyb21UZXh0dXJlLlxuICAgKlxuICAgKiBOb3QgYXZhaWxhYmxlIGZvciBzb2Z0d2FyZS1iYWNrZWQgc3VyZmFjZXMuXG4gICAqIEBwYXJhbSBzcmNcbiAgICogQHBhcmFtIHdpZHRoIC0gSWYgcHJvdmlkZWQsIHdpbGwgYmUgdXNlZCBhcyB0aGUgd2lkdGggb2Ygc3JjLiBPdGhlcndpc2UsIHRoZSBuYXR1cmFsXG4gICAqICAgICAgICAgICAgICAgIHdpZHRoIG9mIHNyYyAoaWYgYXZhaWxhYmxlKSB3aWxsIGJlIHVzZWQuXG4gICAqIEBwYXJhbSBoZWlnaHQgLSBJZiBwcm92aWRlZCwgd2lsbCBiZSB1c2VkIGFzIHRoZSBoZWlnaHQgb2Ygc3JjLiBPdGhlcndpc2UsIHRoZSBuYXR1cmFsXG4gICAqICAgICAgICAgICAgICAgIGhlaWdodCBvZiBzcmMgKGlmIGF2YWlsYWJsZSkgd2lsbCBiZSB1c2VkLlxuICAgKi9cbiAgbWFrZUltYWdlRnJvbVRleHR1cmVTb3VyY2UoXG4gICAgc3JjOiBUZXh0dXJlU291cmNlLFxuICAgIHdpZHRoPzogbnVtYmVyLFxuICAgIGhlaWdodD86IG51bWJlcixcbiAgKTogSW1hZ2UgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGN1cnJlbnQgY29udGVudHMgb2YgdGhlIHN1cmZhY2UgYXMgYW4gSW1hZ2UuIFRoaXMgaW1hZ2Ugd2lsbCBiZSBvcHRpbWl6ZWQgdG8gYmVcbiAgICogZHJhd24gdG8gYW5vdGhlciBzdXJmYWNlIG9mIHRoZSBzYW1lIHR5cGUuIEZvciBleGFtcGxlLCBpZiB0aGlzIHN1cmZhY2UgaXMgYmFja2VkIGJ5IHRoZVxuICAgKiBHUFUsIHRoZSByZXR1cm5lZCBJbWFnZSB3aWxsIGJlIGJhY2tlZCBieSBhIEdQVSB0ZXh0dXJlLlxuICAgKi9cbiAgbWFrZUltYWdlU25hcHNob3QoYm91bmRzPzogSW5wdXRJUmVjdCk6IEltYWdlO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgY29tcGF0aWJsZSBTdXJmYWNlLCBoYXJpbmcgdGhlIHNhbWUgcmFzdGVyIG9yIEdQVSBwcm9wZXJ0aWVzIG9mIHRoZSBvcmlnaW5hbC5cbiAgICogVGhlIHBpeGVscyBhcmUgbm90IHNoYXJlZC5cbiAgICogQHBhcmFtIGluZm8gLSB3aWR0aCwgaGVpZ2h0LCBldGMgb2YgdGhlIFN1cmZhY2UuXG4gICAqL1xuICBtYWtlU3VyZmFjZShpbmZvOiBJbWFnZUluZm8pOiBTdXJmYWNlO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGlmIHRoaXMgU3VyZmFjZSBpcyBhIEdQVS1iYWNrZWQgc3VyZmFjZSBvciBub3QuXG4gICAqL1xuICByZXBvcnRCYWNrZW5kVHlwZUlzR1BVKCk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIElmIHRoaXMgc3VyZmFjZSBpcyBHUFUtYmFja2VkLCByZXR1cm4gdGhlIHNhbXBsZSBjb3VudCBvZiB0aGUgc3VyZmFjZS5cbiAgICovXG4gIHNhbXBsZUNudCgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHdpZHRoIG9mIHRoaXMgc3VyZmFjZSBpbiBwaXhlbHMuXG4gICAqL1xuICB3aWR0aCgpOiBudW1iZXI7XG59XG5cbi8qKlxuICogU2VlIFNrVGV4dEJsb2IuaCBmb3IgbW9yZSBvbiB0aGlzIGNsYXNzLiBUaGUgb2JqZWN0cyBhcmUgb3BhcXVlLlxuICovXG5leHBvcnQgdHlwZSBUZXh0QmxvYiA9IEVtYmluZE9iamVjdDxUZXh0QmxvYj47XG5cbi8qKlxuICogU2VlIFNrVHlwZWZhY2UuaCBmb3IgbW9yZSBvbiB0aGlzIGNsYXNzLiBUaGUgb2JqZWN0cyBhcmUgb3BhcXVlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFR5cGVmYWNlIGV4dGVuZHMgRW1iaW5kT2JqZWN0PFR5cGVmYWNlPiB7XG4gIC8qKlxuICAgKiBSZXRyaWV2ZXMgdGhlIGdseXBoIGlkcyBmb3IgZWFjaCBjb2RlIHBvaW50IGluIHRoZSBwcm92aWRlZCBzdHJpbmcuIE5vdGUgdGhhdCBnbHlwaCBJRHNcbiAgICogYXJlIHR5cGVmYWNlLWRlcGVuZGVudDsgZGlmZmVyZW50IGZhY2VzIG1heSBoYXZlIGRpZmZlcmVudCBpZHMgZm9yIHRoZSBzYW1lIGNvZGUgcG9pbnQuXG4gICAqIEBwYXJhbSBzdHJcbiAgICogQHBhcmFtIG51bUNvZGVQb2ludHMgLSB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIGluIHRoZSBzdHJpbmcuIERlZmF1bHRzIHRvIHN0ci5sZW5ndGguXG4gICAqIEBwYXJhbSBvdXRwdXQgLSBpZiBwcm92aWRlZCwgdGhlIHJlc3VsdHMgd2lsbCBiZSBjb3BpZWQgaW50byB0aGlzIGFycmF5LlxuICAgKi9cbiAgZ2V0R2x5cGhJRHMoXG4gICAgc3RyOiBzdHJpbmcsXG4gICAgbnVtQ29kZVBvaW50cz86IG51bWJlcixcbiAgICBvdXRwdXQ/OiBHbHlwaElEQXJyYXksXG4gICk6IEdseXBoSURBcnJheTtcbn1cblxuLyoqXG4gKiBTZWUgU2tWZXJ0aWNlcy5oIGZvciBtb3JlIG9uIHRoaXMgY2xhc3MuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVmVydGljZXMgZXh0ZW5kcyBFbWJpbmRPYmplY3Q8VmVydGljZXM+IHtcbiAgLyoqXG4gICAqIFJldHVybiB0aGUgYm91bmRpbmcgYXJlYSBmb3IgdGhlIHZlcnRpY2VzLlxuICAgKiBAcGFyYW0gb3V0cHV0QXJyYXkgLSBpZiBwcm92aWRlZCwgdGhlIGJvdW5kaW5nIGJveCB3aWxsIGJlIGNvcGllZCBpbnRvIHRoaXMgYXJyYXkgaW5zdGVhZCBvZlxuICAgKiAgICAgICAgICAgICAgICAgICAgICBhbGxvY2F0aW5nIGEgbmV3IG9uZS5cbiAgICovXG4gIGJvdW5kcyhvdXRwdXRBcnJheT86IFJlY3QpOiBSZWN0O1xuXG4gIC8qKlxuICAgKiBSZXR1cm4gYSB1bmlxdWUgSUQgZm9yIHRoaXMgdmVydGljZXMgb2JqZWN0LlxuICAgKi9cbiAgdW5pcXVlSUQoKTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNrb3R0aWVBbmltYXRpb24gZXh0ZW5kcyBFbWJpbmRPYmplY3Q8U2tvdHRpZUFuaW1hdGlvbj4ge1xuICAvKipcbiAgICogUmV0dXJucyB0aGUgYW5pbWF0aW9uIGR1cmF0aW9uIGluIHNlY29uZHMuXG4gICAqL1xuICBkdXJhdGlvbigpOiBudW1iZXI7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhbmltYXRpb24gZnJhbWUgcmF0ZSAoZnJhbWVzIC8gc2Vjb25kKS5cbiAgICovXG4gIGZwcygpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIERyYXdzIGN1cnJlbnQgYW5pbWF0aW9uIGZyYW1lLiBNdXN0IGNhbGwgc2VlayBvciBzZWVrRnJhbWUgZmlyc3QuXG4gICAqIEBwYXJhbSBjYW52YXNcbiAgICogQHBhcmFtIGRzdFJlY3RcbiAgICovXG4gIHJlbmRlcihjYW52YXM6IENhbnZhcywgZHN0UmVjdD86IElucHV0UmVjdCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFtkZXByZWNhdGVkXSAtIHVzZSBzZWVrRnJhbWVcbiAgICogQHBhcmFtIHQgLSB2YWx1ZSBmcm9tIFswLjAsIDEuMF07IDAgaXMgZmlyc3QgZnJhbWUsIDEgaXMgZmluYWwgZnJhbWUuXG4gICAqIEBwYXJhbSBkYW1hZ2VSZWN0IC0gd2lsbCBjb3B5IGRhbWFnZSBmcmFtZSBpbnRvIHRoaXMgaWYgcHJvdmlkZWQuXG4gICAqL1xuICBzZWVrKHQ6IG51bWJlciwgZGFtYWdlUmVjdD86IFJlY3QpOiBSZWN0O1xuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGFuaW1hdGlvbiBzdGF0ZSB0byBtYXRjaCB8dHwsIHNwZWNpZmllZCBhcyBhIGZyYW1lIGluZGV4XG4gICAqIGkuZS4gcmVsYXRpdmUgdG8gZHVyYXRpb24oKSAqIGZwcygpLlxuICAgKlxuICAgKiBSZXR1cm5zIHRoZSByZWN0YW5nbGUgdGhhdCB3YXMgYWZmZWN0ZWQgYnkgdGhpcyBhbmltYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSBmcmFtZSAtIEZyYWN0aW9uYWwgdmFsdWVzIGFyZSBhbGxvd2VkIGFuZCBtZWFuaW5nZnVsIC0gZS5nLlxuICAgKiAgICAgICAgICAgICAgICAwLjAgLT4gZmlyc3QgZnJhbWVcbiAgICogICAgICAgICAgICAgICAgMS4wIC0+IHNlY29uZCBmcmFtZVxuICAgKiAgICAgICAgICAgICAgICAwLjUgLT4gaGFsZndheSBiZXR3ZWVuIGZpcnN0IGFuZCBzZWNvbmQgZnJhbWVcbiAgICogQHBhcmFtIGRhbWFnZVJlY3QgLSB3aWxsIGNvcHkgZGFtYWdlIGZyYW1lIGludG8gdGhpcyBpZiBwcm92aWRlZC5cbiAgICovXG4gIHNlZWtGcmFtZShmcmFtZTogbnVtYmVyLCBkYW1hZ2VSZWN0PzogUmVjdCk6IFJlY3Q7XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgc2l6ZSBvZiB0aGlzIGFuaW1hdGlvbi5cbiAgICogQHBhcmFtIG91dHB1dFNpemUgLSBJZiBwcm92aWRlZCwgdGhlIHNpemUgd2lsbCBiZSBjb3BpZWQgaW50byBoZXJlIGFzIHdpZHRoLCBoZWlnaHQuXG4gICAqL1xuICBzaXplKG91dHB1dFNpemU/OiBQb2ludCk6IFBvaW50O1xuICB2ZXJzaW9uKCk6IHN0cmluZztcbn1cblxuLyoqXG4gKiBPcHRpb25zIHVzZWQgZm9yIFBhdGguc3Ryb2tlKCkuIElmIGFuIG9wdGlvbiBpcyBvbWl0dGVkLCBhIHNlbnNpYmxlIGRlZmF1bHQgd2lsbCBiZSB1c2VkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN0cm9rZU9wdHMge1xuICAvKiogVGhlIHdpZHRoIG9mIHRoZSBzdHJva2VkIGxpbmVzLiAqL1xuICB3aWR0aD86IG51bWJlcjtcbiAgbWl0ZXJfbGltaXQ/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBpZiA+IDEsIGluY3JlYXNlIHByZWNpc2lvbiwgZWxzZSBpZiAoMCA8IHJlc1NjYWxlIDwgMSkgcmVkdWNlIHByZWNpc2lvbiB0b1xuICAgKiBmYXZvciBzcGVlZCBhbmQgc2l6ZVxuICAgKi9cbiAgcHJlY2lzaW9uPzogbnVtYmVyO1xuICBqb2luPzogU3Ryb2tlSm9pbjtcbiAgY2FwPzogU3Ryb2tlQ2FwO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0cnV0U3R5bGUge1xuICBzdHJ1dEVuYWJsZWQ/OiBib29sZWFuO1xuICBmb250RmFtaWxpZXM/OiBzdHJpbmdbXTtcbiAgZm9udFN0eWxlPzogRm9udFN0eWxlO1xuICBmb250U2l6ZT86IG51bWJlcjtcbiAgaGVpZ2h0TXVsdGlwbGllcj86IG51bWJlcjtcbiAgaGFsZkxlYWRpbmc/OiBib29sZWFuO1xuICBsZWFkaW5nPzogbnVtYmVyO1xuICBmb3JjZVN0cnV0SGVpZ2h0PzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUZXh0Rm9udEZlYXR1cmVzIHtcbiAgbmFtZTogc3RyaW5nO1xuICB2YWx1ZTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRleHRTaGFkb3cge1xuICBjb2xvcj86IElucHV0Q29sb3I7XG4gIC8qKlxuICAgKiAyZCBhcnJheSBmb3IgeCBhbmQgeSBvZmZzZXQuIERlZmF1bHRzIHRvIFswLCAwXVxuICAgKi9cbiAgb2Zmc2V0PzogbnVtYmVyW107XG4gIGJsdXJSYWRpdXM/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dFN0eWxlIHtcbiAgYmFja2dyb3VuZENvbG9yPzogSW5wdXRDb2xvcjtcbiAgY29sb3I/OiBJbnB1dENvbG9yO1xuICBkZWNvcmF0aW9uPzogbnVtYmVyO1xuICBkZWNvcmF0aW9uQ29sb3I/OiBJbnB1dENvbG9yO1xuICBkZWNvcmF0aW9uVGhpY2tuZXNzPzogbnVtYmVyO1xuICBkZWNyYXRpb25TdHlsZT86IERlY29yYXRpb25TdHlsZTtcbiAgZm9udEZhbWlsaWVzPzogc3RyaW5nW107XG4gIGZvbnRGZWF0dXJlcz86IFRleHRGb250RmVhdHVyZXNbXTtcbiAgZm9udFNpemU/OiBudW1iZXI7XG4gIGZvbnRTdHlsZT86IEZvbnRTdHlsZTtcbiAgZm9yZWdyb3VuZENvbG9yPzogSW5wdXRDb2xvcjtcbiAgaGVpZ2h0TXVsdGlwbGllcj86IG51bWJlcjtcbiAgaGFsZkxlYWRpbmc/OiBib29sZWFuO1xuICBsZXR0ZXJTcGFjaW5nPzogbnVtYmVyO1xuICBsb2NhbGU/OiBzdHJpbmc7XG4gIHNoYWRvd3M/OiBUZXh0U2hhZG93W107XG4gIHRleHRCYXNlbGluZT86IFRleHRCYXNlbGluZTtcbiAgd29yZFNwYWNpbmc/OiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9uYWxDb2xvcnNJbnB1dCB7XG4gIGFtYmllbnQ6IElucHV0Q29sb3I7XG4gIHNwb3Q6IElucHV0Q29sb3I7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9uYWxDb2xvcnNPdXRwdXQge1xuICBhbWJpZW50OiBDb2xvcjtcbiAgc3BvdDogQ29sb3I7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHlwZWZhY2VGb250UHJvdmlkZXJcbiAgZXh0ZW5kcyBFbWJpbmRPYmplY3Q8VHlwZWZhY2VGb250UHJvdmlkZXI+IHtcbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBhIGdpdmVuIHR5cGVmYWNlIHdpdGggdGhlIGdpdmVuIGZhbWlseSBuYW1lIChpZ25vcmluZyB3aGF0ZXZlciBuYW1lIHRoZVxuICAgKiB0eXBmYWNlIGhhcyBmb3IgaXRzZWxmKS5cbiAgICogQHBhcmFtIGJ5dGVzIC0gdGhlIHJhdyBieXRlcyBmb3IgYSB0eXBlZmFjZS5cbiAgICogQHBhcmFtIGZhbWlseVxuICAgKi9cbiAgcmVnaXN0ZXJGb250KGJ5dGVzOiBBcnJheUJ1ZmZlciB8IFVpbnQ4QXJyYXksIGZhbWlseTogc3RyaW5nKTogdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVUmFuZ2Uge1xuICBzdGFydDogbnVtYmVyO1xuICBlbmQ6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBPcHRpb25zIGZvciBjb25maWd1cmluZyBhIFdlYkdMIGNvbnRleHQuIElmIGFuIG9wdGlvbiBpcyBvbWl0dGVkLCBhIHNlbnNpYmxlIGRlZmF1bHQgd2lsbFxuICogYmUgdXNlZC4gVGhlc2UgYXJlIGRlZmluZWQgYnkgdGhlIFdlYkdMIHN0YW5kYXJkcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBXZWJHTE9wdGlvbnMge1xuICBhbHBoYT86IG51bWJlcjtcbiAgYW50aWFsaWFzPzogbnVtYmVyO1xuICBkZXB0aD86IG51bWJlcjtcbiAgZW5hYmxlRXh0ZW5zaW9uc0J5RGVmYXVsdD86IG51bWJlcjtcbiAgZXhwbGljaXRTd2FwQ29udHJvbD86IG51bWJlcjtcbiAgZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdD86IG51bWJlcjtcbiAgbWFqb3JWZXJzaW9uPzogbnVtYmVyO1xuICBtaW5vclZlcnNpb24/OiBudW1iZXI7XG4gIHByZWZlckxvd1Bvd2VyVG9IaWdoUGVyZm9ybWFuY2U/OiBudW1iZXI7XG4gIHByZW11bHRpcGxpZWRBbHBoYT86IG51bWJlcjtcbiAgcHJlc2VydmVEcmF3aW5nQnVmZmVyPzogbnVtYmVyO1xuICByZW5kZXJWaWFPZmZzY3JlZW5CYWNrQnVmZmVyPzogbnVtYmVyO1xuICBzdGVuY2lsPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlZmF1bHRDb25zdHJ1Y3RvcjxUPiB7XG4gIG5ldyAoKTogVDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb2xvck1hdHJpeEhlbHBlcnMge1xuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBDb2xvck1hdHJpeCB0aGF0IGlzIHRoZSByZXN1bHQgb2YgbXVsdGlwbHlpbmcgb3V0ZXIqaW5uZXJcbiAgICogQHBhcmFtIG91dGVyXG4gICAqIEBwYXJhbSBpbm5lclxuICAgKi9cbiAgY29uY2F0KG91dGVyOiBDb2xvck1hdHJpeCwgaW5uZXI6IENvbG9yTWF0cml4KTogQ29sb3JNYXRyaXg7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gaWRlbnRpdHkgQ29sb3JNYXRyaXguXG4gICAqL1xuICBpZGVudGl0eSgpOiBDb2xvck1hdHJpeDtcblxuICAvKipcbiAgICogU2V0cyB0aGUgNCBcInNwZWNpYWxcIiBwYXJhbXMgdGhhdCB3aWxsIHRyYW5zbGF0ZSB0aGUgY29sb3JzIGFmdGVyIHRoZXkgYXJlIG11bHRpcGxpZWRcbiAgICogYnkgdGhlIDR4NCBtYXRyaXguXG4gICAqIEBwYXJhbSBtXG4gICAqIEBwYXJhbSBkciAtIGRlbHRhIHJlZFxuICAgKiBAcGFyYW0gZGcgLSBkZWx0YSBncmVlblxuICAgKiBAcGFyYW0gZGIgLSBkZWx0YSBibHVlXG4gICAqIEBwYXJhbSBkYSAtIGRlbHRhIGFscGhhXG4gICAqL1xuICBwb3N0VHJhbnNsYXRlKFxuICAgIG06IENvbG9yTWF0cml4LFxuICAgIGRyOiBudW1iZXIsXG4gICAgZGc6IG51bWJlcixcbiAgICBkYjogbnVtYmVyLFxuICAgIGRhOiBudW1iZXIsXG4gICk6IENvbG9yTWF0cml4O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IENvbG9yTWF0cml4IHRoYXQgaXMgcm90YXRlZCBhcm91bmQgYSBnaXZlbiBheGlzLlxuICAgKiBAcGFyYW0gYXhpcyAtIDAgZm9yIHJlZCwgMSBmb3IgZ3JlZW4sIDIgZm9yIGJsdWVcbiAgICogQHBhcmFtIHNpbmUgLSBzaW4oYW5nbGUpXG4gICAqIEBwYXJhbSBjb3NpbmUgLSBjb3MoYW5nbGUpXG4gICAqL1xuICByb3RhdGVkKGF4aXM6IG51bWJlciwgc2luZTogbnVtYmVyLCBjb3NpbmU6IG51bWJlcik6IENvbG9yTWF0cml4O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IENvbG9yTWF0cml4IHRoYXQgc2NhbGVzIHRoZSBjb2xvcnMgYXMgc3BlY2lmaWVkLlxuICAgKiBAcGFyYW0gcmVkU2NhbGVcbiAgICogQHBhcmFtIGdyZWVuU2NhbGVcbiAgICogQHBhcmFtIGJsdWVTY2FsZVxuICAgKiBAcGFyYW0gYWxwaGFTY2FsZVxuICAgKi9cbiAgc2NhbGVkKFxuICAgIHJlZFNjYWxlOiBudW1iZXIsXG4gICAgZ3JlZW5TY2FsZTogbnVtYmVyLFxuICAgIGJsdWVTY2FsZTogbnVtYmVyLFxuICAgIGFscGhhU2NhbGU6IG51bWJlcixcbiAgKTogQ29sb3JNYXRyaXg7XG59XG5cbi8qKlxuICogQSBjb25zdHJ1Y3RvciBmb3IgbWFraW5nIGFuIEltYWdlRGF0YSB0aGF0IGlzIGNvbXBhdGlibGUgd2l0aCB0aGUgQ2FudmFzMkQgZW11bGF0aW9uIGNvZGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW1hZ2VEYXRhQ29uc3RydWN0b3Ige1xuICBuZXcgKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogRW11bGF0ZWRJbWFnZURhdGE7XG4gIG5ldyAoXG4gICAgcGl4ZWxzOiBVaW50OENsYW1wZWRBcnJheSxcbiAgICB3aWR0aDogbnVtYmVyLFxuICAgIGhlaWdodDogbnVtYmVyLFxuICApOiBFbXVsYXRlZEltYWdlRGF0YTtcbn1cblxuLyoqXG4gKiBUT0RPKGtqbHViaWNrKSBNYWtlIHRoaXMgQVBJIHJldHVybiBGbG9hdDMyQXJyYXlzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWF0cml4M3gzSGVscGVycyB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IGlkZW50aXR5IDN4MyBtYXRyaXguXG4gICAqL1xuICBpZGVudGl0eSgpOiBudW1iZXJbXTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgZ2l2ZW4gM3gzIG1hdHJpeCBvciBudWxsIGlmIGl0IGlzIG5vdCBpbnZlcnRpYmxlLlxuICAgKiBAcGFyYW0gbVxuICAgKi9cbiAgaW52ZXJ0KG06IE1hdHJpeDN4MyB8IG51bWJlcltdKTogbnVtYmVyW10gfCBudWxsO1xuXG4gIC8qKlxuICAgKiBNYXBzIHRoZSBnaXZlbiAyZCBwb2ludHMgYWNjb3JkaW5nIHRvIHRoZSBnaXZlbiAzeDMgbWF0cml4LlxuICAgKiBAcGFyYW0gbVxuICAgKiBAcGFyYW0gcG9pbnRzIC0gdGhlIGZsYXR0ZW5lZCBwb2ludHMgdG8gbWFwOyB0aGUgcmVzdWx0cyBhcmUgY29tcHV0ZWQgaW4gcGxhY2Ugb24gdGhpcyBhcnJheS5cbiAgICovXG4gIG1hcFBvaW50cyhtOiBNYXRyaXgzeDMgfCBudW1iZXJbXSwgcG9pbnRzOiBudW1iZXJbXSk6IG51bWJlcltdO1xuXG4gIC8qKlxuICAgKiBNdWx0aXBsaWVzIHRoZSBwcm92aWRlZCAzeDMgbWF0cmljZXMgdG9nZXRoZXIgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgKiBAcGFyYW0gbWF0cmljZXNcbiAgICovXG4gIG11bHRpcGx5KC4uLm1hdHJpY2VzOiBBcnJheTwoTWF0cml4M3gzIHwgbnVtYmVyW10pPik6IG51bWJlcltdO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IDN4MyBtYXRyaXggcmVwcmVzZW50aW5nIGEgcm90YXRpb24gYnkgbiByYWRpYW5zLlxuICAgKiBAcGFyYW0gcmFkaWFuc1xuICAgKiBAcGFyYW0gcHggLSB0aGUgWCB2YWx1ZSB0byByb3RhdGUgYXJvdW5kLCBkZWZhdWx0cyB0byAwLlxuICAgKiBAcGFyYW0gcHkgLSB0aGUgWSB2YWx1ZSB0byByb3RhdGUgYXJvdW5kLCBkZWZhdWx0cyB0byAwLlxuICAgKi9cbiAgcm90YXRlZChyYWRpYW5zOiBBbmdsZUluUmFkaWFucywgcHg/OiBudW1iZXIsIHB5PzogbnVtYmVyKTogbnVtYmVyW107XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgM3gzIG1hdHJpeCByZXByZXNlbnRpbmcgYSBzY2FsZSBpbiB0aGUgeCBhbmQgeSBkaXJlY3Rpb25zLlxuICAgKiBAcGFyYW0gc3ggLSB0aGUgc2NhbGUgaW4gdGhlIFggZGlyZWN0aW9uLlxuICAgKiBAcGFyYW0gc3kgLSB0aGUgc2NhbGUgaW4gdGhlIFkgZGlyZWN0aW9uLlxuICAgKiBAcGFyYW0gcHggLSB0aGUgWCB2YWx1ZSB0byBzY2FsZSBmcm9tLCBkZWZhdWx0cyB0byAwLlxuICAgKiBAcGFyYW0gcHkgLSB0aGUgWSB2YWx1ZSB0byBzY2FsZSBmcm9tLCBkZWZhdWx0cyB0byAwLlxuICAgKi9cbiAgc2NhbGVkKHN4OiBudW1iZXIsIHN5OiBudW1iZXIsIHB4PzogbnVtYmVyLCBweT86IG51bWJlcik6IG51bWJlcltdO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IDN4MyBtYXRyaXggcmVwcmVzZW50aW5nIGEgc2NhbGUgaW4gdGhlIHggYW5kIHkgZGlyZWN0aW9ucy5cbiAgICogQHBhcmFtIGt4IC0gdGhlIGt1cnRvc2lzIGluIHRoZSBYIGRpcmVjdGlvbi5cbiAgICogQHBhcmFtIGt5IC0gdGhlIGt1cnRvc2lzIGluIHRoZSBZIGRpcmVjdGlvbi5cbiAgICogQHBhcmFtIHB4IC0gdGhlIFggdmFsdWUgdG8gc2tldyBmcm9tLCBkZWZhdWx0cyB0byAwLlxuICAgKiBAcGFyYW0gcHkgLSB0aGUgWSB2YWx1ZSB0byBza2V3IGZyb20sIGRlZmF1bHRzIHRvIDAuXG4gICAqL1xuICBza2V3ZWQoa3g6IG51bWJlciwga3k6IG51bWJlciwgcHg/OiBudW1iZXIsIHB5PzogbnVtYmVyKTogbnVtYmVyW107XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgM3gzIG1hdHJpeCByZXByZXNlbnRpbmcgYSB0cmFuc2xhdGlvbiBpbiB0aGUgeCBhbmQgeSBkaXJlY3Rpb25zLlxuICAgKiBAcGFyYW0gZHhcbiAgICogQHBhcmFtIGR5XG4gICAqL1xuICB0cmFuc2xhdGVkKGR4OiBudW1iZXIsIGR5OiBudW1iZXIpOiBudW1iZXJbXTtcbn1cblxuLyoqXG4gKiBTZWUgU2tNNDQuaCBmb3IgbW9yZSBkZXRhaWxzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1hdHJpeDR4NEhlbHBlcnMge1xuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyBpZGVudGl0eSA0eDQgbWF0cml4LlxuICAgKi9cbiAgaWRlbnRpdHkoKTogbnVtYmVyW107XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGdpdmVuIDR4NCBtYXRyaXggb3IgbnVsbCBpZiBpdCBpcyBub3QgaW52ZXJ0aWJsZS5cbiAgICogQHBhcmFtIG1hdHJpeFxuICAgKi9cbiAgaW52ZXJ0KG1hdHJpeDogTWF0cml4NHg0IHwgbnVtYmVyW10pOiBudW1iZXJbXSB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIG5ldyA0eDQgbWF0cml4IHJlcHJlc2VudGluZyBhIGNhbWVyYSBhdCBleWVWZWMsIHBvaW50ZWQgYXQgY2VudGVyVmVjLlxuICAgKiBAcGFyYW0gZXllVmVjXG4gICAqIEBwYXJhbSBjZW50ZXJWZWNcbiAgICogQHBhcmFtIHVwVmVjXG4gICAqL1xuICBsb29rYXQoZXllVmVjOiBWZWN0b3IzLCBjZW50ZXJWZWM6IFZlY3RvcjMsIHVwVmVjOiBWZWN0b3IzKTogbnVtYmVyW107XG5cbiAgLyoqXG4gICAqIE11bHRpcGxpZXMgdGhlIHByb3ZpZGVkIDR4NCBtYXRyaWNlcyB0b2dldGhlciBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAqIEBwYXJhbSBtYXRyaWNlc1xuICAgKi9cbiAgbXVsdGlwbHkoLi4ubWF0cmljZXM6IEFycmF5PChNYXRyaXg0eDQgfCBudW1iZXJbXSk+KTogbnVtYmVyW107XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGdpdmVuIDR4NCBtYXRyaXggb3IgdGhyb3dzIGlmIGl0IGlzIG5vdCBpbnZlcnRpYmxlLlxuICAgKiBAcGFyYW0gbWF0cml4XG4gICAqL1xuICBtdXN0SW52ZXJ0KG1hdHJpeDogTWF0cml4NHg0IHwgbnVtYmVyW10pOiBudW1iZXJbXTtcblxuICAvKipcbiAgICogUmV0dXJucyBhIG5ldyA0eDQgbWF0cml4IHJlcHJlc2VudGluZyBhIHBlcnNwZWN0aXZlLlxuICAgKiBAcGFyYW0gbmVhclxuICAgKiBAcGFyYW0gZmFyXG4gICAqIEBwYXJhbSByYWRpYW5zXG4gICAqL1xuICBwZXJzcGVjdGl2ZShuZWFyOiBudW1iZXIsIGZhcjogbnVtYmVyLCByYWRpYW5zOiBBbmdsZUluUmFkaWFucyk6IG51bWJlcltdO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBhdCB0aGUgc3BlY2lmaWVkIHJvdyBhbmQgY29sdW1uIG9mIHRoZSBnaXZlbiA0eDQgbWF0cml4LlxuICAgKiBAcGFyYW0gbWF0cml4XG4gICAqIEBwYXJhbSByb3dcbiAgICogQHBhcmFtIGNvbFxuICAgKi9cbiAgcmMobWF0cml4OiBNYXRyaXg0eDQgfCBudW1iZXJbXSwgcm93OiBudW1iZXIsIGNvbDogbnVtYmVyKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IDR4NCBtYXRyaXggcmVwcmVzZW50aW5nIGEgcm90YXRpb24gYXJvdW5kIHRoZSBwcm92aWRlZCB2ZWN0b3IuXG4gICAqIEBwYXJhbSBheGlzXG4gICAqIEBwYXJhbSByYWRpYW5zXG4gICAqL1xuICByb3RhdGVkKGF4aXM6IFZlY3RvcjMsIHJhZGlhbnM6IEFuZ2xlSW5SYWRpYW5zKTogbnVtYmVyW107XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgNHg0IG1hdHJpeCByZXByZXNlbnRpbmcgYSByb3RhdGlvbiBhcm91bmQgdGhlIHByb3ZpZGVkIHZlY3Rvci5cbiAgICogUm90YXRpb24gaXMgcHJvdmlkZWQgcmVkdW5kYW50bHkgYXMgYm90aCBzaW4gYW5kIGNvcyB2YWx1ZXMuXG4gICAqIFRoaXMgcm90YXRlIGNhbiBiZSB1c2VkIHdoZW4geW91IGFscmVhZHkgaGF2ZSB0aGUgY29zQW5nbGUgYW5kIHNpbkFuZ2xlIHZhbHVlc1xuICAgKiBzbyB5b3UgZG9uJ3QgaGF2ZSB0byBhdGFuKGNvcy9zaW4pIHRvIGNhbGwgcm9hdGF0ZWQoKSB3aGljaCBleHBlY3RzIGFuIGFuZ2xlIGluIHJhZGlhbnMuXG4gICAqIFRoaXMgZG9lcyBubyBjaGVja2luZyEgQmVoYXZpb3IgZm9yIGludmFsaWQgc2luIG9yIGNvcyB2YWx1ZXMgb3Igbm9uLW5vcm1hbGl6ZWQgYXhpcyB2ZWN0b3JzXG4gICAqIGlzIGluY29ycmVjdC4gUHJlZmVyIHJvdGF0ZWQoKS5cbiAgICogQHBhcmFtIGF4aXNcbiAgICogQHBhcmFtIHNpbkFuZ2xlXG4gICAqIEBwYXJhbSBjb3NBbmdsZVxuICAgKi9cbiAgcm90YXRlZFVuaXRTaW5Db3MoXG4gICAgYXhpczogVmVjdG9yMyxcbiAgICBzaW5BbmdsZTogbnVtYmVyLFxuICAgIGNvc0FuZ2xlOiBudW1iZXIsXG4gICk6IG51bWJlcltdO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IDR4NCBtYXRyaXggcmVwcmVzZW50aW5nIGEgc2NhbGUgYnkgdGhlIHByb3ZpZGVkIHZlY3Rvci5cbiAgICogQHBhcmFtIHZlY1xuICAgKi9cbiAgc2NhbGVkKHZlYzogVmVjdG9yMyk6IG51bWJlcltdO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IDR4NCBtYXRyaXggdGhhdCBzZXRzIHVwIGEgM0QgcGVyc3BlY3RpdmUgdmlldyBmcm9tIGEgZ2l2ZW4gY2FtZXJhLlxuICAgKiBAcGFyYW0gYXJlYSAtIGRlc2NyaWJlcyB0aGUgdmlld3BvcnQuICgwLCAwLCBjYW52YXNfd2lkdGgsIGNhbnZhc19oZWlnaHQpIHN1Z2dlc3RlZC5cbiAgICogQHBhcmFtIHpTY2FsZSAtIGRlc2NyaWJlcyB0aGUgc2NhbGUgb2YgdGhlIHogYXhpcy4gbWluKHdpZHRoLCBoZWlnaHQpLzIgc3VnZ2VzdGVkXG4gICAqIEBwYXJhbSBjYW1cbiAgICovXG4gIHNldHVwQ2FtZXJhKGFyZWE6IElucHV0UmVjdCwgelNjYWxlOiBudW1iZXIsIGNhbTogQ2FtZXJhKTogbnVtYmVyW107XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgNHg0IG1hdHJpeCByZXByZXNlbnRpbmcgYSB0cmFuc2xhdGlvbiBieSB0aGUgcHJvdmlkZWQgdmVjdG9yLlxuICAgKiBAcGFyYW0gdmVjXG4gICAqL1xuICB0cmFuc2xhdGVkKHZlYzogVmVjdG9yMyk6IG51bWJlcltdO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbmV3IDR4NCBtYXRyaXggdGhhdCBpcyB0aGUgdHJhbnNwb3NlIG9mIHRoaXMgNHg0IG1hdHJpeC5cbiAgICogQHBhcmFtIG1hdHJpeFxuICAgKi9cbiAgdHJhbnNwb3NlKG1hdHJpeDogTWF0cml4NHg0IHwgbnVtYmVyW10pOiBudW1iZXJbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXJhZ3JhcGhCdWlsZGVyRmFjdG9yeSB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgUGFyYWdyYXBoQnVpbGRlciB1c2luZyB0aGUgZm9udHMgYXZhaWxhYmxlIGZyb20gdGhlIGdpdmVuIGZvbnQgbWFuYWdlci5cbiAgICogQHBhcmFtIHN0eWxlXG4gICAqIEBwYXJhbSBmb250TWFuYWdlclxuICAgKi9cbiAgTWFrZShzdHlsZTogUGFyYWdyYXBoU3R5bGUsIGZvbnRNYW5hZ2VyOiBGb250TWdyKTogUGFyYWdyYXBoQnVpbGRlcjtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIFBhcmFncmFwaEJ1aWxkZXIgdXNpbmcgdGhlIGZvbnRzIGF2YWlsYWJsZSBmcm9tIHRoZSBnaXZlbiBmb250IHByb3ZpZGVyLlxuICAgKiBAcGFyYW0gc3R5bGVcbiAgICogQHBhcmFtIGZvbnRTcmNcbiAgICovXG4gIE1ha2VGcm9tRm9udFByb3ZpZGVyKFxuICAgIHN0eWxlOiBQYXJhZ3JhcGhTdHlsZSxcbiAgICBmb250U3JjOiBUeXBlZmFjZUZvbnRQcm92aWRlcixcbiAgKTogUGFyYWdyYXBoQnVpbGRlcjtcblxuICAvKipcbiAgICogUmV0dXJuIGEgc2hhcGVkIGFycmF5IG9mIGxpbmVzXG4gICAqL1xuICBTaGFwZVRleHQodGV4dDogc3RyaW5nLCBydW5zOiBGb250QmxvY2tbXSwgd2lkdGg/OiBudW1iZXIpOiBTaGFwZWRMaW5lW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFyYWdyYXBoU3R5bGVDb25zdHJ1Y3RvciB7XG4gIC8qKlxuICAgKiBGaWxscyBvdXQgYWxsIG9wdGlvbmFsIGZpZWxkcyB3aXRoIGRlZmF1bHRzLiBUaGUgZW1zY3JpcHRlbiBiaW5kaW5ncyBjb21wbGFpbiBpZiB0aGVyZVxuICAgKiBpcyBhIGZpZWxkIHVuZGVmaW5lZCBhbmQgaXQgd2FzIGV4cGVjdGluZyBhIGZsb2F0IChmb3IgZXhhbXBsZSkuXG4gICAqIEBwYXJhbSBwc1xuICAgKi9cbiAgbmV3IChwczogUGFyYWdyYXBoU3R5bGUpOiBQYXJhZ3JhcGhTdHlsZTtcbn1cblxuLyoqXG4gKiBTZWUgU2tDb2xvckZpbHRlci5oIGZvciBtb3JlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbG9yRmlsdGVyRmFjdG9yeSB7XG4gIC8qKlxuICAgKiBNYWtlcyBhIGNvbG9yIGZpbHRlciB3aXRoIHRoZSBnaXZlbiBjb2xvciBhbmQgYmxlbmQgbW9kZS5cbiAgICogQHBhcmFtIGNvbG9yXG4gICAqIEBwYXJhbSBtb2RlXG4gICAqL1xuICBNYWtlQmxlbmQoY29sb3I6IElucHV0Q29sb3IsIG1vZGU6IEJsZW5kTW9kZSk6IENvbG9yRmlsdGVyO1xuXG4gIC8qKlxuICAgKiBNYWtlcyBhIGNvbG9yIGZpbHRlciBjb21wb3NpbmcgdHdvIGNvbG9yIGZpbHRlcnMuXG4gICAqIEBwYXJhbSBvdXRlclxuICAgKiBAcGFyYW0gaW5uZXJcbiAgICovXG4gIE1ha2VDb21wb3NlKG91dGVyOiBDb2xvckZpbHRlciwgaW5uZXI6IENvbG9yRmlsdGVyKTogQ29sb3JGaWx0ZXI7XG5cbiAgLyoqXG4gICAqIE1ha2VzIGEgY29sb3IgZmlsdGVyIHRoYXQgaXMgbGluZWFybHkgaW50ZXJwb2xhdGVkIGJldHdlZW4gdHdvIG90aGVyIGNvbG9yIGZpbHRlcnMuXG4gICAqIEBwYXJhbSB0IC0gYSBmbG9hdCBpbiB0aGUgcmFuZ2Ugb2YgMC4wIHRvIDEuMC5cbiAgICogQHBhcmFtIGRzdFxuICAgKiBAcGFyYW0gc3JjXG4gICAqL1xuICBNYWtlTGVycCh0OiBudW1iZXIsIGRzdDogQ29sb3JGaWx0ZXIsIHNyYzogQ29sb3JGaWx0ZXIpOiBDb2xvckZpbHRlcjtcblxuICAvKipcbiAgICogTWFrZXMgYSBjb2xvciBmaWx0ZXIgdGhhdCBjb252ZXJ0cyBiZXR3ZWVuIGxpbmVhciBjb2xvcnMgYW5kIHNSR0IgY29sb3JzLlxuICAgKi9cbiAgTWFrZUxpbmVhclRvU1JHQkdhbW1hKCk6IENvbG9yRmlsdGVyO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgY29sb3IgZmlsdGVyIHVzaW5nIHRoZSBwcm92aWRlZCBjb2xvciBtYXRyaXguXG4gICAqIEBwYXJhbSBjTWF0cml4XG4gICAqL1xuICBNYWtlTWF0cml4KGNNYXRyaXg6IElucHV0Q29sb3JNYXRyaXgpOiBDb2xvckZpbHRlcjtcblxuICAvKipcbiAgICogTWFrZXMgYSBjb2xvciBmaWx0ZXIgdGhhdCBjb252ZXJ0cyBiZXR3ZWVuIHNSR0IgY29sb3JzIGFuZCBsaW5lYXIgY29sb3JzLlxuICAgKi9cbiAgTWFrZVNSR0JUb0xpbmVhckdhbW1hKCk6IENvbG9yRmlsdGVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbnRvdXJNZWFzdXJlSXRlckNvbnN0cnVjdG9yIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gQ29udG91ck1lYXN1cmVJdGVyIHdpdGggdGhlIGdpdmVuIHBhdGguXG4gICAqIEBwYXJhbSBwYXRoXG4gICAqIEBwYXJhbSBmb3JjZUNsb3NlZCAtIGlmIHBhdGggc2hvdWxkIGJlIGZvcmNlZCBjbG9zZSBiZWZvcmUgbWVhc3VyaW5nIGl0LlxuICAgKiBAcGFyYW0gcmVzU2NhbGUgLSBjb250cm9scyB0aGUgcHJlY2lzaW9uIG9mIHRoZSBtZWFzdXJlLiB2YWx1ZXMgPiAxIGluY3JlYXNlIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICBwcmVjaXNpb24gKGFuZCBwb3NzaWJseSBzbG93IGRvd24gdGhlIGNvbXB1dGF0aW9uKS5cbiAgICovXG4gIG5ldyAocGF0aDogUGF0aCwgZm9yY2VDbG9zZWQ6IGJvb2xlYW4sIHJlc1NjYWxlOiBudW1iZXIpOiBDb250b3VyTWVhc3VyZUl0ZXI7XG59XG5cbi8qKlxuICogU2VlIFNrRm9udC5oIGZvciBtb3JlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEZvbnRDb25zdHJ1Y3RvciBleHRlbmRzIERlZmF1bHRDb25zdHJ1Y3RvcjxGb250PiB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIEZvbnQgd2l0aCBkZWZhdWx0IHZhbHVlcyB3aXRoIFR5cGVmYWNlLlxuICAgKiBAcGFyYW0gZmFjZVxuICAgKiBAcGFyYW0gc2l6ZSAtIGZvbnQgc2l6ZSBpbiBwb2ludHMuIElmIG5vdCBzcGVjaWZpZWQsIHVzZXMgYSBkZWZhdWx0IHZhbHVlLlxuICAgKi9cbiAgbmV3IChmYWNlOiBUeXBlZmFjZSB8IG51bGwsIHNpemU/OiBudW1iZXIpOiBGb250O1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIEZvbnQgd2l0aCBkZWZhdWx0IHZhbHVlcyB3aXRoIFR5cGVmYWNlIGFuZCBzaXplIGluIHBvaW50cyxcbiAgICogaG9yaXpvbnRhbCBzY2FsZSwgYW5kIGhvcml6b250YWwgc2tldy4gSG9yaXpvbnRhbCBzY2FsZSBlbXVsYXRlcyBjb25kZW5zZWRcbiAgICogYW5kIGV4cGFuZGVkIGZvbnRzLiBIb3Jpem9udGFsIHNrZXcgZW11bGF0ZXMgb2JsaXF1ZSBmb250cy5cbiAgICogQHBhcmFtIGZhY2VcbiAgICogQHBhcmFtIHNpemVcbiAgICogQHBhcmFtIHNjYWxlWFxuICAgKiBAcGFyYW0gc2tld1hcbiAgICovXG4gIG5ldyAoXG4gICAgZmFjZTogVHlwZWZhY2UgfCBudWxsLFxuICAgIHNpemU6IG51bWJlcixcbiAgICBzY2FsZVg6IG51bWJlcixcbiAgICBza2V3WDogbnVtYmVyLFxuICApOiBGb250O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZvbnRNZ3JGYWN0b3J5IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBGb250TWdyIHdpdGggdGhlIGNyZWF0ZWQgZm9udCBkYXRhLiBSZXR1cm5zIG51bGwgaWYgYnVmZmVycyB3YXMgZW1wdHkuXG4gICAqIEBwYXJhbSBidWZmZXJzXG4gICAqL1xuICBGcm9tRGF0YSguLi5idWZmZXJzOiBBcnJheUJ1ZmZlcltdKTogRm9udE1nciB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgZGVmYXVsdCBGb250TWdyLiBUaGlzIHdpbGwgZ2VuZXJhbGx5IGhhdmUgMCBvciAxIGZvbnRzIGluIGl0LCBkZXBlbmRpbmcgb24gaWZcbiAgICogdGhlIGRlbW8gbW9ub3NwYWNlIGZvbnQgd2FzIGNvbXBpbGVkIGluLlxuICAgKi9cbiAgUmVmRGVmYXVsdCgpOiBGb250TWdyO1xufVxuXG4vKipcbiAqIFNlZSBlZmZlY3RzL0ltYWdlRmlsdGVycy5oIGZvciBtb3JlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEltYWdlRmlsdGVyRmFjdG9yeSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBmaWx0ZXIgdGhhdCBibHVycyBpdHMgaW5wdXQgYnkgdGhlIHNlcGFyYXRlIFggYW5kIFkgc2lnbWFzLiBUaGUgcHJvdmlkZWQgdGlsZSBtb2RlXG4gICAqIGlzIHVzZWQgd2hlbiB0aGUgYmx1ciBrZXJuZWwgZ29lcyBvdXRzaWRlIHRoZSBpbnB1dCBpbWFnZS5cbiAgICpcbiAgICogQHBhcmFtIHNpZ21hWCAtIFRoZSBHYXVzc2lhbiBzaWdtYSB2YWx1ZSBmb3IgYmx1cnJpbmcgYWxvbmcgdGhlIFggYXhpcy5cbiAgICogQHBhcmFtIHNpZ21hWSAtIFRoZSBHYXVzc2lhbiBzaWdtYSB2YWx1ZSBmb3IgYmx1cnJpbmcgYWxvbmcgdGhlIFkgYXhpcy5cbiAgICogQHBhcmFtIG1vZGVcbiAgICogQHBhcmFtIGlucHV0IC0gaWYgbnVsbCwgaXQgd2lsbCB1c2UgdGhlIGR5bmFtaWMgc291cmNlIGltYWdlIChlLmcuIGEgc2F2ZWQgbGF5ZXIpXG4gICAqL1xuICBNYWtlQmx1cihcbiAgICBzaWdtYVg6IG51bWJlcixcbiAgICBzaWdtYVk6IG51bWJlcixcbiAgICBtb2RlOiBUaWxlTW9kZSxcbiAgICBpbnB1dDogSW1hZ2VGaWx0ZXIgfCBudWxsLFxuICApOiBJbWFnZUZpbHRlcjtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgZmlsdGVyIHRoYXQgYXBwbGllcyB0aGUgY29sb3IgZmlsdGVyIHRvIHRoZSBpbnB1dCBmaWx0ZXIgcmVzdWx0cy5cbiAgICogQHBhcmFtIGNmXG4gICAqIEBwYXJhbSBpbnB1dCAtIGlmIG51bGwsIGl0IHdpbGwgdXNlIHRoZSBkeW5hbWljIHNvdXJjZSBpbWFnZSAoZS5nLiBhIHNhdmVkIGxheWVyKVxuICAgKi9cbiAgTWFrZUNvbG9yRmlsdGVyKGNmOiBDb2xvckZpbHRlciwgaW5wdXQ6IEltYWdlRmlsdGVyIHwgbnVsbCk6IEltYWdlRmlsdGVyO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBmaWx0ZXIgdGhhdCBjb21wb3NlcyAnaW5uZXInIHdpdGggJ291dGVyJywgc3VjaCB0aGF0IHRoZSByZXN1bHRzIG9mICdpbm5lcicgYXJlXG4gICAqIHRyZWF0ZWQgYXMgdGhlIHNvdXJjZSBiaXRtYXAgcGFzc2VkIHRvICdvdXRlcicuXG4gICAqIElmIGVpdGhlciBwYXJhbSBpcyBudWxsLCB0aGUgb3RoZXIgcGFyYW0gd2lsbCBiZSByZXR1cm5lZC5cbiAgICogQHBhcmFtIG91dGVyXG4gICAqIEBwYXJhbSBpbm5lciAtIGlmIG51bGwsIGl0IHdpbGwgdXNlIHRoZSBkeW5hbWljIHNvdXJjZSBpbWFnZSAoZS5nLiBhIHNhdmVkIGxheWVyKVxuICAgKi9cbiAgTWFrZUNvbXBvc2UoXG4gICAgb3V0ZXI6IEltYWdlRmlsdGVyIHwgbnVsbCxcbiAgICBpbm5lcjogSW1hZ2VGaWx0ZXIgfCBudWxsLFxuICApOiBJbWFnZUZpbHRlcjtcblxuICAvKipcbiAgICogQ3JlYXRlIGEgZmlsdGVyIHRoYXQgdHJhbnNmb3JtcyB0aGUgaW5wdXQgaW1hZ2UgYnkgJ21hdHJpeCcuIFRoaXMgbWF0cml4IHRyYW5zZm9ybXMgdGhlXG4gICAqIGxvY2FsIHNwYWNlLCB3aGljaCBtZWFucyBpdCBlZmZlY3RpdmVseSBoYXBwZW5zIHByaW9yIHRvIGFueSB0cmFuc2Zvcm1hdGlvbiBjb21pbmcgZnJvbSB0aGVcbiAgICogQ2FudmFzIGluaXRpYXRpbmcgdGhlIGZpbHRlcmluZy5cbiAgICogQHBhcmFtIG1hdHJcbiAgICogQHBhcmFtIHNhbXBsaW5nXG4gICAqIEBwYXJhbSBpbnB1dCAtIGlmIG51bGwsIGl0IHdpbGwgdXNlIHRoZSBkeW5hbWljIHNvdXJjZSBpbWFnZSAoZS5nLiBhIHNhdmVkIGxheWVyKVxuICAgKi9cbiAgTWFrZU1hdHJpeFRyYW5zZm9ybShcbiAgICBtYXRyOiBJbnB1dE1hdHJpeCxcbiAgICBzYW1wbGluZzogRmlsdGVyT3B0aW9ucyB8IEN1YmljUmVzYW1wbGVyLFxuICAgIGlucHV0OiBJbWFnZUZpbHRlciB8IG51bGwsXG4gICk6IEltYWdlRmlsdGVyO1xufVxuXG4vKipcbiAqIFNlZSBTa01hc2tGaWx0ZXIuaCBmb3IgbW9yZSBkZXRhaWxzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1hc2tGaWx0ZXJGYWN0b3J5IHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIGJsdXIgbWFza2ZpbHRlclxuICAgKiBAcGFyYW0gc3R5bGVcbiAgICogQHBhcmFtIHNpZ21hIC0gU3RhbmRhcmQgZGV2aWF0aW9uIG9mIHRoZSBHYXVzc2lhbiBibHVyIHRvIGFwcGx5LiBNdXN0IGJlID4gMC5cbiAgICogQHBhcmFtIHJlc3BlY3RDVE0gLSBpZiB0cnVlIHRoZSBibHVyJ3Mgc2lnbWEgaXMgbW9kaWZpZWQgYnkgdGhlIENUTS5cbiAgICovXG4gIE1ha2VCbHVyKHN0eWxlOiBCbHVyU3R5bGUsIHNpZ21hOiBudW1iZXIsIHJlc3BlY3RDVE06IGJvb2xlYW4pOiBNYXNrRmlsdGVyO1xufVxuXG4vKipcbiAqIENvbnRhaW5zIHRoZSB3YXlzIHRvIGNyZWF0ZSBhbiBQYXRoLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBhdGhDb25zdHJ1Y3RvckFuZEZhY3RvcnkgZXh0ZW5kcyBEZWZhdWx0Q29uc3RydWN0b3I8UGF0aD4ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBwYXRoIGZyb20gdGhlIGdpdmVuIGxpc3Qgb2YgcGF0aCBjb21tYW5kcy4gSWYgdGhpcyBmYWlscywgbnVsbCB3aWxsIGJlXG4gICAqIHJldHVybmVkIGluc3RlYWQuXG4gICAqIEBwYXJhbSBjbWRzXG4gICAqL1xuICBNYWtlRnJvbUNtZHMoY21kczogSW5wdXRDb21tYW5kcyk6IFBhdGggfCBudWxsO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IHBhdGggYnkgY29tYmluaW5nIHRoZSBnaXZlbiBwYXRocyBhY2NvcmRpbmcgdG8gb3AuIElmIHRoaXMgZmFpbHMsIG51bGwgd2lsbFxuICAgKiBiZSByZXR1cm5lZCBpbnN0ZWFkLlxuICAgKiBAcGFyYW0gb25lXG4gICAqIEBwYXJhbSB0d29cbiAgICogQHBhcmFtIG9wXG4gICAqL1xuICBNYWtlRnJvbU9wKG9uZTogUGF0aCwgdHdvOiBQYXRoLCBvcDogUGF0aE9wKTogUGF0aCB8IG51bGw7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgcGF0aCBmcm9tIHRoZSBwcm92aWRlZCBTVkcgc3RyaW5nLiBJZiB0aGlzIGZhaWxzLCBudWxsIHdpbGwgYmVcbiAgICogcmV0dXJuZWQgaW5zdGVhZC5cbiAgICogQHBhcmFtIHN0clxuICAgKi9cbiAgTWFrZUZyb21TVkdTdHJpbmcoc3RyOiBzdHJpbmcpOiBQYXRoIHwgbnVsbDtcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBwYXRoIHVzaW5nIHRoZSBwcm92aWRlZCB2ZXJicyBhbmQgYXNzb2NpYXRlZCBwb2ludHMgYW5kIHdlaWdodHMuIFRoZSBwcm9jZXNzXG4gICAqIHJlYWRzIHRoZSBmaXJzdCB2ZXJiIGZyb20gdmVyYnMgYW5kIHRoZW4gdGhlIGFwcHJvcHJpYXRlIG51bWJlciBvZiBwb2ludHMgZnJvbSB0aGVcbiAgICogRmxhdHRlbmVkUG9pbnRBcnJheSAoZS5nLiAyIHBvaW50cyBmb3IgbW92ZVRvLCA0IHBvaW50cyBmb3IgcXVhZFRvLCBldGMpLiBJZiB0aGUgdmVyYiBpc1xuICAgKiBhIGNvbmljLCBhIHdlaWdodCB3aWxsIGJlIHJlYWQgZnJvbSB0aGUgV2VpZ2h0TGlzdC5cbiAgICogSWYgdGhlIGRhdGEgaXMgbWFsZm9ybWVkIChlLmcuIG5vdCBlbm91Z2ggcG9pbnRzKSwgdGhlIHJlc3VsdGluZyBwYXRoIHdpbGwgYmUgaW5jb21wbGV0ZS5cbiAgICogQHBhcmFtIHZlcmJzIC0gdGhlIHZlcmJzIHRoYXQgY3JlYXRlIHRoaXMgcGF0aCwgaW4gdGhlIG9yZGVyIG9mIGJlaW5nIGRyYXduLlxuICAgKiBAcGFyYW0gcG9pbnRzIC0gcmVwcmVzZW50cyBuIHBvaW50cyB3aXRoIDJuIGZsb2F0cy5cbiAgICogQHBhcmFtIHdlaWdodHMgLSB1c2VkIGlmIGFueSBvZiB0aGUgdmVyYnMgYXJlIGNvbmljcywgY2FuIGJlIG9taXR0ZWQgb3RoZXJ3aXNlLlxuICAgKi9cbiAgTWFrZUZyb21WZXJic1BvaW50c1dlaWdodHMoXG4gICAgdmVyYnM6IFZlcmJMaXN0LFxuICAgIHBvaW50czogSW5wdXRGbGF0dGVuZWRQb2ludEFycmF5LFxuICAgIHdlaWdodHM/OiBXZWlnaHRMaXN0LFxuICApOiBQYXRoO1xufVxuXG4vKipcbiAqIFNlZSBTa1BhdGhFZmZlY3QuaCBmb3IgbW9yZSBkZXRhaWxzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBhdGhFZmZlY3RGYWN0b3J5IHtcbiAgLyoqXG4gICAqIFJldHVybnMgYSBQYXRoRWZmZWN0IHRoYXQgY2FuIHR1cm4gc2hhcnAgY29ybmVycyBpbnRvIHJvdW5kZWQgY29ybmVycy5cbiAgICogQHBhcmFtIHJhZGl1cyAtIGlmIDw9MCwgcmV0dXJucyBudWxsXG4gICAqL1xuICBNYWtlQ29ybmVyKHJhZGl1czogbnVtYmVyKTogUGF0aEVmZmVjdCB8IG51bGw7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBQYXRoRWZmZWN0IHRoYXQgYWRkIGRhc2hlcyB0byB0aGUgcGF0aC5cbiAgICpcbiAgICogU2VlIFNrRGFzaFBhdGhFZmZlY3QuaCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKlxuICAgKiBAcGFyYW0gaW50ZXJ2YWxzIC0gZXZlbiBudW1iZXIgb2YgZW50cmllcyB3aXRoIGV2ZW4gaW5kaWNpZXMgc3BlY2lmeWluZyB0aGUgbGVuZ3RoIG9mXG4gICAqICAgICAgICAgICAgICAgICAgICB0aGUgXCJvblwiIGludGVydmFscywgYW5kIHRoZSBvZGQgaW5kaWNlcyBzcGVjaWZ5aW5nIHRoZSBsZW5ndGggb2YgXCJvZmZcIi5cbiAgICogQHBhcmFtIHBoYXNlIC0gb2Zmc2V0IGxlbmd0aCBpbnRvIHRoZSBpbnRlcnZhbHMgYXJyYXkuIERlZmF1bHRzIHRvIDAuXG4gICAqL1xuICBNYWtlRGFzaChpbnRlcnZhbHM6IG51bWJlcltdLCBwaGFzZT86IG51bWJlcik6IFBhdGhFZmZlY3Q7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBQYXRoRWZmZWN0IHRoYXQgYnJlYWtzIHBhdGggaW50byBzZWdtZW50cyBvZiBzZWdMZW5ndGggbGVuZ3RoLCBhbmQgcmFuZG9tbHkgbW92ZVxuICAgKiB0aGUgZW5kcG9pbnRzIGF3YXkgZnJvbSB0aGUgb3JpZ2luYWwgcGF0aCBieSBhIG1heGltdW0gb2YgZGV2aWF0aW9uLlxuICAgKiBAcGFyYW0gc2VnTGVuZ3RoIC0gbGVuZ3RoIG9mIHRoZSBzdWJzZWdtZW50cy5cbiAgICogQHBhcmFtIGRldiAtIGxpbWl0IG9mIHRoZSBtb3ZlbWVudCBvZiB0aGUgZW5kcG9pbnRzLlxuICAgKiBAcGFyYW0gc2VlZEFzc2lzdCAtIG1vZGlmaWVzIHRoZSByYW5kb21uZXNzLiBTZWUgU2tEaXNjcmV0ZVBhdGhFZmZlY3QuaCBmb3IgbW9yZS5cbiAgICovXG4gIE1ha2VEaXNjcmV0ZShzZWdMZW5ndGg6IG51bWJlciwgZGV2OiBudW1iZXIsIHNlZWRBc3Npc3Q6IG51bWJlcik6IFBhdGhFZmZlY3Q7XG59XG5cbi8qKlxuICogU2VlIFJ1bnRpbWVFZmZlY3QuaCBmb3IgbW9yZSBkZXRhaWxzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJ1bnRpbWVFZmZlY3RGYWN0b3J5IHtcbiAgLyoqXG4gICAqIENvbXBpbGVzIGEgUnVudGltZUVmZmVjdCBmcm9tIHRoZSBnaXZlbiBzaGFkZXIgY29kZS5cbiAgICogQHBhcmFtIHNrc2wgLSBTb3VyY2UgY29kZSBmb3IgYSBzaGFkZXIgd3JpdHRlbiBpbiBTa1NMXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIHdpbGwgYmUgY2FsbGVkIHdpdGggYW55IGNvbXBpbGF0aW9uIGVycm9yLiBJZiBub3QgcHJvdmlkZWQsIGVycm9ycyB3aWxsXG4gICAqICAgICAgICAgICAgICAgICAgIGJlIHByaW50ZWQgdG8gY29uc29sZS5sb2coKS5cbiAgICovXG4gIE1ha2Uoc2tzbDogc3RyaW5nLCBjYWxsYmFjaz86IChlcnI6IHN0cmluZykgPT4gdm9pZCk6IFJ1bnRpbWVFZmZlY3QgfCBudWxsO1xufVxuXG4vKipcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgU2tTaGFkZXJzLmguXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU2hhZGVyRmFjdG9yeSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc2hhZGVyIHRoYXQgY29tYmluZXMgdGhlIGdpdmVuIHNoYWRlcnMgd2l0aCBhIEJsZW5kTW9kZS5cbiAgICogQHBhcmFtIG1vZGVcbiAgICogQHBhcmFtIG9uZVxuICAgKiBAcGFyYW0gdHdvXG4gICAqL1xuICBNYWtlQmxlbmQobW9kZTogQmxlbmRNb2RlLCBvbmU6IFNoYWRlciwgdHdvOiBTaGFkZXIpOiBTaGFkZXI7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzaGFkZXIgd2l0aCBhIGdpdmVuIGNvbG9yIGFuZCBjb2xvcnNwYWNlLlxuICAgKiBAcGFyYW0gY29sb3JcbiAgICogQHBhcmFtIHNwYWNlXG4gICAqL1xuICBNYWtlQ29sb3IoY29sb3I6IElucHV0Q29sb3IsIHNwYWNlOiBDb2xvclNwYWNlKTogU2hhZGVyO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc2hhZGVyIHdpdGggUGVybGluIEZyYWN0YWwgTm9pc2UuXG4gICAqIFNlZSBTa1Blcmxpbk5vaXNlU2hhZGVyLmggZm9yIG1vcmUgZGV0YWlsc1xuICAgKiBAcGFyYW0gYmFzZUZyZXFYIC0gYmFzZSBmcmVxdWVuY3kgaW4gdGhlIFggZGlyZWN0aW9uOyByYW5nZSBbMC4wLCAxLjBdXG4gICAqIEBwYXJhbSBiYXNlRnJlcVkgLSBiYXNlIGZyZXF1ZW5jeSBpbiB0aGUgWSBkaXJlY3Rpb247IHJhbmdlIFswLjAsIDEuMF1cbiAgICogQHBhcmFtIG9jdGF2ZXNcbiAgICogQHBhcmFtIHNlZWRcbiAgICogQHBhcmFtIHRpbGVXIC0gaWYgdGhpcyBhbmQgdGlsZUggYXJlIG5vbi16ZXJvLCB0aGUgZnJlcXVlbmNpZXMgd2lsbCBiZSBtb2RpZmllZCBzbyB0aGF0IHRoZVxuICAgKiAgICAgICAgICAgICAgICBub2lzZSB3aWxsIGJlIHRpbGVhYmxlIGZvciB0aGUgZ2l2ZW4gc2l6ZS5cbiAgICogQHBhcmFtIHRpbGVIIC0gaWYgdGhpcyBhbmQgdGlsZVcgYXJlIG5vbi16ZXJvLCB0aGUgZnJlcXVlbmNpZXMgd2lsbCBiZSBtb2RpZmllZCBzbyB0aGF0IHRoZVxuICAgKiAgICAgICAgICAgICAgICBub2lzZSB3aWxsIGJlIHRpbGVhYmxlIGZvciB0aGUgZ2l2ZW4gc2l6ZS5cbiAgICovXG4gIE1ha2VGcmFjdGFsTm9pc2UoXG4gICAgYmFzZUZyZXFYOiBudW1iZXIsXG4gICAgYmFzZUZyZXFZOiBudW1iZXIsXG4gICAgb2N0YXZlczogbnVtYmVyLFxuICAgIHNlZWQ6IG51bWJlcixcbiAgICB0aWxlVzogbnVtYmVyLFxuICAgIHRpbGVIOiBudW1iZXIsXG4gICk6IFNoYWRlcjtcblxuICAvKipcbiAgICogUmV0dXJucyBhIHNoYWRlciB0aGF0IGdlbmVyYXRlcyBhIGxpbmVhciBncmFkaWVudCBiZXR3ZWVuIHRoZSB0d28gc3BlY2lmaWVkIHBvaW50cy5cbiAgICogU2VlIFNrR3JhZGllbnRTaGFkZXIuaCBmb3IgbW9yZS5cbiAgICogQHBhcmFtIHN0YXJ0XG4gICAqIEBwYXJhbSBlbmRcbiAgICogQHBhcmFtIGNvbG9ycyAtIGNvbG9ycyB0byBiZSBkaXN0cmlidXRlZCBiZXR3ZWVuIHN0YXJ0IGFuZCBlbmQuXG4gICAqIEBwYXJhbSBwb3MgLSBNYXkgYmUgbnVsbC4gVGhlIHJlbGF0aXZlIHBvc2l0aW9ucyBvZiBjb2xvcnMuIElmIHN1cHBsaWVkIG11c3QgYmUgc2FtZSBsZW5ndGhcbiAgICogICAgICAgICAgICAgIGFzIGNvbG9ycy5cbiAgICogQHBhcmFtIG1vZGVcbiAgICogQHBhcmFtIGxvY2FsTWF0cml4XG4gICAqIEBwYXJhbSBmbGFncyAtIEJ5IGRlZmF1bHQgZ3JhZGllbnRzIHdpbGwgaW50ZXJwb2xhdGUgdGhlaXIgY29sb3JzIGluIHVucHJlbXVsIHNwYWNlXG4gICAqICAgICAgICAgICAgICAgIGFuZCB0aGVuIHByZW11bHRpcGx5IGVhY2ggb2YgdGhlIHJlc3VsdHMuIEJ5IHNldHRpbmcgdGhpcyB0byAxLCB0aGVcbiAgICogICAgICAgICAgICAgICAgZ3JhZGllbnRzIHdpbGwgcHJlbXVsdGlwbHkgdGhlaXIgY29sb3JzIGZpcnN0LCBhbmQgdGhlbiBpbnRlcnBvbGF0ZVxuICAgKiAgICAgICAgICAgICAgICBiZXR3ZWVuIHRoZW0uXG4gICAqIEBwYXJhbSBjb2xvclNwYWNlXG4gICAqL1xuICBNYWtlTGluZWFyR3JhZGllbnQoXG4gICAgc3RhcnQ6IElucHV0UG9pbnQsXG4gICAgZW5kOiBJbnB1dFBvaW50LFxuICAgIGNvbG9yczogSW5wdXRGbGV4aWJsZUNvbG9yQXJyYXksXG4gICAgcG9zOiBudW1iZXJbXSB8IG51bGwsXG4gICAgbW9kZTogVGlsZU1vZGUsXG4gICAgbG9jYWxNYXRyaXg/OiBJbnB1dE1hdHJpeCxcbiAgICBmbGFncz86IG51bWJlcixcbiAgICBjb2xvclNwYWNlPzogQ29sb3JTcGFjZSxcbiAgKTogU2hhZGVyO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc2hhZGVyIHRoYXQgZ2VuZXJhdGVzIGEgcmFkaWFsIGdyYWRpZW50IGdpdmVuIHRoZSBjZW50ZXIgYW5kIHJhZGl1cy5cbiAgICogU2VlIFNrR3JhZGllbnRTaGFkZXIuaCBmb3IgbW9yZS5cbiAgICogQHBhcmFtIGNlbnRlclxuICAgKiBAcGFyYW0gcmFkaXVzXG4gICAqIEBwYXJhbSBjb2xvcnMgLSBjb2xvcnMgdG8gYmUgZGlzdHJpYnV0ZWQgYmV0d2VlbiB0aGUgY2VudGVyIGFuZCBlZGdlLlxuICAgKiBAcGFyYW0gcG9zIC0gTWF5IGJlIG51bGwuIFRoZSByZWxhdGl2ZSBwb3NpdGlvbnMgb2YgY29sb3JzLiBJZiBzdXBwbGllZCBtdXN0IGJlIHNhbWUgbGVuZ3RoXG4gICAqICAgICAgICAgICAgICBhcyBjb2xvcnMuIFJhbmdlIFswLjAsIDEuMF1cbiAgICogQHBhcmFtIG1vZGVcbiAgICogQHBhcmFtIGxvY2FsTWF0cml4XG4gICAqIEBwYXJhbSBmbGFncyAtIDAgdG8gaW50ZXJwb2xhdGUgY29sb3JzIGluIHVucHJlbXVsLCAxIHRvIGludGVycG9sYXRlIGNvbG9ycyBpbiBwcmVtdWwuXG4gICAqIEBwYXJhbSBjb2xvclNwYWNlXG4gICAqL1xuICBNYWtlUmFkaWFsR3JhZGllbnQoXG4gICAgY2VudGVyOiBJbnB1dFBvaW50LFxuICAgIHJhZGl1czogbnVtYmVyLFxuICAgIGNvbG9yczogSW5wdXRGbGV4aWJsZUNvbG9yQXJyYXksXG4gICAgcG9zOiBudW1iZXJbXSB8IG51bGwsXG4gICAgbW9kZTogVGlsZU1vZGUsXG4gICAgbG9jYWxNYXRyaXg/OiBJbnB1dE1hdHJpeCxcbiAgICBmbGFncz86IG51bWJlcixcbiAgICBjb2xvclNwYWNlPzogQ29sb3JTcGFjZSxcbiAgKTogU2hhZGVyO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc2hhZGVyIHRoYXQgZ2VuZXJhdGVzIGEgc3dlZXAgZ3JhZGllbnQgZ2l2ZW4gYSBjZW50ZXIuXG4gICAqIFNlZSBTa0dyYWRpZW50U2hhZGVyLmggZm9yIG1vcmUuXG4gICAqIEBwYXJhbSBjeFxuICAgKiBAcGFyYW0gY3lcbiAgICogQHBhcmFtIGNvbG9ycyAtIGNvbG9ycyB0byBiZSBkaXN0cmlidXRlZCBhcm91bmQgdGhlIGNlbnRlciwgd2l0aGluIHRoZSBwcm92aWRlZCBhbmdsZXMuXG4gICAqIEBwYXJhbSBwb3MgLSBNYXkgYmUgbnVsbC4gVGhlIHJlbGF0aXZlIHBvc2l0aW9ucyBvZiBjb2xvcnMuIElmIHN1cHBsaWVkIG11c3QgYmUgc2FtZSBsZW5ndGhcbiAgICogICAgICAgICAgICAgIGFzIGNvbG9ycy4gUmFuZ2UgWzAuMCwgMS4wXVxuICAgKiBAcGFyYW0gbW9kZVxuICAgKiBAcGFyYW0gbG9jYWxNYXRyaXhcbiAgICogQHBhcmFtIGZsYWdzIC0gMCB0byBpbnRlcnBvbGF0ZSBjb2xvcnMgaW4gdW5wcmVtdWwsIDEgdG8gaW50ZXJwb2xhdGUgY29sb3JzIGluIHByZW11bC5cbiAgICogQHBhcmFtIHN0YXJ0QW5nbGUgLSBhbmdsZSBjb3JyZXNwb25kaW5nIHRvIDAuMC4gRGVmYXVsdHMgdG8gMCBkZWdyZWVzLlxuICAgKiBAcGFyYW0gZW5kQW5nbGUgLSBhbmdsZSBjb3JyZXNwb25kaW5nIHRvIDEuMC4gRGVmYXVsdHMgdG8gMzYwIGRlZ3JlZXMuXG4gICAqIEBwYXJhbSBjb2xvclNwYWNlXG4gICAqL1xuICBNYWtlU3dlZXBHcmFkaWVudChcbiAgICBjeDogbnVtYmVyLFxuICAgIGN5OiBudW1iZXIsXG4gICAgY29sb3JzOiBJbnB1dEZsZXhpYmxlQ29sb3JBcnJheSxcbiAgICBwb3M6IG51bWJlcltdIHwgbnVsbCxcbiAgICBtb2RlOiBUaWxlTW9kZSxcbiAgICBsb2NhbE1hdHJpeD86IElucHV0TWF0cml4IHwgbnVsbCxcbiAgICBmbGFncz86IG51bWJlcixcbiAgICBzdGFydEFuZ2xlPzogQW5nbGVJbkRlZ3JlZXMsXG4gICAgZW5kQW5nbGU/OiBBbmdsZUluRGVncmVlcyxcbiAgICBjb2xvclNwYWNlPzogQ29sb3JTcGFjZSxcbiAgKTogU2hhZGVyO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc2hhZGVyIHdpdGggUGVybGluIFR1cmJ1bGVuY2UuXG4gICAqIFNlZSBTa1Blcmxpbk5vaXNlU2hhZGVyLmggZm9yIG1vcmUgZGV0YWlsc1xuICAgKiBAcGFyYW0gYmFzZUZyZXFYIC0gYmFzZSBmcmVxdWVuY3kgaW4gdGhlIFggZGlyZWN0aW9uOyByYW5nZSBbMC4wLCAxLjBdXG4gICAqIEBwYXJhbSBiYXNlRnJlcVkgLSBiYXNlIGZyZXF1ZW5jeSBpbiB0aGUgWSBkaXJlY3Rpb247IHJhbmdlIFswLjAsIDEuMF1cbiAgICogQHBhcmFtIG9jdGF2ZXNcbiAgICogQHBhcmFtIHNlZWRcbiAgICogQHBhcmFtIHRpbGVXIC0gaWYgdGhpcyBhbmQgdGlsZUggYXJlIG5vbi16ZXJvLCB0aGUgZnJlcXVlbmNpZXMgd2lsbCBiZSBtb2RpZmllZCBzbyB0aGF0IHRoZVxuICAgKiAgICAgICAgICAgICAgICBub2lzZSB3aWxsIGJlIHRpbGVhYmxlIGZvciB0aGUgZ2l2ZW4gc2l6ZS5cbiAgICogQHBhcmFtIHRpbGVIIC0gaWYgdGhpcyBhbmQgdGlsZVcgYXJlIG5vbi16ZXJvLCB0aGUgZnJlcXVlbmNpZXMgd2lsbCBiZSBtb2RpZmllZCBzbyB0aGF0IHRoZVxuICAgKiAgICAgICAgICAgICAgICBub2lzZSB3aWxsIGJlIHRpbGVhYmxlIGZvciB0aGUgZ2l2ZW4gc2l6ZS5cbiAgICovXG4gIE1ha2VUdXJidWxlbmNlKFxuICAgIGJhc2VGcmVxWDogbnVtYmVyLFxuICAgIGJhc2VGcmVxWTogbnVtYmVyLFxuICAgIG9jdGF2ZXM6IG51bWJlcixcbiAgICBzZWVkOiBudW1iZXIsXG4gICAgdGlsZVc6IG51bWJlcixcbiAgICB0aWxlSDogbnVtYmVyLFxuICApOiBTaGFkZXI7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzaGFkZXIgdGhhdCBnZW5lcmF0ZXMgYSBjb25pY2FsIGdyYWRpZW50IGdpdmVuIHR3byBjaXJjbGVzLlxuICAgKiBTZWUgU2tHcmFkaWVudFNoYWRlci5oIGZvciBtb3JlLlxuICAgKiBAcGFyYW0gc3RhcnRcbiAgICogQHBhcmFtIHN0YXJ0UmFkaXVzXG4gICAqIEBwYXJhbSBlbmRcbiAgICogQHBhcmFtIGVuZFJhZGl1c1xuICAgKiBAcGFyYW0gY29sb3JzXG4gICAqIEBwYXJhbSBwb3NcbiAgICogQHBhcmFtIG1vZGVcbiAgICogQHBhcmFtIGxvY2FsTWF0cml4XG4gICAqIEBwYXJhbSBmbGFnc1xuICAgKiBAcGFyYW0gY29sb3JTcGFjZVxuICAgKi9cbiAgTWFrZVR3b1BvaW50Q29uaWNhbEdyYWRpZW50KFxuICAgIHN0YXJ0OiBJbnB1dFBvaW50LFxuICAgIHN0YXJ0UmFkaXVzOiBudW1iZXIsXG4gICAgZW5kOiBJbnB1dFBvaW50LFxuICAgIGVuZFJhZGl1czogbnVtYmVyLFxuICAgIGNvbG9yczogSW5wdXRGbGV4aWJsZUNvbG9yQXJyYXksXG4gICAgcG9zOiBudW1iZXJbXSB8IG51bGwsXG4gICAgbW9kZTogVGlsZU1vZGUsXG4gICAgbG9jYWxNYXRyaXg/OiBJbnB1dE1hdHJpeCxcbiAgICBmbGFncz86IG51bWJlcixcbiAgICBjb2xvclNwYWNlPzogQ29sb3JTcGFjZSxcbiAgKTogU2hhZGVyO1xufVxuXG4vKipcbiAqIFNlZSBTa1RleHRCbG9iLmggZm9yIG1vcmUgZGV0YWlscy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUZXh0QmxvYkZhY3Rvcnkge1xuICAvKipcbiAgICogUmV0dXJuIGEgVGV4dEJsb2Igd2l0aCBhIHNpbmdsZSBydW4gb2YgdGV4dC5cbiAgICpcbiAgICogSXQgZG9lcyBub3QgcGVyZm9ybSB0eXBlZmFjZSBmYWxsYmFjayBmb3IgY2hhcmFjdGVycyBub3QgZm91bmQgaW4gdGhlIFR5cGVmYWNlLlxuICAgKiBJdCBkb2VzIG5vdCBwZXJmb3JtIGtlcm5pbmcgb3Igb3RoZXIgY29tcGxleCBzaGFwaW5nOyBnbHlwaHMgYXJlIHBvc2l0aW9uZWQgYmFzZWQgb24gdGhlaXJcbiAgICogZGVmYXVsdCBhZHZhbmNlcy5cbiAgICogQHBhcmFtIGdseXBocyAtIGlmIHVzaW5nIE1hbGxvYydkIGFycmF5LCBiZSBzdXJlIHRvIHVzZSBDYW52YXNLaXQuTWFsbG9jR2x5cGhJRHMoKS5cbiAgICogQHBhcmFtIGZvbnRcbiAgICovXG4gIE1ha2VGcm9tR2x5cGhzKGdseXBoczogSW5wdXRHbHlwaElEQXJyYXksIGZvbnQ6IEZvbnQpOiBUZXh0QmxvYjtcblxuICAvKipcbiAgICogUmV0dXJucyBhIFRleHRCbG9iIGJ1aWx0IGZyb20gYSBzaW5nbGUgcnVuIG9mIHRleHQgd2l0aCByb3RhdGlvbiwgc2NhbGUsIGFuZCB0cmFuc2xhdGlvbnMuXG4gICAqXG4gICAqIEl0IHVzZXMgdGhlIGRlZmF1bHQgY2hhcmFjdGVyLXRvLWdseXBoIG1hcHBpbmcgZnJvbSB0aGUgdHlwZWZhY2UgaW4gdGhlIGZvbnQuXG4gICAqIEBwYXJhbSBzdHJcbiAgICogQHBhcmFtIHJzeGZvcm1zXG4gICAqIEBwYXJhbSBmb250XG4gICAqL1xuICBNYWtlRnJvbVJTWGZvcm0oXG4gICAgc3RyOiBzdHJpbmcsXG4gICAgcnN4Zm9ybXM6IElucHV0RmxhdHRlbmVkUlNYRm9ybUFycmF5LFxuICAgIGZvbnQ6IEZvbnQsXG4gICk6IFRleHRCbG9iO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgVGV4dEJsb2IgYnVpbHQgZnJvbSBhIHNpbmdsZSBydW4gb2YgdGV4dCB3aXRoIHJvdGF0aW9uLCBzY2FsZSwgYW5kIHRyYW5zbGF0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIGdseXBocyAtIGlmIHVzaW5nIE1hbGxvYydkIGFycmF5LCBiZSBzdXJlIHRvIHVzZSBDYW52YXNLaXQuTWFsbG9jR2x5cGhJRHMoKS5cbiAgICogQHBhcmFtIHJzeGZvcm1zXG4gICAqIEBwYXJhbSBmb250XG4gICAqL1xuICBNYWtlRnJvbVJTWGZvcm1HbHlwaHMoXG4gICAgZ2x5cGhzOiBJbnB1dEdseXBoSURBcnJheSxcbiAgICByc3hmb3JtczogSW5wdXRGbGF0dGVuZWRSU1hGb3JtQXJyYXksXG4gICAgZm9udDogRm9udCxcbiAgKTogVGV4dEJsb2I7XG5cbiAgLyoqXG4gICAqIFJldHVybiBhIFRleHRCbG9iIHdpdGggYSBzaW5nbGUgcnVuIG9mIHRleHQuXG4gICAqXG4gICAqIEl0IHVzZXMgdGhlIGRlZmF1bHQgY2hhcmFjdGVyLXRvLWdseXBoIG1hcHBpbmcgZnJvbSB0aGUgdHlwZWZhY2UgaW4gdGhlIGZvbnQuXG4gICAqIEl0IGRvZXMgbm90IHBlcmZvcm0gdHlwZWZhY2UgZmFsbGJhY2sgZm9yIGNoYXJhY3RlcnMgbm90IGZvdW5kIGluIHRoZSBUeXBlZmFjZS5cbiAgICogSXQgZG9lcyBub3QgcGVyZm9ybSBrZXJuaW5nIG9yIG90aGVyIGNvbXBsZXggc2hhcGluZzsgZ2x5cGhzIGFyZSBwb3NpdGlvbmVkIGJhc2VkIG9uIHRoZWlyXG4gICAqIGRlZmF1bHQgYWR2YW5jZXMuXG4gICAqIEBwYXJhbSBzdHJcbiAgICogQHBhcmFtIGZvbnRcbiAgICovXG4gIE1ha2VGcm9tVGV4dChzdHI6IHN0cmluZywgZm9udDogRm9udCk6IFRleHRCbG9iO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgVGV4dEJsb2IgdGhhdCBoYXMgdGhlIGdseXBocyBmb2xsb3dpbmcgdGhlIGNvbnRvdXJzIG9mIHRoZSBnaXZlbiBwYXRoLlxuICAgKlxuICAgKiBJdCBpcyBhIGNvbnZlbmllbmNlIHdyYXBwZXIgYXJvdW5kIE1ha2VGcm9tUlNYZm9ybSBhbmQgQ29udG91ck1lYXN1cmVJdGVyLlxuICAgKiBAcGFyYW0gc3RyXG4gICAqIEBwYXJhbSBwYXRoXG4gICAqIEBwYXJhbSBmb250XG4gICAqIEBwYXJhbSBpbml0aWFsT2Zmc2V0IC0gdGhlIGxlbmd0aCBpbiBwaXhlbHMgdG8gc3RhcnQgYWxvbmcgdGhlIHBhdGguXG4gICAqL1xuICBNYWtlT25QYXRoKFxuICAgIHN0cjogc3RyaW5nLFxuICAgIHBhdGg6IFBhdGgsXG4gICAgZm9udDogRm9udCxcbiAgICBpbml0aWFsT2Zmc2V0PzogbnVtYmVyLFxuICApOiBUZXh0QmxvYjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUZXh0U3R5bGVDb25zdHJ1Y3RvciB7XG4gIC8qKlxuICAgKiBGaWxscyBvdXQgYWxsIG9wdGlvbmFsIGZpZWxkcyB3aXRoIGRlZmF1bHRzLiBUaGUgZW1zY3JpcHRlbiBiaW5kaW5ncyBjb21wbGFpbiBpZiB0aGVyZVxuICAgKiBpcyBhIGZpZWxkIHVuZGVmaW5lZCBhbmQgaXQgd2FzIGV4cGVjdGluZyBhIGZsb2F0IChmb3IgZXhhbXBsZSkuXG4gICAqIEBwYXJhbSB0c1xuICAgKi9cbiAgbmV3ICh0czogVGV4dFN0eWxlKTogVGV4dFN0eWxlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFR5cGVmYWNlRmFjdG9yeSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSB0eXBlZmFjZSB1c2luZyBGcmVldHlwZSBmcm9tIHRoZSBzcGVjaWZpZWQgYnl0ZXMgYW5kIHJldHVybiBpdC4gQ2FudmFzS2l0IHN1cHBvcnRzXG4gICAqIC50dGYsIC53b2ZmIGFuZCAud29mZjIgZm9udHMuIEl0IHJldHVybnMgbnVsbCBpZiB0aGUgYnl0ZXMgY2Fubm90IGJlIGRlY29kZWQuXG4gICAqIEBwYXJhbSBmb250RGF0YVxuICAgKi9cbiAgTWFrZUZyZWVUeXBlRmFjZUZyb21EYXRhKGZvbnREYXRhOiBBcnJheUJ1ZmZlcik6IFR5cGVmYWNlIHwgbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUeXBlZmFjZUZvbnRQcm92aWRlckZhY3Rvcnkge1xuICAvKipcbiAgICogUmV0dXJuIGFuIGVtcHR5IFR5cGVmYWNlRm9udFByb3ZpZGVyXG4gICAqL1xuICBNYWtlKCk6IFR5cGVmYWNlRm9udFByb3ZpZGVyO1xufVxuXG4vKipcbiAqIEZ1bmN0aW9ucyBmb3IgbWFuaXB1bGF0aW5nIHZlY3RvcnMuIEl0IGlzIExvb3NlbHkgYmFzZWQgb2ZmIG9mIFNrVjMgaW4gU2tNNDQuaCBidXQgU2tpYVxuICogYWxzbyBoYXMgU2tWZWMyIGFuZCBTa3Y0LiBUaGlzIGNvbWJpbmVzIHRoZW0gYW5kIHdvcmtzIG9uIHZlY3RvcnMgb2YgYW55IGxlbmd0aC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBWZWN0b3JIZWxwZXJzIHtcbiAgLyoqXG4gICAqIEFkZHMgMiB2ZWN0b3JzIHRvZ2V0aGVyLCB0ZXJtIGJ5IHRlcm0sIHJldHVybmluZyBhIG5ldyBWZWN0b3IuXG4gICAqIEBwYXJhbSBhXG4gICAqIEBwYXJhbSBiXG4gICAqL1xuICBhZGQoYTogVmVjdG9yTiwgYjogVmVjdG9yTik6IFZlY3Rvck47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdGhlIHR3byB2ZWN0b3JzLiBPbmx5IHdvcmtzIGZvciBsZW5ndGggMy5cbiAgICogQHBhcmFtIGFcbiAgICogQHBhcmFtIGJcbiAgICovXG4gIGNyb3NzKGE6IFZlY3RvcjMsIGI6IFZlY3RvcjMpOiBWZWN0b3IzO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsZW5ndGgoc3ViKGEsIGIpKVxuICAgKiBAcGFyYW0gYVxuICAgKiBAcGFyYW0gYlxuICAgKi9cbiAgZGlzdChhOiBWZWN0b3JOLCBiOiBWZWN0b3JOKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBkb3QgcHJvZHVjdCBvZiB0aGUgdHdvIHZlY3RvcnMuXG4gICAqIEBwYXJhbSBhXG4gICAqIEBwYXJhbSBiXG4gICAqL1xuICBkb3QoYTogVmVjdG9yTiwgYjogVmVjdG9yTik6IG51bWJlcjtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoaXMgdmVjdG9yLCB3aGljaCBpcyBhbHdheXMgcG9zaXRpdmUuXG4gICAqIEBwYXJhbSB2XG4gICAqL1xuICBsZW5ndGgodjogVmVjdG9yTik6IG51bWJlcjtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGVuZ3RoIHNxdWFyZWQgb2YgdGhpcyB2ZWN0b3IuXG4gICAqIEBwYXJhbSB2XG4gICAqL1xuICBsZW5ndGhTcXVhcmVkKHY6IFZlY3Rvck4pOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBuZXcgdmVjdG9yIHdoaWNoIGlzIHYgbXVsdGlwbGllZCBieSB0aGUgc2NhbGFyIHMuXG4gICAqIEBwYXJhbSB2XG4gICAqIEBwYXJhbSBzXG4gICAqL1xuICBtdWxTY2FsYXIodjogVmVjdG9yTiwgczogbnVtYmVyKTogVmVjdG9yTjtcblxuICAvKipcbiAgICogUmV0dXJucyBhIG5vcm1hbGl6ZWQgdmVjdG9yLlxuICAgKiBAcGFyYW0gdlxuICAgKi9cbiAgbm9ybWFsaXplKHY6IFZlY3Rvck4pOiBWZWN0b3JOO1xuXG4gIC8qKlxuICAgKiBTdWJ0cmFjdHMgdmVjdG9yIGIgZnJvbSB2ZWN0b3IgYSAodGVybXdpc2UpLlxuICAgKiBAcGFyYW0gYVxuICAgKiBAcGFyYW0gYlxuICAgKi9cbiAgc3ViKGE6IFZlY3Rvck4sIGI6IFZlY3Rvck4pOiBWZWN0b3JOO1xufVxuXG4vKipcbiAqIEEgUG9zVGFuIGlzIGEgRmxvYXQzMkFycmF5IG9mIGxlbmd0aCA0LCByZXByZXNlbnRpbmcgYSBwb3NpdGlvbiBhbmQgYSB0YW5nZW50IHZlY3Rvci4gSW4gb3JkZXIsXG4gKiB0aGUgdmFsdWVzIGFyZSBbcHgsIHB5LCB0eCwgdHldLlxuICovXG5leHBvcnQgdHlwZSBQb3NUYW4gPSBGbG9hdDMyQXJyYXk7XG4vKipcbiAqIEFuIENvbG9yIGlzIHJlcHJlc2VudGVkIGJ5IDQgZmxvYXRzLCB0eXBpY2FsbHkgd2l0aCB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAxLjAuIEluIG9yZGVyLFxuICogdGhlIGZsb2F0cyBjb3JyZXNwb25kIHRvIHJlZCwgZ3JlZW4sIGJsdWUsIGFscGhhLlxuICovXG5leHBvcnQgdHlwZSBDb2xvciA9IEZsb2F0MzJBcnJheTtcbmV4cG9ydCB0eXBlIENvbG9ySW50ID0gbnVtYmVyOyAvLyBkZXByZWNhdGVkLCBwcmVmZXIgQ29sb3Jcbi8qKlxuICogQW4gQ29sb3JNYXRyaXggaXMgYSA0eDQgY29sb3IgbWF0cml4IHRoYXQgdHJhbnNmb3JtcyB0aGUgNCBjb2xvciBjaGFubmVsc1xuICogd2l0aCBhIDF4NCBtYXRyaXggdGhhdCBwb3N0LXRyYW5zbGF0ZXMgdGhvc2UgNCBjaGFubmVscy5cbiAqIEZvciBleGFtcGxlLCB0aGUgZm9sbG93aW5nIGlzIHRoZSBsYXlvdXQgd2l0aCB0aGUgc2NhbGUgKFMpIGFuZCBwb3N0LXRyYW5zZm9ybVxuICogKFBUKSBpdGVtcyBpbmRpY2F0ZWQuXG4gKiBSUywgIDAsICAwLCAgMCB8IFJQVFxuICogIDAsIEdTLCAgMCwgIDAgfCBHUFRcbiAqICAwLCAgMCwgQlMsICAwIHwgQlBUXG4gKiAgMCwgIDAsICAwLCBBUyB8IEFQVFxuICovXG5leHBvcnQgdHlwZSBDb2xvck1hdHJpeCA9IEZsb2F0MzJBcnJheTtcbi8qKlxuICogQW4gSVJlY3QgaXMgcmVwcmVzZW50ZWQgYnkgNCBpbnRzLiBJbiBvcmRlciwgdGhlIGludHMgY29ycmVzcG9uZCB0byBsZWZ0LCB0b3AsXG4gKiByaWdodCwgYm90dG9tLiBTZWUgUmVjdC5oIGZvciBtb3JlXG4gKi9cbmV4cG9ydCB0eXBlIElSZWN0ID0gSW50MzJBcnJheTtcbi8qKlxuICogQW4gUG9pbnQgaXMgcmVwcmVzZW50ZWQgYnkgMiBmbG9hdHM6ICh4LCB5KS5cbiAqL1xuZXhwb3J0IHR5cGUgUG9pbnQgPSBGbG9hdDMyQXJyYXk7XG4vKipcbiAqIEFuIFJlY3QgaXMgcmVwcmVzZW50ZWQgYnkgNCBmbG9hdHMuIEluIG9yZGVyLCB0aGUgZmxvYXRzIGNvcnJlc3BvbmQgdG8gbGVmdCwgdG9wLFxuICogcmlnaHQsIGJvdHRvbS4gU2VlIFJlY3QuaCBmb3IgbW9yZVxuICovXG5leHBvcnQgdHlwZSBSZWN0ID0gRmxvYXQzMkFycmF5O1xuLyoqXG4gKiBBbiBSUmVjdCAocmVjdGFuZ2xlIHdpdGggcm91bmRlZCBjb3JuZXJzKSBpcyByZXByZXNlbnRlZCBieSAxMiBmbG9hdHMuIEluIG9yZGVyLCB0aGUgZmxvYXRzXG4gKiBjb3JyZXNwb25kIHRvIGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbSBhbmQgdGhlbiBpbiBwYWlycywgdGhlIHJhZGl1c1gsIHJhZGl1c1kgZm9yIHVwcGVyLWxlZnQsXG4gKiB1cHBlci1yaWdodCwgbG93ZXItcmlnaHQsIGxvd2VyLWxlZnQuIFNlZSBSUmVjdC5oIGZvciBtb3JlLlxuICovXG5leHBvcnQgdHlwZSBSUmVjdCA9IEZsb2F0MzJBcnJheTtcblxuZXhwb3J0IHR5cGUgV2ViR0xDb250ZXh0SGFuZGxlID0gbnVtYmVyO1xuZXhwb3J0IHR5cGUgQW5nbGVJbkRlZ3JlZXMgPSBudW1iZXI7XG5leHBvcnQgdHlwZSBBbmdsZUluUmFkaWFucyA9IG51bWJlcjtcbmV4cG9ydCB0eXBlIFNhdmVMYXllckZsYWcgPSBudW1iZXI7XG5cbmV4cG9ydCB0eXBlIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9XG4gIHwgRmxvYXQzMkFycmF5Q29uc3RydWN0b3JcbiAgfCBJbnQzMkFycmF5Q29uc3RydWN0b3JcbiAgfCBJbnQxNkFycmF5Q29uc3RydWN0b3JcbiAgfCBJbnQ4QXJyYXlDb25zdHJ1Y3RvclxuICB8IFVpbnQzMkFycmF5Q29uc3RydWN0b3JcbiAgfCBVaW50MTZBcnJheUNvbnN0cnVjdG9yXG4gIHwgVWludDhBcnJheUNvbnN0cnVjdG9yO1xuZXhwb3J0IHR5cGUgVHlwZWRBcnJheSA9XG4gIHwgRmxvYXQzMkFycmF5XG4gIHwgSW50MzJBcnJheVxuICB8IEludDE2QXJyYXlcbiAgfCBJbnQ4QXJyYXlcbiAgfCBVaW50MzJBcnJheVxuICB8IFVpbnQxNkFycmF5XG4gIHwgVWludDhBcnJheTtcblxuZXhwb3J0IHR5cGUgQ29sb3JJbnRBcnJheSA9IE1hbGxvY09iaiB8IFVpbnQzMkFycmF5IHwgbnVtYmVyW107XG4vKipcbiAqIEZsYXR0ZW5lZFBvaW50QXJyYXkgcmVwcmVzZW50cyBuIHBvaW50cyBieSAyKm4gZmxvYXQgdmFsdWVzLiBJbiBvcmRlciwgdGhlIHZhbHVlcyBzaG91bGRcbiAqIGJlIHRoZSB4LCB5IGZvciBlYWNoIHBvaW50LlxuICovXG5leHBvcnQgdHlwZSBGbGF0dGVuZWRQb2ludEFycmF5ID0gRmxvYXQzMkFycmF5O1xuLyoqXG4gKiBGbGF0dGVuZWRSZWN0YW5nbGVBcnJheSByZXByZXNlbnRzIG4gcmVjdGFuZ2xlcyBieSA0Km4gZmxvYXQgdmFsdWVzLiBJbiBvcmRlciwgdGhlIHZhbHVlcyBzaG91bGRcbiAqIGJlIHRoZSB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20gcG9pbnQgZm9yIGVhY2ggcmVjdGFuZ2xlLlxuICovXG5leHBvcnQgdHlwZSBGbGF0dGVuZWRSZWN0YW5nbGVBcnJheSA9IEZsb2F0MzJBcnJheTtcblxuZXhwb3J0IHR5cGUgR2x5cGhJREFycmF5ID0gVWludDE2QXJyYXk7XG4vKipcbiAqIEEgY29tbWFuZCBpcyBhIHZlcmIgYW5kIHRoZW4gYW55IGFyZ3VtZW50cyBuZWVkZWQgdG8gZnVsZmlsbCB0aGF0IHBhdGggdmVyYi5cbiAqIElucHV0Q29tbWFuZHMgaXMgYSBmbGF0dGVuZWQgc3RydWN0dXJlIG9mIG9uZSBvciBtb3JlIG9mIHRoZXNlLlxuICogRXhhbXBsZXM6XG4gKiAgIFtDYW52YXNLaXQuTU9WRV9WRVJCLCAwLCAxMCxcbiAqICAgIENhbnZhc0tpdC5RVUFEX1ZFUkIsIDIwLCA1MCwgNDUsIDYwLFxuICogICAgQ2FudmFzS2l0LkxJTkVfVkVSQiwgMzAsIDQwXVxuICovXG5leHBvcnQgdHlwZSBJbnB1dENvbW1hbmRzID0gTWFsbG9jT2JqIHwgRmxvYXQzMkFycmF5IHwgbnVtYmVyW107XG4vKipcbiAqIFZlcmJMaXN0IGhvbGRzIHZlcmIgY29uc3RhbnRzIGxpa2UgQ2FudmFzS2l0Lk1PVkVfVkVSQiwgQ2FudmFzS2l0LkNVQklDX1ZFUkIuXG4gKi9cbmV4cG9ydCB0eXBlIFZlcmJMaXN0ID0gTWFsbG9jT2JqIHwgVWludDhBcnJheSB8IG51bWJlcltdO1xuLyoqXG4gKiBXZWlnaHRMaXN0IGhvbGRzIHdlaWdodHMgZm9yIGNvbmljcyB3aGVuIG1ha2luZyBwYXRocy5cbiAqL1xuZXhwb3J0IHR5cGUgV2VpZ2h0TGlzdCA9IE1hbGxvY09iaiB8IEZsb2F0MzJBcnJheSB8IG51bWJlcltdO1xuXG5leHBvcnQgdHlwZSBNYXRyaXg0eDQgPSBGbG9hdDMyQXJyYXk7XG5leHBvcnQgdHlwZSBNYXRyaXgzeDMgPSBGbG9hdDMyQXJyYXk7XG5leHBvcnQgdHlwZSBNYXRyaXgzeDIgPSBGbG9hdDMyQXJyYXk7XG4vKipcbiAqIFZlY3RvcjMgcmVwcmVzZW50cyBhbiB4LCB5LCB6IGNvb3JkaW5hdGUgb3IgdmVjdG9yLiBJdCBoYXMgbGVuZ3RoIDMuXG4gKi9cbmV4cG9ydCB0eXBlIFZlY3RvcjMgPSBudW1iZXJbXTtcblxuLyoqXG4gKiBWZWN0b3JOIHJlcHJlc2VudHMgYSB2ZWN0b3Igb2YgbGVuZ3RoIG4uXG4gKi9cbmV4cG9ydCB0eXBlIFZlY3Rvck4gPSBudW1iZXJbXTtcblxuLyoqXG4gKiBDYW52YXNLaXQgQVBJcyBhY2NlcHQgbm9ybWFsIGFycmF5cywgdHlwZWQgYXJyYXlzLCBvciBNYWxsb2MnZCBtZW1vcnkgYXMgY29sb3JzLlxuICogTGVuZ3RoIDQuXG4gKi9cbmV4cG9ydCB0eXBlIElucHV0Q29sb3IgPSBNYWxsb2NPYmogfCBDb2xvciB8IG51bWJlcltdO1xuLyoqXG4gKiBDYW52YXNLaXQgQVBJcyBhY2NlcHQgbm9ybWFsIGFycmF5cywgdHlwZWQgYXJyYXlzLCBvciBNYWxsb2MnZCBtZW1vcnkgYXMgY29sb3IgbWF0cmljZXMuXG4gKiBMZW5ndGggMjAuXG4gKi9cbmV4cG9ydCB0eXBlIElucHV0Q29sb3JNYXRyaXggPSBNYWxsb2NPYmogfCBDb2xvck1hdHJpeCB8IG51bWJlcltdO1xuLyoqXG4gKiBDYW52YXNLaXQgQVBJcyBhY2NlcHQgbm9ybWFsIGFycmF5cywgdHlwZWQgYXJyYXlzLCBvciBNYWxsb2MnZCBtZW1vcnkgYXMgZ2x5cGggSURzLlxuICogTGVuZ3RoIG4gZm9yIG4gZ2x5cGggSURzLlxuICovXG5leHBvcnQgdHlwZSBJbnB1dEdseXBoSURBcnJheSA9IE1hbGxvY09iaiB8IEdseXBoSURBcnJheSB8IG51bWJlcltdO1xuLyoqXG4gKiBDYW52YXNLaXQgQVBJcyBhY2NlcHQgbm9ybWFsIGFycmF5cywgdHlwZWQgYXJyYXlzLCBvciBNYWxsb2MnZCBtZW1vcnkgYXMgZmxhdHRlbmVkIHBvaW50cy5cbiAqIExlbmd0aCAyICogbiBmb3IgbiBwb2ludHMuXG4gKi9cbmV4cG9ydCB0eXBlIElucHV0RmxhdHRlbmVkUG9pbnRBcnJheSA9XG4gIHwgTWFsbG9jT2JqXG4gIHwgRmxhdHRlbmVkUG9pbnRBcnJheVxuICB8IG51bWJlcltdO1xuLyoqXG4gKiBDYW52YXNLaXQgQVBJcyBhY2NlcHQgbm9ybWFsIGFycmF5cywgdHlwZWQgYXJyYXlzLCBvciBNYWxsb2MnZCBtZW1vcnkgYXMgZmxhdHRlbmVkIHJlY3RhbmdsZXMuXG4gKiBMZW5ndGggNCAqIG4gZm9yIG4gcmVjdGFuZ2xlcy5cbiAqL1xuZXhwb3J0IHR5cGUgSW5wdXRGbGF0dGVuZWRSZWN0YW5nbGVBcnJheSA9XG4gIHwgTWFsbG9jT2JqXG4gIHwgRmxhdHRlbmVkUmVjdGFuZ2xlQXJyYXlcbiAgfCBudW1iZXJbXTtcbi8qKlxuICogU29tZSBBUElzIGFjY2VwdCBhIGZsYXR0ZW5lZCBhcnJheSBvZiBjb2xvcnMgaW4gb25lIG9mIHR3byB3YXlzIC0gZ3JvdXBzIG9mIDQgZmxvYXQgdmFsdWVzIGZvclxuICogciwgZywgYiwgYSBvciBqdXN0IGludGVnZXJzIHRoYXQgaGF2ZSA4IGJpdHMgZm9yIGVhY2ggdGhlc2UuIENhbnZhc0tpdCB3aWxsIGRldGVjdCB3aGljaCBvbmVcbiAqIGl0IGlzIGFuZCBhY3QgYWNjb3JkaW5nbHkuIEFkZGl0aW9uYWxseSwgdGhpcyBjYW4gYmUgYW4gYXJyYXkgb2YgRmxvYXQzMkFycmF5cyBvZiBsZW5ndGggNFxuICogKGUuZy4gQ29sb3IpLiBUaGlzIGlzIGNvbnZlbmllbnQgZm9yIHRoaW5ncyBsaWtlIGdyYWRpZW50cyB3aGVuIG1hdGNoaW5nIHVwIGNvbG9ycyB0byBzdG9wcy5cbiAqL1xuZXhwb3J0IHR5cGUgSW5wdXRGbGV4aWJsZUNvbG9yQXJyYXkgPVxuICB8IEZsb2F0MzJBcnJheVxuICB8IFVpbnQzMkFycmF5XG4gIHwgRmxvYXQzMkFycmF5W107XG4vKipcbiAqIENhbnZhc0tpdCBBUElzIGFjY2VwdCBhIEZsb2F0MzJBcnJheSBvciBhIG5vcm1hbCBhcnJheSAob2YgbGVuZ3RoIDIpIGFzIGEgUG9pbnQuXG4gKi9cbmV4cG9ydCB0eXBlIElucHV0UG9pbnQgPSBQb2ludCB8IG51bWJlcltdO1xuLyoqXG4gKiBDYW52YXNLaXQgQVBJcyBhY2NlcHQgYWxsIG9mIHRoZXNlIG1hdHJpeCB0eXBlcy4gVW5kZXIgdGhlIGhvb2QsIHdlIGdlbmVyYWxseSB1c2UgNHg0IG1hdHJpY2VzLlxuICovXG5leHBvcnQgdHlwZSBJbnB1dE1hdHJpeCA9XG4gIHwgTWFsbG9jT2JqXG4gIHwgTWF0cml4NHg0XG4gIHwgTWF0cml4M3gzXG4gIHwgTWF0cml4M3gyXG4gIHwgRE9NTWF0cml4XG4gIHwgbnVtYmVyW107XG4vKipcbiAqIENhbnZhc0tpdCBBUElzIGFjY2VwdCBub3JtYWwgYXJyYXlzLCB0eXBlZCBhcnJheXMsIG9yIE1hbGxvYydkIG1lbW9yeSBhcyByZWN0YW5nbGVzLlxuICogTGVuZ3RoIDQuXG4gKi9cbmV4cG9ydCB0eXBlIElucHV0UmVjdCA9IE1hbGxvY09iaiB8IFJlY3QgfCBudW1iZXJbXTtcbi8qKlxuICogQ2FudmFzS2l0IEFQSXMgYWNjZXB0IG5vcm1hbCBhcnJheXMsIHR5cGVkIGFycmF5cywgb3IgTWFsbG9jJ2QgbWVtb3J5IGFzIChpbnQpIHJlY3RhbmdsZXMuXG4gKiBMZW5ndGggNC5cbiAqL1xuZXhwb3J0IHR5cGUgSW5wdXRJUmVjdCA9IE1hbGxvY09iaiB8IElSZWN0IHwgbnVtYmVyW107XG4vKipcbiAqIENhbnZhc0tpdCBBUElzIGFjY2VwdCBub3JtYWwgYXJyYXlzLCB0eXBlZCBhcnJheXMsIG9yIE1hbGxvYydkIG1lbW9yeSBhcyByZWN0YW5nbGVzIHdpdGhcbiAqIHJvdW5kZWQgY29ybmVycy4gTGVuZ3RoIDEyLlxuICovXG5leHBvcnQgdHlwZSBJbnB1dFJSZWN0ID0gTWFsbG9jT2JqIHwgUlJlY3QgfCBudW1iZXJbXTtcbi8qKlxuICogVGhpcyByZXByZXNlbnRzIG4gUlNYZm9ybXMgYnkgNCpuIGZsb2F0IHZhbHVlcy4gSW4gb3JkZXIsIHRoZSB2YWx1ZXMgc2hvdWxkXG4gKiBiZSBzY29zLCBzc2luLCB0eCwgdHkgZm9yIGVhY2ggUlNYRm9ybS4gU2VlIFJTWEZvcm0uaCBmb3IgbW9yZSBkZXRhaWxzLlxuICovXG5leHBvcnQgdHlwZSBJbnB1dEZsYXR0ZW5lZFJTWEZvcm1BcnJheSA9IE1hbGxvY09iaiB8IEZsb2F0MzJBcnJheSB8IG51bWJlcltdO1xuLyoqXG4gKiBDYW52YXNLaXQgQVBJcyBhY2NlcHQgbm9ybWFsIGFycmF5cywgdHlwZWQgYXJyYXlzLCBvciBNYWxsb2MnZCBtZW1vcnkgYXMgYSB2ZWN0b3Igb2YgMyBmbG9hdHMuXG4gKiBGb3IgZXhhbXBsZSwgdGhpcyBpcyB0aGUgeCwgeSwgeiBjb29yZGluYXRlcy5cbiAqL1xuZXhwb3J0IHR5cGUgSW5wdXRWZWN0b3IzID0gTWFsbG9jT2JqIHwgVmVjdG9yMyB8IEZsb2F0MzJBcnJheTtcbi8qKlxuICogVGhlc2UgYXJlIHRoZSB0eXBlcyB0aGF0IHdlYkdMJ3MgdGV4SW1hZ2UyRCBzdXBwb3J0cyBhcyBhIHdheSB0byBnZXQgZGF0YSBmcm9tIGFzIGEgdGV4dHVyZS5cbiAqL1xuZXhwb3J0IHR5cGUgVGV4dHVyZVNvdXJjZSA9XG4gIHwgVHlwZWRBcnJheVxuICB8IEltYWdlRGF0YVxuICB8IEltYWdlQml0bWFwO1xuXG5leHBvcnQgdHlwZSBBbHBoYVR5cGUgPSBFbWJpbmRFbnVtRW50aXR5O1xuZXhwb3J0IHR5cGUgQmxlbmRNb2RlID0gRW1iaW5kRW51bUVudGl0eTtcbmV4cG9ydCB0eXBlIEJsdXJTdHlsZSA9IEVtYmluZEVudW1FbnRpdHk7XG5leHBvcnQgdHlwZSBDbGlwT3AgPSBFbWJpbmRFbnVtRW50aXR5O1xuZXhwb3J0IHR5cGUgQ29sb3JTcGFjZSA9IEVtYmluZE9iamVjdDxDb2xvclNwYWNlPjtcbmV4cG9ydCB0eXBlIENvbG9yVHlwZSA9IEVtYmluZEVudW1FbnRpdHk7XG5leHBvcnQgdHlwZSBFbmNvZGVkSW1hZ2VGb3JtYXQgPSBFbWJpbmRFbnVtRW50aXR5O1xuZXhwb3J0IHR5cGUgRmlsbFR5cGUgPSBFbWJpbmRFbnVtRW50aXR5O1xuZXhwb3J0IHR5cGUgRmlsdGVyTW9kZSA9IEVtYmluZEVudW1FbnRpdHk7XG5leHBvcnQgdHlwZSBGb250RWRnaW5nID0gRW1iaW5kRW51bUVudGl0eTtcbmV4cG9ydCB0eXBlIEZvbnRIaW50aW5nID0gRW1iaW5kRW51bUVudGl0eTtcbmV4cG9ydCB0eXBlIE1pcG1hcE1vZGUgPSBFbWJpbmRFbnVtRW50aXR5O1xuZXhwb3J0IHR5cGUgUGFpbnRTdHlsZSA9IEVtYmluZEVudW1FbnRpdHk7XG5leHBvcnQgdHlwZSBQYXRoT3AgPSBFbWJpbmRFbnVtRW50aXR5O1xuZXhwb3J0IHR5cGUgUG9pbnRNb2RlID0gRW1iaW5kRW51bUVudGl0eTtcbmV4cG9ydCB0eXBlIFN0cm9rZUNhcCA9IEVtYmluZEVudW1FbnRpdHk7XG5leHBvcnQgdHlwZSBTdHJva2VKb2luID0gRW1iaW5kRW51bUVudGl0eTtcbmV4cG9ydCB0eXBlIFRpbGVNb2RlID0gRW1iaW5kRW51bUVudGl0eTtcbmV4cG9ydCB0eXBlIFZlcnRleE1vZGUgPSBFbWJpbmRFbnVtRW50aXR5O1xuXG5leHBvcnQgdHlwZSBBZmZpbml0eSA9IEVtYmluZEVudW1FbnRpdHk7XG5leHBvcnQgdHlwZSBEZWNvcmF0aW9uU3R5bGUgPSBFbWJpbmRFbnVtRW50aXR5O1xuZXhwb3J0IHR5cGUgRm9udFNsYW50ID0gRW1iaW5kRW51bUVudGl0eTtcbmV4cG9ydCB0eXBlIEZvbnRXZWlnaHQgPSBFbWJpbmRFbnVtRW50aXR5O1xuZXhwb3J0IHR5cGUgRm9udFdpZHRoID0gRW1iaW5kRW51bUVudGl0eTtcbmV4cG9ydCB0eXBlIFBsYWNlaG9sZGVyQWxpZ25tZW50ID0gRW1iaW5kRW51bUVudGl0eTtcbmV4cG9ydCB0eXBlIFJlY3RIZWlnaHRTdHlsZSA9IEVtYmluZEVudW1FbnRpdHk7XG5leHBvcnQgdHlwZSBSZWN0V2lkdGhTdHlsZSA9IEVtYmluZEVudW1FbnRpdHk7XG5leHBvcnQgdHlwZSBUZXh0QWxpZ24gPSBFbWJpbmRFbnVtRW50aXR5O1xuZXhwb3J0IHR5cGUgVGV4dEJhc2VsaW5lID0gRW1iaW5kRW51bUVudGl0eTtcbmV4cG9ydCB0eXBlIFRleHREaXJlY3Rpb24gPSBFbWJpbmRFbnVtRW50aXR5O1xuZXhwb3J0IHR5cGUgVGV4dEhlaWdodEJlaGF2aW9yID0gRW1iaW5kRW51bUVudGl0eTtcblxuZXhwb3J0IGludGVyZmFjZSBBZmZpbml0eUVudW1WYWx1ZXMgZXh0ZW5kcyBFbWJpbmRFbnVtIHtcbiAgVXBzdHJlYW06IEFmZmluaXR5O1xuICBEb3duc3RyZWFtOiBBZmZpbml0eTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBbHBoYVR5cGVFbnVtVmFsdWVzIGV4dGVuZHMgRW1iaW5kRW51bSB7XG4gIE9wYXF1ZTogQWxwaGFUeXBlO1xuICBQcmVtdWw6IEFscGhhVHlwZTtcbiAgVW5wcmVtdWw6IEFscGhhVHlwZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCbGVuZE1vZGVFbnVtVmFsdWVzIGV4dGVuZHMgRW1iaW5kRW51bSB7XG4gIENsZWFyOiBCbGVuZE1vZGU7XG4gIFNyYzogQmxlbmRNb2RlO1xuICBEc3Q6IEJsZW5kTW9kZTtcbiAgU3JjT3ZlcjogQmxlbmRNb2RlO1xuICBEc3RPdmVyOiBCbGVuZE1vZGU7XG4gIFNyY0luOiBCbGVuZE1vZGU7XG4gIERzdEluOiBCbGVuZE1vZGU7XG4gIFNyY091dDogQmxlbmRNb2RlO1xuICBEc3RPdXQ6IEJsZW5kTW9kZTtcbiAgU3JjQVRvcDogQmxlbmRNb2RlO1xuICBEc3RBVG9wOiBCbGVuZE1vZGU7XG4gIFhvcjogQmxlbmRNb2RlO1xuICBQbHVzOiBCbGVuZE1vZGU7XG4gIE1vZHVsYXRlOiBCbGVuZE1vZGU7XG4gIFNjcmVlbjogQmxlbmRNb2RlO1xuICBPdmVybGF5OiBCbGVuZE1vZGU7XG4gIERhcmtlbjogQmxlbmRNb2RlO1xuICBMaWdodGVuOiBCbGVuZE1vZGU7XG4gIENvbG9yRG9kZ2U6IEJsZW5kTW9kZTtcbiAgQ29sb3JCdXJuOiBCbGVuZE1vZGU7XG4gIEhhcmRMaWdodDogQmxlbmRNb2RlO1xuICBTb2Z0TGlnaHQ6IEJsZW5kTW9kZTtcbiAgRGlmZmVyZW5jZTogQmxlbmRNb2RlO1xuICBFeGNsdXNpb246IEJsZW5kTW9kZTtcbiAgTXVsdGlwbHk6IEJsZW5kTW9kZTtcbiAgSHVlOiBCbGVuZE1vZGU7XG4gIFNhdHVyYXRpb246IEJsZW5kTW9kZTtcbiAgQ29sb3I6IEJsZW5kTW9kZTtcbiAgTHVtaW5vc2l0eTogQmxlbmRNb2RlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJsdXJTdHlsZUVudW1WYWx1ZXMgZXh0ZW5kcyBFbWJpbmRFbnVtIHtcbiAgTm9ybWFsOiBCbHVyU3R5bGU7XG4gIFNvbGlkOiBCbHVyU3R5bGU7XG4gIE91dGVyOiBCbHVyU3R5bGU7XG4gIElubmVyOiBCbHVyU3R5bGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2xpcE9wRW51bVZhbHVlcyBleHRlbmRzIEVtYmluZEVudW0ge1xuICBEaWZmZXJlbmNlOiBDbGlwT3A7XG4gIEludGVyc2VjdDogQ2xpcE9wO1xufVxuXG4vKipcbiAqIFRoZSBjdXJyZW50bHkgc3VwcG9ydGVkIGNvbG9yIHNwYWNlcy4gVGhlc2UgYXJlIGFsbCBzaW5nbGV0b24gdmFsdWVzLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbG9yU3BhY2VFbnVtVmFsdWVzIHsgLy8gbm90IGEgdHlwaWNhbCBlbnVtLCBidXQgZWZmZWN0aXZlbHkgbGlrZSBvbmUuXG4gIC8vIFRoZXNlIGFyZSBhbGwgc2luZ2xldG9uIHZhbHVlcyAtIGRvbid0IGNhbGwgZGVsZXRlIG9uIHRoZW0uXG4gIHJlYWRvbmx5IFNSR0I6IENvbG9yU3BhY2U7XG4gIHJlYWRvbmx5IERJU1BMQVlfUDM6IENvbG9yU3BhY2U7XG4gIHJlYWRvbmx5IEFET0JFX1JHQjogQ29sb3JTcGFjZTtcblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB0d28gY29sb3Igc3BhY2VzIGFyZSBlcXVhbC5cbiAgICogQHBhcmFtIGFcbiAgICogQHBhcmFtIGJcbiAgICovXG4gIEVxdWFscyhhOiBDb2xvclNwYWNlLCBiOiBDb2xvclNwYWNlKTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb2xvclR5cGVFbnVtVmFsdWVzIGV4dGVuZHMgRW1iaW5kRW51bSB7XG4gIEFscGhhXzg6IENvbG9yVHlwZTtcbiAgUkdCXzU2NTogQ29sb3JUeXBlO1xuICBSR0JBXzg4ODg6IENvbG9yVHlwZTtcbiAgQkdSQV84ODg4OiBDb2xvclR5cGU7XG4gIFJHQkFfMTAxMDEwMjogQ29sb3JUeXBlO1xuICBSR0JfMTAxMDEweDogQ29sb3JUeXBlO1xuICBHcmF5Xzg6IENvbG9yVHlwZTtcbiAgUkdCQV9GMTY6IENvbG9yVHlwZTtcbiAgUkdCQV9GMzI6IENvbG9yVHlwZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZWNvcmF0aW9uU3R5bGVFbnVtVmFsdWVzIGV4dGVuZHMgRW1iaW5kRW51bSB7XG4gIFNvbGlkOiBEZWNvcmF0aW9uU3R5bGU7XG4gIERvdWJsZTogRGVjb3JhdGlvblN0eWxlO1xuICBEb3R0ZWQ6IERlY29yYXRpb25TdHlsZTtcbiAgRGFzaGVkOiBEZWNvcmF0aW9uU3R5bGU7XG4gIFdhdnk6IERlY29yYXRpb25TdHlsZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWxsVHlwZUVudW1WYWx1ZXMgZXh0ZW5kcyBFbWJpbmRFbnVtIHtcbiAgV2luZGluZzogRmlsbFR5cGU7XG4gIEV2ZW5PZGQ6IEZpbGxUeXBlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpbHRlck1vZGVFbnVtVmFsdWVzIGV4dGVuZHMgRW1iaW5kRW51bSB7XG4gIExpbmVhcjogRmlsdGVyTW9kZTtcbiAgTmVhcmVzdDogRmlsdGVyTW9kZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGb250RWRnaW5nRW51bVZhbHVlcyBleHRlbmRzIEVtYmluZEVudW0ge1xuICBBbGlhczogRm9udEVkZ2luZztcbiAgQW50aUFsaWFzOiBGb250RWRnaW5nO1xuICBTdWJwaXhlbEFudGlBbGlhczogRm9udEVkZ2luZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGb250SGludGluZ0VudW1WYWx1ZXMgZXh0ZW5kcyBFbWJpbmRFbnVtIHtcbiAgTm9uZTogRm9udEhpbnRpbmc7XG4gIFNsaWdodDogRm9udEhpbnRpbmc7XG4gIE5vcm1hbDogRm9udEhpbnRpbmc7XG4gIEZ1bGw6IEZvbnRIaW50aW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZvbnRTbGFudEVudW1WYWx1ZXMgZXh0ZW5kcyBFbWJpbmRFbnVtIHtcbiAgVXByaWdodDogRm9udFNsYW50O1xuICBJdGFsaWM6IEZvbnRTbGFudDtcbiAgT2JsaXF1ZTogRm9udFNsYW50O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZvbnRXZWlnaHRFbnVtVmFsdWVzIGV4dGVuZHMgRW1iaW5kRW51bSB7XG4gIEludmlzaWJsZTogRm9udFdlaWdodDtcbiAgVGhpbjogRm9udFdlaWdodDtcbiAgRXh0cmFMaWdodDogRm9udFdlaWdodDtcbiAgTGlnaHQ6IEZvbnRXZWlnaHQ7XG4gIE5vcm1hbDogRm9udFdlaWdodDtcbiAgTWVkaXVtOiBGb250V2VpZ2h0O1xuICBTZW1pQm9sZDogRm9udFdlaWdodDtcbiAgQm9sZDogRm9udFdlaWdodDtcbiAgRXh0cmFCb2xkOiBGb250V2VpZ2h0O1xuICBCbGFjazogRm9udFdlaWdodDtcbiAgRXh0cmFCbGFjazogRm9udFdlaWdodDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGb250V2lkdGhFbnVtVmFsdWVzIGV4dGVuZHMgRW1iaW5kRW51bSB7XG4gIFVsdHJhQ29uZGVuc2VkOiBGb250V2lkdGg7XG4gIEV4dHJhQ29uZGVuc2VkOiBGb250V2lkdGg7XG4gIENvbmRlbnNlZDogRm9udFdpZHRoO1xuICBTZW1pQ29uZGVuc2VkOiBGb250V2lkdGg7XG4gIE5vcm1hbDogRm9udFdpZHRoO1xuICBTZW1pRXhwYW5kZWQ6IEZvbnRXaWR0aDtcbiAgRXhwYW5kZWQ6IEZvbnRXaWR0aDtcbiAgRXh0cmFFeHBhbmRlZDogRm9udFdpZHRoO1xuICBVbHRyYUV4cGFuZGVkOiBGb250V2lkdGg7XG59XG5cbi8qXG4gKiAgVGhlc2UgdmFsdWVzIGNhbiBiZSBPUidkIHRvZ2V0aGVyXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2x5cGhSdW5GbGFnVmFsdWVzIHtcbiAgSXNXaGl0ZVNwYWNlOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW1hZ2VGb3JtYXRFbnVtVmFsdWVzIGV4dGVuZHMgRW1iaW5kRW51bSB7XG4gIC8vIFRPRE8oa2psdWJpY2spIFdoZW4gdGhlc2UgYXJlIGNvbXBpbGVkIGluIGRlcGVuZGluZyBvbiB0aGUgYXZhaWxhYmlsaXR5IG9mIHRoZSBjb2RlY3MsXG4gIC8vICAgYmUgc3VyZSB0byBtYWtlIHRoZXNlIG51bGxhYmxlLlxuICBQTkc6IEVuY29kZWRJbWFnZUZvcm1hdDtcbiAgSlBFRzogRW5jb2RlZEltYWdlRm9ybWF0O1xuICBXRUJQOiBFbmNvZGVkSW1hZ2VGb3JtYXQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWlwbWFwTW9kZUVudW1WYWx1ZXMgZXh0ZW5kcyBFbWJpbmRFbnVtIHtcbiAgTm9uZTogTWlwbWFwTW9kZTtcbiAgTmVhcmVzdDogTWlwbWFwTW9kZTtcbiAgTGluZWFyOiBNaXBtYXBNb2RlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhaW50U3R5bGVFbnVtVmFsdWVzIGV4dGVuZHMgRW1iaW5kRW51bSB7XG4gIEZpbGw6IFBhaW50U3R5bGU7XG4gIFN0cm9rZTogUGFpbnRTdHlsZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYXRoT3BFbnVtVmFsdWVzIGV4dGVuZHMgRW1iaW5kRW51bSB7XG4gIERpZmZlcmVuY2U6IFBhdGhPcDtcbiAgSW50ZXJzZWN0OiBQYXRoT3A7XG4gIFVuaW9uOiBQYXRoT3A7XG4gIFhPUjogUGF0aE9wO1xuICBSZXZlcnNlRGlmZmVyZW5jZTogUGF0aE9wO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBsYWNlaG9sZGVyQWxpZ25tZW50RW51bVZhbHVlcyBleHRlbmRzIEVtYmluZEVudW0ge1xuICBCYXNlbGluZTogUGxhY2Vob2xkZXJBbGlnbm1lbnQ7XG4gIEFib3ZlQmFzZWxpbmU6IFBsYWNlaG9sZGVyQWxpZ25tZW50O1xuICBCZWxvd0Jhc2VsaW5lOiBQbGFjZWhvbGRlckFsaWdubWVudDtcbiAgVG9wOiBQbGFjZWhvbGRlckFsaWdubWVudDtcbiAgQm90dG9tOiBQbGFjZWhvbGRlckFsaWdubWVudDtcbiAgTWlkZGxlOiBQbGFjZWhvbGRlckFsaWdubWVudDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBQb2ludE1vZGVFbnVtVmFsdWVzIGV4dGVuZHMgRW1iaW5kRW51bSB7XG4gIFBvaW50czogUG9pbnRNb2RlO1xuICBMaW5lczogUG9pbnRNb2RlO1xuICBQb2x5Z29uOiBQb2ludE1vZGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVjdEhlaWdodFN0eWxlRW51bVZhbHVlcyBleHRlbmRzIEVtYmluZEVudW0ge1xuICBUaWdodDogUmVjdEhlaWdodFN0eWxlO1xuICBNYXg6IFJlY3RIZWlnaHRTdHlsZTtcbiAgSW5jbHVkZUxpbmVTcGFjaW5nTWlkZGxlOiBSZWN0SGVpZ2h0U3R5bGU7XG4gIEluY2x1ZGVMaW5lU3BhY2luZ1RvcDogUmVjdEhlaWdodFN0eWxlO1xuICBJbmNsdWRlTGluZVNwYWNpbmdCb3R0b206IFJlY3RIZWlnaHRTdHlsZTtcbiAgU3RydXQ6IFJlY3RIZWlnaHRTdHlsZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWN0V2lkdGhTdHlsZUVudW1WYWx1ZXMgZXh0ZW5kcyBFbWJpbmRFbnVtIHtcbiAgVGlnaHQ6IFJlY3RXaWR0aFN0eWxlO1xuICBNYXg6IFJlY3RXaWR0aFN0eWxlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFN0cm9rZUNhcEVudW1WYWx1ZXMgZXh0ZW5kcyBFbWJpbmRFbnVtIHtcbiAgQnV0dDogU3Ryb2tlQ2FwO1xuICBSb3VuZDogU3Ryb2tlQ2FwO1xuICBTcXVhcmU6IFN0cm9rZUNhcDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdHJva2VKb2luRW51bVZhbHVlcyBleHRlbmRzIEVtYmluZEVudW0ge1xuICBCZXZlbDogU3Ryb2tlSm9pbjtcbiAgTWl0ZXI6IFN0cm9rZUpvaW47XG4gIFJvdW5kOiBTdHJva2VKb2luO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRleHRBbGlnbkVudW1WYWx1ZXMgZXh0ZW5kcyBFbWJpbmRFbnVtIHtcbiAgTGVmdDogVGV4dEFsaWduO1xuICBSaWdodDogVGV4dEFsaWduO1xuICBDZW50ZXI6IFRleHRBbGlnbjtcbiAgSnVzdGlmeTogVGV4dEFsaWduO1xuICBTdGFydDogVGV4dEFsaWduO1xuICBFbmQ6IFRleHRBbGlnbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUZXh0QmFzZWxpbmVFbnVtVmFsdWVzIGV4dGVuZHMgRW1iaW5kRW51bSB7XG4gIEFscGhhYmV0aWM6IFRleHRCYXNlbGluZTtcbiAgSWRlb2dyYXBoaWM6IFRleHRCYXNlbGluZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUZXh0RGlyZWN0aW9uRW51bVZhbHVlcyBleHRlbmRzIEVtYmluZEVudW0ge1xuICBMVFI6IFRleHREaXJlY3Rpb247XG4gIFJUTDogVGV4dERpcmVjdGlvbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUZXh0SGVpZ2h0QmVoYXZpb3JFbnVtVmFsdWVzIGV4dGVuZHMgRW1iaW5kRW51bSB7XG4gIEFsbDogVGV4dEhlaWdodEJlaGF2aW9yO1xuICBEaXNhYmxlRmlyc3RBc2NlbnQ6IFRleHRIZWlnaHRCZWhhdmlvcjtcbiAgRGlzYWJsZUxhc3REZXNjZW50OiBUZXh0SGVpZ2h0QmVoYXZpb3I7XG4gIERpc2FibGVBbGw6IFRleHRIZWlnaHRCZWhhdmlvcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUaWxlTW9kZUVudW1WYWx1ZXMgZXh0ZW5kcyBFbWJpbmRFbnVtIHtcbiAgQ2xhbXA6IFRpbGVNb2RlO1xuICBEZWNhbDogVGlsZU1vZGU7XG4gIE1pcnJvcjogVGlsZU1vZGU7XG4gIFJlcGVhdDogVGlsZU1vZGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmVydGV4TW9kZUVudW1WYWx1ZXMgZXh0ZW5kcyBFbWJpbmRFbnVtIHtcbiAgVHJpYW5nbGVzOiBWZXJ0ZXhNb2RlO1xuICBUcmlhbmdsZXNTdHJpcDogVmVydGV4TW9kZTtcbiAgVHJpYW5nbGVGYW46IFZlcnRleE1vZGU7XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsd0ZBQXdGO0FBQ3hGLDZDQUE2QztBQUU3QyxrQ0FBa0MifQ==