import { Base, SnowflakeBase } from './base.ts';
import { GuildTextBasedChannel } from './guildTextChannel.ts';
import { UserResolvable } from './user.ts';
import { ThreadMembersManager } from '../managers/threadMembers.ts';
import { Collection } from '../utils/collection.ts';
export class ThreadMetadata extends Base {
    archived = false;
    archiver;
    /** Duration in minutes to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080 */ autoArchiveDuration;
    archiveTimestamp;
    locked = false;
    constructor(client, data){
        super(client);
        this.readFromData(data);
    }
    readFromData(data) {
        this.archived = data.archived ?? this.archived;
        this.archiver = data.archiver_id === undefined || data.archiver_id === null ? undefined : new UserResolvable(this.client, data.archiver_id);
        this.autoArchiveDuration = data.auto_archive_duration ?? this.locked;
        this.archiveTimestamp = new Date(data.archive_timestamp);
        this.locked = data.locked ?? this.locked;
        return this;
    }
}
export class ThreadMember extends SnowflakeBase {
    user;
    joinTimestamp;
    thread;
    flags = 0;
    constructor(client, data){
        super(client);
        this.readFromData(data);
    }
    readFromData(data) {
        this.user = new UserResolvable(this.client, data.user_id);
        this.joinTimestamp = new Date(data.join_timestamp);
        this.thread = new ThreadResolvable(this.client, data.id);
        this.flags = data.flags ?? this.flags;
        return this;
    }
}
export class ThreadResolvable extends SnowflakeBase {
    constructor(client, id){
        super(client);
        this.id = id;
    }
    async get() {
        return this.client.channels.get(this.id);
    }
    async fetch() {
        return this.client.channels.fetch(this.id);
    }
    async resolve() {
        return await this.client.channels.resolve(this.id);
    }
    id;
}
export class ThreadChannel extends GuildTextBasedChannel {
    metadata;
    memberCount;
    messageCount;
    member;
    members;
    slowmode = 0;
    owner;
    totalMessageSent;
    // currently there's no way to grab the tag by id
    appliedTags = [];
    constructor(client, data, guild){
        super(client, data, guild);
        this.readFromData(data);
        this.members = new ThreadMembersManager(client, this);
    }
    _readFromData(data) {
        this.metadata = new ThreadMetadata(this.client, data.thread_metadata);
        this.memberCount = data.member_count;
        this.messageCount = data.message_count;
        this.member = data.member !== undefined ? new ThreadMember(this.client, data.member) : undefined;
        this.slowmode = data.rate_limit_per_user ?? this.slowmode;
        this.owner = new UserResolvable(this.client, data.owner_id) ?? this.owner;
        this.totalMessageSent = data.total_message_sent ?? this.totalMessageSent;
        this.appliedTags = data.applied_tags ?? this.appliedTags;
    }
    readFromData(data) {
        super.readFromData(data);
        this._readFromData(data);
        return this;
    }
    /** Edit the Guild Thread Channel */ async edit(options) {
        const body = {
            name: options.name,
            auto_archive_duration: options.autoArchiveDuration,
            rate_limit_per_user: options.slowmode,
            locked: options.locked,
            archived: options.archived
        };
        const resp = await this.client.rest.api.channels[this.id].patch(body);
        this.readFromData(resp);
        return this;
    }
    async join() {
        await this.client.rest.endpoints.joinThread(this.id);
        return this;
    }
    async leave() {
        await this.client.rest.endpoints.leaveThread(this.id);
        return this;
    }
    async addUser(user) {
        await this.client.rest.endpoints.addUserToThread(this.id, typeof user === 'string' ? user : user.id);
        return this;
    }
    async removeUser(user) {
        await this.client.rest.endpoints.removeUserFromThread(this.id, typeof user === 'string' ? user : user.id);
        return this;
    }
    async fetchMembers() {
        const payloads = await this.client.rest.endpoints.getThreadMembers(this.id);
        const members = new Collection();
        for (const payload of payloads){
            await this.members.set(payload.id, payload);
            members.set(payload.id, await this.members.get(payload.id));
        }
        return members;
    }
    /** Not possible to set Thread Channel topic */ async setTopic() {
        throw new Error('Not possible to set Thread Channel topic');
    }
}
//# sourceMappingURL=data:application/json;base64,