import { BaseChildManager } from './baseChild.ts';
export class ChannelThreadsManager extends BaseChildManager {
    channel;
    constructor(client, parent, channel){
        super(client, parent);
        this.channel = channel;
    }
    async get(id) {
        const res = await this.parent.get(id);
        if (res !== undefined && res.parentID === this.channel.id) return res;
        else return undefined;
    }
    /** Delete a Thread Channel */ async delete(id) {
        const v = typeof id === 'string' ? id : id.id;
        if ((await this.get(v))?.parentID !== this.channel.id) return false;
        await this.parent.delete(typeof id === 'string' ? id : id.id);
        return true;
    }
    async array() {
        const arr = await this.parent.array();
        return arr.filter((c)=>c.parentID === this.channel.id);
    }
    async flush() {
        const arr = await this.array();
        for (const elem of arr){
            this.parent._delete(elem.id);
        }
        return true;
    }
    async start(options, message) {
        return this.channel.startThread(options, message);
    }
    async startPrivate(options) {
        return this.channel.startPrivateThread(options);
    }
    async fetchArchived(type = 'public', params = {}) {
        return this.channel.fetchArchivedThreads(type, params);
    }
    async fetchPublicArchived(params = {}) {
        return this.channel.fetchPublicArchivedThreads(params);
    }
    async fetchPrivateArchived(params = {}) {
        return this.channel.fetchPrivateArchivedThreads(params);
    }
    async fetchJoinedPrivateArchived(params = {}) {
        return this.channel.fetchJoinedPrivateArchivedThreads(params);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvaGFybW9ueUB2Mi45LjAvc3JjL21hbmFnZXJzL2NoYW5uZWxUaHJlYWRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ2xpZW50IH0gZnJvbSAnLi4vY2xpZW50L21vZC50cydcbmltcG9ydCB0eXBlIHsgVGhyZWFkQ2hhbm5lbFBheWxvYWQgfSBmcm9tICcuLi90eXBlcy9jaGFubmVsLnRzJ1xuaW1wb3J0IHsgQmFzZUNoaWxkTWFuYWdlciB9IGZyb20gJy4vYmFzZUNoaWxkLnRzJ1xuaW1wb3J0IHR5cGUgeyBUaHJlYWRzTWFuYWdlciB9IGZyb20gJy4vdGhyZWFkcy50cydcbmltcG9ydCB0eXBlIHtcbiAgVGhyZWFkQ2hhbm5lbCxcbiAgVGhyZWFkTWVtYmVyXG59IGZyb20gJy4uL3N0cnVjdHVyZXMvdGhyZWFkQ2hhbm5lbC50cydcbmltcG9ydCB0eXBlIHsgQmFzZU1hbmFnZXIsIE1lc3NhZ2UgfSBmcm9tICcuLi8uLi9tb2QudHMnXG5pbXBvcnQgdHlwZSB7XG4gIENyZWF0ZVRocmVhZE9wdGlvbnMsXG4gIEd1aWxkVGhyZWFkQXZhaWxhYmxlQ2hhbm5lbFxufSBmcm9tICcuLi9zdHJ1Y3R1cmVzL2d1aWxkVGhyZWFkQXZhaWxhYmxlQ2hhbm5lbC50cydcblxuZXhwb3J0IGNsYXNzIENoYW5uZWxUaHJlYWRzTWFuYWdlciBleHRlbmRzIEJhc2VDaGlsZE1hbmFnZXI8XG4gIFRocmVhZENoYW5uZWxQYXlsb2FkLFxuICBUaHJlYWRDaGFubmVsXG4+IHtcbiAgY2hhbm5lbDogR3VpbGRUaHJlYWRBdmFpbGFibGVDaGFubmVsXG4gIGRlY2xhcmUgcGFyZW50OiBCYXNlTWFuYWdlcjxUaHJlYWRDaGFubmVsUGF5bG9hZCwgVGhyZWFkQ2hhbm5lbD5cblxuICBjb25zdHJ1Y3RvcihcbiAgICBjbGllbnQ6IENsaWVudCxcbiAgICBwYXJlbnQ6IFRocmVhZHNNYW5hZ2VyLFxuICAgIGNoYW5uZWw6IEd1aWxkVGhyZWFkQXZhaWxhYmxlQ2hhbm5lbFxuICApIHtcbiAgICBzdXBlcihcbiAgICAgIGNsaWVudCxcbiAgICAgIHBhcmVudCBhcyB1bmtub3duIGFzIEJhc2VNYW5hZ2VyPFRocmVhZENoYW5uZWxQYXlsb2FkLCBUaHJlYWRDaGFubmVsPlxuICAgIClcbiAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsXG4gIH1cblxuICBhc3luYyBnZXQoaWQ6IHN0cmluZyk6IFByb21pc2U8VGhyZWFkQ2hhbm5lbCB8IHVuZGVmaW5lZD4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucGFyZW50LmdldChpZClcbiAgICBpZiAocmVzICE9PSB1bmRlZmluZWQgJiYgcmVzLnBhcmVudElEID09PSB0aGlzLmNoYW5uZWwuaWQpIHJldHVybiByZXNcbiAgICBlbHNlIHJldHVybiB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKiBEZWxldGUgYSBUaHJlYWQgQ2hhbm5lbCAqL1xuICBhc3luYyBkZWxldGUoaWQ6IHN0cmluZyB8IFRocmVhZENoYW5uZWwpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBjb25zdCB2ID0gdHlwZW9mIGlkID09PSAnc3RyaW5nJyA/IGlkIDogaWQuaWRcbiAgICBpZiAoKGF3YWl0IHRoaXMuZ2V0KHYpKT8ucGFyZW50SUQgIT09IHRoaXMuY2hhbm5lbC5pZCkgcmV0dXJuIGZhbHNlXG4gICAgYXdhaXQgdGhpcy5wYXJlbnQuZGVsZXRlKHR5cGVvZiBpZCA9PT0gJ3N0cmluZycgPyBpZCA6IGlkLmlkKVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBhc3luYyBhcnJheSgpOiBQcm9taXNlPFRocmVhZENoYW5uZWxbXT4ge1xuICAgIGNvbnN0IGFyciA9IGF3YWl0IHRoaXMucGFyZW50LmFycmF5KClcbiAgICByZXR1cm4gYXJyLmZpbHRlcigoYykgPT4gYy5wYXJlbnRJRCA9PT0gdGhpcy5jaGFubmVsLmlkKVxuICB9XG5cbiAgYXN5bmMgZmx1c2goKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgY29uc3QgYXJyID0gYXdhaXQgdGhpcy5hcnJheSgpXG4gICAgZm9yIChjb25zdCBlbGVtIG9mIGFycikge1xuICAgICAgdGhpcy5wYXJlbnQuX2RlbGV0ZShlbGVtLmlkKVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgYXN5bmMgc3RhcnQoXG4gICAgb3B0aW9uczogQ3JlYXRlVGhyZWFkT3B0aW9ucyxcbiAgICBtZXNzYWdlPzogc3RyaW5nIHwgTWVzc2FnZVxuICApOiBQcm9taXNlPFRocmVhZENoYW5uZWw+IHtcbiAgICByZXR1cm4gdGhpcy5jaGFubmVsLnN0YXJ0VGhyZWFkKG9wdGlvbnMsIG1lc3NhZ2UpXG4gIH1cblxuICBhc3luYyBzdGFydFByaXZhdGUob3B0aW9uczogQ3JlYXRlVGhyZWFkT3B0aW9ucyk6IFByb21pc2U8VGhyZWFkQ2hhbm5lbD4ge1xuICAgIHJldHVybiB0aGlzLmNoYW5uZWwuc3RhcnRQcml2YXRlVGhyZWFkKG9wdGlvbnMpXG4gIH1cblxuICBhc3luYyBmZXRjaEFyY2hpdmVkKFxuICAgIHR5cGU6ICdwdWJsaWMnIHwgJ3ByaXZhdGUnID0gJ3B1YmxpYycsXG4gICAgcGFyYW1zOiB7IGJlZm9yZT86IHN0cmluZzsgbGltaXQ/OiBudW1iZXIgfSA9IHt9XG4gICk6IFByb21pc2U8e1xuICAgIHRocmVhZHM6IFRocmVhZENoYW5uZWxbXVxuICAgIG1lbWJlcnM6IFRocmVhZE1lbWJlcltdXG4gICAgaGFzTW9yZTogYm9vbGVhblxuICB9PiB7XG4gICAgcmV0dXJuIHRoaXMuY2hhbm5lbC5mZXRjaEFyY2hpdmVkVGhyZWFkcyh0eXBlLCBwYXJhbXMpXG4gIH1cblxuICBhc3luYyBmZXRjaFB1YmxpY0FyY2hpdmVkKFxuICAgIHBhcmFtczogeyBiZWZvcmU/OiBzdHJpbmc7IGxpbWl0PzogbnVtYmVyIH0gPSB7fVxuICApOiBQcm9taXNlPHtcbiAgICB0aHJlYWRzOiBUaHJlYWRDaGFubmVsW11cbiAgICBtZW1iZXJzOiBUaHJlYWRNZW1iZXJbXVxuICAgIGhhc01vcmU6IGJvb2xlYW5cbiAgfT4ge1xuICAgIHJldHVybiB0aGlzLmNoYW5uZWwuZmV0Y2hQdWJsaWNBcmNoaXZlZFRocmVhZHMocGFyYW1zKVxuICB9XG5cbiAgYXN5bmMgZmV0Y2hQcml2YXRlQXJjaGl2ZWQoXG4gICAgcGFyYW1zOiB7IGJlZm9yZT86IHN0cmluZzsgbGltaXQ/OiBudW1iZXIgfSA9IHt9XG4gICk6IFByb21pc2U8e1xuICAgIHRocmVhZHM6IFRocmVhZENoYW5uZWxbXVxuICAgIG1lbWJlcnM6IFRocmVhZE1lbWJlcltdXG4gICAgaGFzTW9yZTogYm9vbGVhblxuICB9PiB7XG4gICAgcmV0dXJuIHRoaXMuY2hhbm5lbC5mZXRjaFByaXZhdGVBcmNoaXZlZFRocmVhZHMocGFyYW1zKVxuICB9XG5cbiAgYXN5bmMgZmV0Y2hKb2luZWRQcml2YXRlQXJjaGl2ZWQoXG4gICAgcGFyYW1zOiB7IGJlZm9yZT86IHN0cmluZzsgbGltaXQ/OiBudW1iZXIgfSA9IHt9XG4gICk6IFByb21pc2U8e1xuICAgIHRocmVhZHM6IFRocmVhZENoYW5uZWxbXVxuICAgIG1lbWJlcnM6IFRocmVhZE1lbWJlcltdXG4gICAgaGFzTW9yZTogYm9vbGVhblxuICB9PiB7XG4gICAgcmV0dXJuIHRoaXMuY2hhbm5lbC5mZXRjaEpvaW5lZFByaXZhdGVBcmNoaXZlZFRocmVhZHMocGFyYW1zKVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsU0FBUyxnQkFBZ0IsUUFBUSxpQkFBZ0I7QUFZakQsT0FBTyxNQUFNLDhCQUE4QjtJQUl6QyxRQUFvQztJQUdwQyxZQUNFLE1BQWMsRUFDZCxNQUFzQixFQUN0QixPQUFvQyxDQUNwQztRQUNBLEtBQUssQ0FDSCxRQUNBO1FBRUYsSUFBSSxDQUFDLE9BQU8sR0FBRztJQUNqQjtJQUVBLE1BQU0sSUFBSSxFQUFVLEVBQXNDO1FBQ3hELE1BQU0sTUFBTSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ2xDLElBQUksUUFBUSxhQUFhLElBQUksUUFBUSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLE9BQU87YUFDN0QsT0FBTztJQUNkO0lBRUEsNEJBQTRCLEdBQzVCLE1BQU0sT0FBTyxFQUEwQixFQUFvQjtRQUN6RCxNQUFNLElBQUksT0FBTyxPQUFPLFdBQVcsS0FBSyxHQUFHLEVBQUU7UUFDN0MsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsYUFBYSxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxPQUFPLEtBQUs7UUFDbkUsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLE9BQU8sV0FBVyxLQUFLLEdBQUcsRUFBRTtRQUM1RCxPQUFPLElBQUk7SUFDYjtJQUVBLE1BQU0sUUFBa0M7UUFDdEMsTUFBTSxNQUFNLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLO1FBQ25DLE9BQU8sSUFBSSxNQUFNLENBQUMsQ0FBQyxJQUFNLEVBQUUsUUFBUSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRTtJQUN6RDtJQUVBLE1BQU0sUUFBMEI7UUFDOUIsTUFBTSxNQUFNLE1BQU0sSUFBSSxDQUFDLEtBQUs7UUFDNUIsS0FBSyxNQUFNLFFBQVEsSUFBSztZQUN0QixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7UUFDN0I7UUFDQSxPQUFPLElBQUk7SUFDYjtJQUVBLE1BQU0sTUFDSixPQUE0QixFQUM1QixPQUEwQixFQUNGO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsU0FBUztJQUMzQztJQUVBLE1BQU0sYUFBYSxPQUE0QixFQUEwQjtRQUN2RSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7SUFDekM7SUFFQSxNQUFNLGNBQ0osT0FBNkIsUUFBUSxFQUNyQyxTQUE4QyxDQUFDLENBQUMsRUFLL0M7UUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsTUFBTTtJQUNqRDtJQUVBLE1BQU0sb0JBQ0osU0FBOEMsQ0FBQyxDQUFDLEVBSy9DO1FBQ0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDO0lBQ2pEO0lBRUEsTUFBTSxxQkFDSixTQUE4QyxDQUFDLENBQUMsRUFLL0M7UUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsMkJBQTJCLENBQUM7SUFDbEQ7SUFFQSxNQUFNLDJCQUNKLFNBQThDLENBQUMsQ0FBQyxFQUsvQztRQUNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQ0FBaUMsQ0FBQztJQUN4RDtBQUNGLENBQUMifQ==