export const guildCreate = async (gateway, d)=>{
    await gateway._readyReceived;
    const hasGuild = await gateway.client.guilds.get(d.id);
    await gateway.client.guilds.set(d.id, d);
    const guild = await gateway.client.guilds.get(d.id);
    if (d.members !== undefined) await guild.members.fromPayload(d.members);
    if (d.channels !== undefined) {
        for (const ch of d.channels){
            ch.guild_id = d.id;
            await gateway.client.channels.set(ch.id, ch);
        }
    }
    if (d.threads !== undefined) {
        for (const data of d.threads){
            await guild.threads.set(data.id, data);
        }
    }
    await guild.roles.fromPayload(d.roles);
    if (d.presences !== undefined) await guild.presences.fromPayload(d.presences);
    if (d.voice_states !== undefined) await guild.voiceStates.fromPayload(d.voice_states);
    if (d.stickers !== undefined) await gateway.client.stickers.fromPayload(d.stickers);
    for (const emojiPayload of d.emojis){
        if (emojiPayload.id === null) continue;
        if (emojiPayload.user !== undefined) {
            await gateway.client.users.set(emojiPayload.user.id, emojiPayload.user);
        }
        await gateway.client.emojis.set(emojiPayload.id, emojiPayload);
    }
    if (hasGuild === undefined) {
        // It wasn't lazy load, so emit event
        gateway.client.emit('guildCreate', guild);
    } else {
        if (gateway._guildsLoaded !== undefined) {
            gateway._guildsLoaded++;
            gateway._checkGuildsLoaded();
        }
        gateway.client.emit('guildLoaded', guild);
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvaGFybW9ueUB2Mi45LjAvc3JjL2dhdGV3YXkvaGFuZGxlcnMvZ3VpbGRDcmVhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBHYXRld2F5LCBHYXRld2F5RXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vbW9kLnRzJ1xuaW1wb3J0IHsgR3VpbGQgfSBmcm9tICcuLi8uLi9zdHJ1Y3R1cmVzL2d1aWxkLnRzJ1xuaW1wb3J0IHsgR3VpbGRQYXlsb2FkIH0gZnJvbSAnLi4vLi4vdHlwZXMvZ3VpbGQudHMnXG5pbXBvcnQgeyBHdWlsZENoYW5uZWxQYXlsb2FkIH0gZnJvbSAnLi4vLi4vdHlwZXMvY2hhbm5lbC50cydcblxuZXhwb3J0IGNvbnN0IGd1aWxkQ3JlYXRlOiBHYXRld2F5RXZlbnRIYW5kbGVyID0gYXN5bmMgKFxuICBnYXRld2F5OiBHYXRld2F5LFxuICBkOiBHdWlsZFBheWxvYWRcbikgPT4ge1xuICBhd2FpdCBnYXRld2F5Ll9yZWFkeVJlY2VpdmVkXG5cbiAgY29uc3QgaGFzR3VpbGQ6IEd1aWxkIHwgdW5kZWZpbmVkID0gYXdhaXQgZ2F0ZXdheS5jbGllbnQuZ3VpbGRzLmdldChkLmlkKVxuICBhd2FpdCBnYXRld2F5LmNsaWVudC5ndWlsZHMuc2V0KGQuaWQsIGQpXG4gIGNvbnN0IGd1aWxkID0gKGF3YWl0IGdhdGV3YXkuY2xpZW50Lmd1aWxkcy5nZXQoZC5pZCkpIGFzIHVua25vd24gYXMgR3VpbGRcblxuICBpZiAoZC5tZW1iZXJzICE9PSB1bmRlZmluZWQpIGF3YWl0IGd1aWxkLm1lbWJlcnMuZnJvbVBheWxvYWQoZC5tZW1iZXJzKVxuXG4gIGlmIChkLmNoYW5uZWxzICE9PSB1bmRlZmluZWQpIHtcbiAgICBmb3IgKGNvbnN0IGNoIG9mIGQuY2hhbm5lbHMgYXMgR3VpbGRDaGFubmVsUGF5bG9hZFtdKSB7XG4gICAgICBjaC5ndWlsZF9pZCA9IGQuaWRcbiAgICAgIGF3YWl0IGdhdGV3YXkuY2xpZW50LmNoYW5uZWxzLnNldChjaC5pZCwgY2gpXG4gICAgfVxuICB9XG5cbiAgaWYgKGQudGhyZWFkcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZm9yIChjb25zdCBkYXRhIG9mIGQudGhyZWFkcykge1xuICAgICAgYXdhaXQgZ3VpbGQudGhyZWFkcy5zZXQoZGF0YS5pZCwgZGF0YSlcbiAgICB9XG4gIH1cblxuICBhd2FpdCBndWlsZC5yb2xlcy5mcm9tUGF5bG9hZChkLnJvbGVzKVxuXG4gIGlmIChkLnByZXNlbmNlcyAhPT0gdW5kZWZpbmVkKSBhd2FpdCBndWlsZC5wcmVzZW5jZXMuZnJvbVBheWxvYWQoZC5wcmVzZW5jZXMpXG5cbiAgaWYgKGQudm9pY2Vfc3RhdGVzICE9PSB1bmRlZmluZWQpXG4gICAgYXdhaXQgZ3VpbGQudm9pY2VTdGF0ZXMuZnJvbVBheWxvYWQoZC52b2ljZV9zdGF0ZXMpXG5cbiAgaWYgKGQuc3RpY2tlcnMgIT09IHVuZGVmaW5lZClcbiAgICBhd2FpdCBnYXRld2F5LmNsaWVudC5zdGlja2Vycy5mcm9tUGF5bG9hZChkLnN0aWNrZXJzKVxuXG4gIGZvciAoY29uc3QgZW1vamlQYXlsb2FkIG9mIGQuZW1vamlzKSB7XG4gICAgaWYgKGVtb2ppUGF5bG9hZC5pZCA9PT0gbnVsbCkgY29udGludWVcbiAgICBpZiAoZW1vamlQYXlsb2FkLnVzZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgYXdhaXQgZ2F0ZXdheS5jbGllbnQudXNlcnMuc2V0KGVtb2ppUGF5bG9hZC51c2VyLmlkLCBlbW9qaVBheWxvYWQudXNlcilcbiAgICB9XG4gICAgYXdhaXQgZ2F0ZXdheS5jbGllbnQuZW1vamlzLnNldChlbW9qaVBheWxvYWQuaWQsIGVtb2ppUGF5bG9hZClcbiAgfVxuXG4gIGlmIChoYXNHdWlsZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gSXQgd2Fzbid0IGxhenkgbG9hZCwgc28gZW1pdCBldmVudFxuICAgIGdhdGV3YXkuY2xpZW50LmVtaXQoJ2d1aWxkQ3JlYXRlJywgZ3VpbGQpXG4gIH0gZWxzZSB7XG4gICAgaWYgKGdhdGV3YXkuX2d1aWxkc0xvYWRlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBnYXRld2F5Ll9ndWlsZHNMb2FkZWQrK1xuICAgICAgZ2F0ZXdheS5fY2hlY2tHdWlsZHNMb2FkZWQoKVxuICAgIH1cbiAgICBnYXRld2F5LmNsaWVudC5lbWl0KCdndWlsZExvYWRlZCcsIGd1aWxkKVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsT0FBTyxNQUFNLGNBQW1DLE9BQzlDLFNBQ0EsSUFDRztJQUNILE1BQU0sUUFBUSxjQUFjO0lBRTVCLE1BQU0sV0FBOEIsTUFBTSxRQUFRLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRTtJQUN4RSxNQUFNLFFBQVEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUU7SUFDdEMsTUFBTSxRQUFTLE1BQU0sUUFBUSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUU7SUFFbkQsSUFBSSxFQUFFLE9BQU8sS0FBSyxXQUFXLE1BQU0sTUFBTSxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUUsT0FBTztJQUV0RSxJQUFJLEVBQUUsUUFBUSxLQUFLLFdBQVc7UUFDNUIsS0FBSyxNQUFNLE1BQU0sRUFBRSxRQUFRLENBQTJCO1lBQ3BELEdBQUcsUUFBUSxHQUFHLEVBQUUsRUFBRTtZQUNsQixNQUFNLFFBQVEsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDM0M7SUFDRixDQUFDO0lBRUQsSUFBSSxFQUFFLE9BQU8sS0FBSyxXQUFXO1FBQzNCLEtBQUssTUFBTSxRQUFRLEVBQUUsT0FBTyxDQUFFO1lBQzVCLE1BQU0sTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxFQUFFO1FBQ25DO0lBQ0YsQ0FBQztJQUVELE1BQU0sTUFBTSxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUUsS0FBSztJQUVyQyxJQUFJLEVBQUUsU0FBUyxLQUFLLFdBQVcsTUFBTSxNQUFNLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFBRSxTQUFTO0lBRTVFLElBQUksRUFBRSxZQUFZLEtBQUssV0FDckIsTUFBTSxNQUFNLFdBQVcsQ0FBQyxXQUFXLENBQUMsRUFBRSxZQUFZO0lBRXBELElBQUksRUFBRSxRQUFRLEtBQUssV0FDakIsTUFBTSxRQUFRLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEVBQUUsUUFBUTtJQUV0RCxLQUFLLE1BQU0sZ0JBQWdCLEVBQUUsTUFBTSxDQUFFO1FBQ25DLElBQUksYUFBYSxFQUFFLEtBQUssSUFBSSxFQUFFLFFBQVE7UUFDdEMsSUFBSSxhQUFhLElBQUksS0FBSyxXQUFXO1lBQ25DLE1BQU0sUUFBUSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLElBQUksQ0FBQyxFQUFFLEVBQUUsYUFBYSxJQUFJO1FBQ3hFLENBQUM7UUFDRCxNQUFNLFFBQVEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLEVBQUU7SUFDbkQ7SUFFQSxJQUFJLGFBQWEsV0FBVztRQUMxQixxQ0FBcUM7UUFDckMsUUFBUSxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWU7SUFDckMsT0FBTztRQUNMLElBQUksUUFBUSxhQUFhLEtBQUssV0FBVztZQUN2QyxRQUFRLGFBQWE7WUFDckIsUUFBUSxrQkFBa0I7UUFDNUIsQ0FBQztRQUNELFFBQVEsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlO0lBQ3JDLENBQUM7QUFDSCxFQUFDIn0=